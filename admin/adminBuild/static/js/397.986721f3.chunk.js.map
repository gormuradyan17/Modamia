{"version":3,"file":"static/js/397.986721f3.chunk.js","mappings":"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","sources":["components/customize/silhouettes/bottoms/BottomSilhouettes.tsx","components/customize/silhouettes/bottoms/BottomSilhouettesList.tsx"],"sourcesContent":["import MainHead from 'layout/MainHead/MainHead';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport MainBody from 'layout/MainBody/MainBody';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport NewSilhouette from '../NewSilhouette';\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { getAvSilhouettes } from 'services/silhouetteService';\nimport BottomSilhouettesList from './BottomSilhouettesList';\n\nconst BottomSilhouettes = () => {\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const dispatch = useDispatch()\n    \n    const closePopup = () => {\n        setIsVisible(false)\n    }\n\n    useEffect(() => {\n        getAvSilhouettes(dispatch)\n    }, [])\n\n    return (\n        <div>\n            <MainHead text=\"Bottom Silhouettes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Bottom Silhouette</ButtonUI>\n            <MainBody>\n                <BottomSilhouettesList />\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewSilhouette\n                        selectedType='Bottom'\n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default BottomSilhouettes;","import { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { availableSilhouettes } from 'redux/reducers/silhouetteReducer';\nimport { BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL } from 'shared/constants/genericApiRoutes';\nimport { ObjectType, appColor } from 'shared/helpers/helpers';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport EditSilhouette from '../EditSilhouette';\nimport { formValidator } from 'utils/validators/validator';\nimport { silhouetteFormOptions } from 'utils/validators/validatorOptions';\nimport { updateSilhouette } from 'shared/api/dataApi';\nimport { getAvSilhouettes } from 'services/silhouetteService';\n\nconst BottomSilhouettesList = () => {\n\n    const silhouettes = useSelector(availableSilhouettes)\n\n    const [editableSilhouette, setEditableSilhouette] = useState<ObjectType>({})\n    const [silhouetteInfo, setSilhouetteInfo] = useState<ObjectType>({})\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n\n    const bottomSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette.type === 'Bottom')\n    }, [silhouettes])\n\n    const editSilhouette = (silhouette: ObjectType) => {\n        if (silhouette) {\n            setEditableSilhouette(silhouette)\n            setSilhouetteInfo(silhouette)\n            setIsVisible(true)\n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditableSilhouette({})\n        setSilhouetteInfo({})\n        setErrors({})\n    }\n\n    const saveSilhouette = async () => {\n\n        const formErrors = formValidator(editableSilhouette, silhouetteFormOptions);\n        if (formErrors) { return setErrors(formErrors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n\n        async function getNewFile(image: string) {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: blob.type });\n            return file\n        }\n        const newPrint = JSON.parse(JSON.stringify(editableSilhouette));\n        // console.log('editableSilhouette = > ', editableSilhouette)\n        if (editableSilhouette?.silhouetteurl?.includes('blob')) {\n            const file = await getNewFile(editableSilhouette.silhouetteurl);\n            newPrint.silhouetteurl = file;\n        }\n        const formData = new FormData();\n        Object.keys(newPrint).forEach((key) => {\n            formData.append(key, newPrint[key]);\n        });\n\n        await updateSilhouette(formData)\n        await getAvSilhouettes(dispatch)\n        closePopup()\n    }\n\n    return (\n        <div className='silhouettes-items'>\n            <HeadingUI text=\"Bottom Silhouettes\" size=\"20px\" />\n            <div className=\"silhouettes-items-body customXScrollbar\">\n                {bottomSilhouettes?.length ? bottomSilhouettes.map((silhouette: ObjectType) => {\n                    return <div className=\"silhouettes-list-silhouette\" key={silhouette._id}>\n                        <HeadingUI classN=\"silhouettes-list-text _ellipsis\" text={silhouette.name} color={appColor} size=\"16px\" />\n                        <div className=\"silhouettes-list-image\">\n                            <img src={`${BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL}${silhouette.silhouetteurl}`} className=\"silhouettes-list-img\" alt={silhouette.name} />\n                        </div>\n                        <ButtonUI classN=\"silhouettes-list-button\" onClick={() => editSilhouette(silhouette)}>Edit</ButtonUI>\n                    </div>\n                }) : <HeadingUI text='Nothing found' color={appColor} size='16px' />}\n            </div>\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditSilhouette\n                    callback={saveSilhouette}\n                    closePopup={closePopup}\n                    silhouette={editableSilhouette}\n                    errors={errors}\n                    setSilhouette={setEditableSilhouette}\n                    silhouetteInfo={silhouetteInfo}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default BottomSilhouettesList;"],"names":["BottomSilhouettes","isVisible","setIsVisible","useState","dispatch","useDispatch","closePopup","useEffect","getAvSilhouettes","_jsxs","children","_jsx","MainHead","text","ButtonUI","classN","onClick","type","MainBody","BottomSilhouettesList","PopupUI","callback","NewSilhouette","selectedType","silhouettes","useSelector","availableSilhouettes","editableSilhouette","setEditableSilhouette","silhouetteInfo","setSilhouetteInfo","errors","setErrors","bottomSilhouettes","useMemo","filter","silhouette","className","HeadingUI","size","length","map","name","color","appColor","src","concat","BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL","silhouetteurl","alt","editSilhouette","_id","EditSilhouette","async","_editableSilhouette$s","formErrors","formValidator","silhouetteFormOptions","Object","keys","newPrint","JSON","parse","stringify","includes","file","image","response","fetch","blob","File","getNewFile","formData","FormData","forEach","key","append","updateSilhouette","setSilhouette"],"sourceRoot":""}