{"version":3,"file":"static/js/989.641a1239.chunk.js","mappings":"8PAKA,MAcA,EAdwBA,KAGhBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAK,mBAAmBC,KAAK,UACxCN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACtCC,EAAAA,EAAAA,KAACI,EAAAA,EAAkB,KACnBJ,EAAAA,EAAAA,KAACK,EAAAA,EAAqB,KACtBL,EAAAA,EAAAA,KAACM,EAAAA,EAAqB,U,sBCDrC,MA6BA,EA7B6BC,KAEzB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,GAC9CC,GAAWC,EAAAA,EAAAA,MACXC,EAAaA,KACfJ,GAAa,GACbE,GAASG,EAAAA,EAAAA,MAAuB,EAOpC,OAJAC,EAAAA,EAAAA,YAAU,MACNC,EAAAA,EAAAA,GAAiBL,EAAS,GAC3B,KAGCd,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAACiB,EAAAA,EAAQ,CAACf,KAAK,2BACfF,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAO,aAAaC,QAASA,IAAMX,GAAa,GAAOY,KAAK,SAAQtB,SAAC,oBAC/EF,EAAAA,EAAAA,MAACyB,EAAAA,EAAQ,CAAAvB,SAAA,EACNC,EAAAA,EAAAA,KAACJ,EAAe,IACdY,IAAaR,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACC,SAAUX,EAAWd,UACxCC,EAAAA,EAAAA,KAACyB,EAAAA,EAAa,CACVZ,WAAYA,WAItB,C,oMCpBd,MAuHA,EAvH8BR,KAE1B,MAAMqB,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,KAEzBC,EAAoBC,IAAyBpB,EAAAA,EAAAA,UAAqB,CAAC,IACnEqB,EAAgBC,IAAqBtB,EAAAA,EAAAA,UAAqB,CAAC,IAC3DF,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,IAC7CuB,EAAQC,IAAaxB,EAAAA,EAAAA,UAAqB,CAAC,GAC5CC,GAAWC,EAAAA,EAAAA,OAEVuB,EAAiBC,IAAsB1B,EAAAA,EAAAA,WAAkB,IACzD2B,EAAeC,IAAoB5B,EAAAA,EAAAA,UAAqB,CAAC,GAE1D6B,GAAoBC,EAAAA,EAAAA,UAAQ,IACvBd,EAAYe,QAAQC,GAA+C,WAApBA,EAAWrB,QAClE,CAACK,IAUEb,EAAaA,KACfJ,GAAa,GACbqB,EAAsB,CAAC,GACvBE,EAAkB,CAAC,GACnBE,EAAU,CAAC,EAAE,EA8CXS,EAAmBA,KACrBP,GAAmB,GACnBE,EAAiB,CAAC,EAAE,EAGxB,OACIzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAK,qBAAqBC,KAAK,UAC1CH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0CAAyCC,SAClC,OAAjBwC,QAAiB,IAAjBA,GAAAA,EAAmBK,OAASL,EAAkBM,KAAKH,IACzC7C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC/CC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACkB,OAAO,kCAAkCjB,KAAMwC,EAAWI,KAAMC,MAAOC,EAAAA,GAAU7C,KAAK,UACjGH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACnCC,EAAAA,EAAAA,KAAA,OAAKiD,IAAG,GAAAC,OAAKC,EAAAA,IAAoCD,OAAGR,EAAWU,eAAiBtD,UAAU,uBAAuBuD,IAAKX,EAAWI,UAErIjD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACrCC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,IA1EpDsB,KAChBA,IACAZ,EAAsBY,GACtBV,EAAkBU,GAClBjC,GAAa,GACjB,EAqE8E6C,CAAeZ,GAAY3C,SAAC,UACtFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,KA9BxEkB,EA8BkGI,QA7BlGN,GAAmB,IA6B2FrC,UAACC,EAAAA,EAAAA,KAACuD,EAAAA,EAAe,CAACC,KAAMC,EAAAA,aAPjEf,EAAWgB,QAUnE1D,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAK,gBAAgB6C,MAAOC,EAAAA,GAAU7C,KAAK,WAE9DK,IAAaR,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACC,SAAUX,EAAWd,UACxCC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAc,CACXnC,SAnEOoC,UAAa,IAADC,EAE/B,MAAMC,GAAaC,EAAAA,EAAAA,GAAclC,EAAoBmC,EAAAA,IACrD,GAAIF,EAAc,OAAO5B,EAAU4B,GAC/BG,OAAOC,KAAKjC,GAAQW,QAAUV,EAAU,CAAC,GAQ7C,MAAMiC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUzC,IAE3C,GAAsB,OAAlBA,QAAkB,IAAlBA,GAAiC,QAAfgC,EAAlBhC,EAAoBuB,qBAAa,IAAAS,GAAjCA,EAAmCU,SAAS,QAAS,CACrD,MAAMC,QATVZ,eAA0Ba,GACtB,MAAMC,QAAiBC,MAAMF,GACvBG,QAAaF,EAASE,OAE5B,OADa,IAAIC,KAAK,CAACD,GAAO,YAAa,CAAEvD,KAAMuD,EAAKvD,MAE5D,CAIuByD,CAAWjD,EAAmBuB,eACjDe,EAASf,cAAgBoB,CAC7B,CACA,MAAMO,EAAW,IAAIC,SACrBf,OAAOC,KAAKC,GAAUc,SAASC,IAC3BH,EAASI,OAAOD,EAAKf,EAASe,GAAK,UAGjCE,EAAAA,EAAAA,IAAiBL,GAAUM,MAAKC,IAClC3E,GAAS4E,EAAAA,EAAAA,IAAkBD,GAAK,IAEpCzE,GAAY,EA0CAA,WAAYA,EACZ6B,WAAYb,EACZI,OAAQA,EACRuD,cAAe1D,EACfC,eAAgBA,MAGvBI,IAAmBnC,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACC,SAAUmB,EAAiB5C,UACpDC,EAAAA,EAAAA,KAACyF,EAAAA,EAAU,CACPC,OAAO,2BACPxF,KAAI,sDAAAgD,OAAqE,OAAbb,QAAa,IAAbA,OAAa,EAAbA,EAAeS,KAAI,aAC/E6C,gBAAiBhD,EACjBiD,eA9CGhC,UACE,OAAbvB,QAAa,IAAbA,GAAAA,EAAeqB,YACTmC,EAAAA,EAAAA,IAAiBxD,GAAegD,MAAKC,IACvC3E,GAAS4E,EAAAA,EAAAA,IAAkBD,GAAK,IAEpClD,GAAmB,GACvB,QA2CM,C,oMCnHd,MAuHA,EAvH8B9B,KAE1B,MAAMoB,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,KAEzBC,EAAoBC,IAAyBpB,EAAAA,EAAAA,UAAqB,CAAC,IACnEqB,EAAgBC,IAAqBtB,EAAAA,EAAAA,UAAqB,CAAC,IAC3DF,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,IAC7CuB,EAAQC,IAAaxB,EAAAA,EAAAA,UAAqB,CAAC,GAC5CC,GAAWC,EAAAA,EAAAA,OAEVuB,EAAiBC,IAAsB1B,EAAAA,EAAAA,WAAkB,IACzD2B,EAAeC,IAAoB5B,EAAAA,EAAAA,UAAqB,CAAC,GAE1DoF,GAAoBtD,EAAAA,EAAAA,UAAQ,IACvBd,EAAYe,QAAQC,GAAgD,YAAX,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAYrB,SACnE,CAACK,IAUEb,EAAaA,KACfJ,GAAa,GACbqB,EAAsB,CAAC,GACvBE,EAAkB,CAAC,GACnBE,EAAU,CAAC,EAAE,EA8CXS,EAAmBA,KACrBP,GAAmB,GACnBE,EAAiB,CAAC,EAAE,EAGxB,OACIzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAK,qBAAqBC,KAAK,UAC1CH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0CAAyCC,SAClC,OAAjB+F,QAAiB,IAAjBA,GAAAA,EAAmBlD,OAASkD,EAAkBjD,KAAKH,IACzC7C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC/CC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACkB,OAAO,kCAAkCjB,KAAMwC,EAAWI,KAAMC,MAAOC,EAAAA,GAAU7C,KAAK,UACjGH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACnCC,EAAAA,EAAAA,KAAA,OAAKiD,IAAG,GAAAC,OAAK6C,EAAAA,IAAoC7C,OAAGR,EAAWU,eAAiBtD,UAAU,uBAAuBuD,IAAKX,EAAWI,UAErIjD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACrCC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,IA1EpDsB,KAChBA,IACAZ,EAAsBY,GACtBV,EAAkBU,GAClBjC,GAAa,GACjB,EAqE8E6C,CAAeZ,GAAY3C,SAAC,UACtFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,KA9BxEkB,EA8BkGI,QA7BlGN,GAAmB,IA6B2FrC,UAACC,EAAAA,EAAAA,KAACuD,EAAAA,EAAe,CAACC,KAAMC,EAAAA,aAPjEf,EAAWgB,QAUnE1D,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAK,gBAAgB6C,MAAOC,EAAAA,GAAU7C,KAAK,WAE9DK,IAAaR,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACC,SAAUX,EAAWd,UACxCC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAc,CACXnC,SAnEOoC,UAAa,IAADC,EAE/B,MAAMC,GAAaC,EAAAA,EAAAA,GAAclC,EAAoBmC,EAAAA,IACrD,GAAIF,EAAc,OAAO5B,EAAU4B,GAC/BG,OAAOC,KAAKjC,GAAQW,QAAUV,EAAU,CAAC,GAQ7C,MAAMiC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUzC,IAE3C,GAAsB,OAAlBA,QAAkB,IAAlBA,GAAiC,QAAfgC,EAAlBhC,EAAoBuB,qBAAa,IAAAS,GAAjCA,EAAmCU,SAAS,QAAS,CACrD,MAAMC,QATVZ,eAA0Ba,GACtB,MAAMC,QAAiBC,MAAMF,GACvBG,QAAaF,EAASE,OAE5B,OADa,IAAIC,KAAK,CAACD,GAAO,YAAa,CAAEvD,KAAMuD,EAAKvD,MAE5D,CAIuByD,CAAWjD,EAAmBuB,eACjDe,EAASf,cAAgBoB,CAC7B,CACA,MAAMO,EAAW,IAAIC,SACrBf,OAAOC,KAAKC,GAAUc,SAASC,IAC3BH,EAASI,OAAOD,EAAKf,EAASe,GAAK,UAGjCE,EAAAA,EAAAA,IAAiBL,GAAUM,MAAKC,IAClC3E,GAAS4E,EAAAA,EAAAA,IAAkBD,GAAK,IAEpCzE,GAAY,EA0CAA,WAAYA,EACZ6B,WAAYb,EACZI,OAAQA,EACRuD,cAAe1D,EACfC,eAAgBA,MAGvBI,IAAmBnC,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACC,SAAUmB,EAAiB5C,UACpDC,EAAAA,EAAAA,KAACyF,EAAAA,EAAU,CACPC,OAAO,2BACPxF,KAAI,sDAAAgD,OAAqE,OAAbb,QAAa,IAAbA,OAAa,EAAbA,EAAeS,KAAI,aAC/E6C,gBAAiBhD,EACjBiD,eA9CGhC,UACE,OAAbvB,QAAa,IAAbA,GAAAA,EAAeqB,YACTmC,EAAAA,EAAAA,IAAiBxD,GAAegD,MAAKC,IACvC3E,GAAS4E,EAAAA,EAAAA,IAAkBD,GAAK,IAEpClD,GAAmB,GACvB,QA2CM,C,oMCnHd,MAsHA,EAtH2BhC,KAEvB,MAAMsB,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,KAEzBC,EAAoBC,IAAyBpB,EAAAA,EAAAA,UAAqB,CAAC,IACnEqB,EAAgBC,IAAqBtB,EAAAA,EAAAA,UAAqB,CAAC,IAC3DF,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,IAC7CuB,EAAQC,IAAaxB,EAAAA,EAAAA,UAAqB,CAAC,GAC5CC,GAAWC,EAAAA,EAAAA,OAEVuB,EAAiBC,IAAsB1B,EAAAA,EAAAA,WAAkB,IACzD2B,EAAeC,IAAoB5B,EAAAA,EAAAA,UAAqB,CAAC,GAE1DsF,GAAiBxD,EAAAA,EAAAA,UAAQ,IACpBd,EAAYe,QAAQC,GAA+C,QAApBA,EAAWrB,QAClE,CAACK,IAUEb,EAAaA,KACfJ,GAAa,GACbqB,EAAsB,CAAC,GACvBE,EAAkB,CAAC,GACnBE,EAAU,CAAC,EAAE,EA6CXS,EAAmBA,KACrBP,GAAmB,GACnBE,EAAiB,CAAC,EAAE,EAGxB,OACIzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAK,kBAAkBC,KAAK,UACvCH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0CAAyCC,SACrC,OAAdiG,QAAc,IAAdA,GAAAA,EAAgBpD,OAASoD,EAAenD,KAAKH,IACnC7C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC/CC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACkB,OAAO,kCAAkCjB,KAAMwC,EAAWI,KAAMC,MAAOC,EAAAA,GAAU7C,KAAK,UACjGH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACnCC,EAAAA,EAAAA,KAAA,OAAKiD,IAAG,GAAAC,OAAK+C,EAAAA,IAAiC/C,OAAGR,EAAWU,eAAiBtD,UAAU,uBAAuBuD,IAAKX,EAAWI,UAElIjD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACrCC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,IAzEpDsB,KAChBA,IACAZ,EAAsBY,GACtBV,EAAkBU,GAClBjC,GAAa,GACjB,EAoE8E6C,CAAeZ,GAAY3C,SAAC,UACtFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,KA9BxEkB,EA8BkGI,QA7BlGN,GAAmB,IA6B2FrC,UAACC,EAAAA,EAAAA,KAACuD,EAAAA,EAAe,CAACC,KAAMC,EAAAA,aAPjEf,EAAWgB,QAUnE1D,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAK,gBAAgB6C,MAAOC,EAAAA,GAAU7C,KAAK,WAE9DK,IAAaR,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACC,SAAUX,EAAWd,UACxCC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAc,CACXnC,SAlEOoC,UAAa,IAADC,EAE/B,MAAMC,GAAaC,EAAAA,EAAAA,GAAclC,EAAoBmC,EAAAA,IACrD,GAAIF,EAAc,OAAO5B,EAAU4B,GAC/BG,OAAOC,KAAKjC,GAAQW,QAAUV,EAAU,CAAC,GAQ7C,MAAMiC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUzC,IAC3C,GAAsB,OAAlBA,QAAkB,IAAlBA,GAAiC,QAAfgC,EAAlBhC,EAAoBuB,qBAAa,IAAAS,GAAjCA,EAAmCU,SAAS,QAAS,CACrD,MAAMC,QARVZ,eAA0Ba,GACtB,MAAMC,QAAiBC,MAAMF,GACvBG,QAAaF,EAASE,OAE5B,OADa,IAAIC,KAAK,CAACD,GAAO,YAAa,CAAEvD,KAAMuD,EAAKvD,MAE5D,CAGuByD,CAAWjD,EAAmBuB,eACjDe,EAASf,cAAgBoB,CAC7B,CACA,MAAMO,EAAW,IAAIC,SACrBf,OAAOC,KAAKC,GAAUc,SAASC,IAC3BH,EAASI,OAAOD,EAAKf,EAASe,GAAK,UAGjCE,EAAAA,EAAAA,IAAiBL,GAAUM,MAAKC,IAClC3E,GAAS4E,EAAAA,EAAAA,IAAkBD,GAAK,IAEpCzE,GAAY,EA0CAA,WAAYA,EACZ6B,WAAYb,EACZI,OAAQA,EACRuD,cAAe1D,EACfC,eAAgBA,MAGvBI,IAAmBnC,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACC,SAAUmB,EAAiB5C,UACpDC,EAAAA,EAAAA,KAACyF,EAAAA,EAAU,CACPC,OAAO,wBACPxF,KAAI,mDAAAgD,OAAkE,OAAbb,QAAa,IAAbA,OAAa,EAAbA,EAAeS,KAAI,aAC5E6C,gBAAiBhD,EACjBiD,eA9CGhC,UACE,OAAbvB,QAAa,IAAbA,GAAAA,EAAeqB,YACTmC,EAAAA,EAAAA,IAAiBxD,GAAegD,MAAKC,IACvC3E,GAAS4E,EAAAA,EAAAA,IAAkBD,GAAK,IAEpClD,GAAmB,GACvB,QA2CM,C","sources":["components/customize/silhouettes/SilhouettesList.tsx","components/customize/silhouettes/CustomizeSilhouettes.tsx","components/customize/silhouettes/bottoms/BottomSilhouettesList.tsx","components/customize/silhouettes/sleeves/SleeveSilhouettesList.tsx","components/customize/silhouettes/tops/TopSilhouettesList.tsx"],"sourcesContent":["import HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport TopSilhouettesList from \"./tops/TopSilhouettesList\";\nimport BottomSilhouettesList from \"./bottoms/BottomSilhouettesList\";\nimport SleeveSilhouettesList from \"./sleeves/SleeveSilhouettesList\";\n\nconst SilhouettesList = () => {\n\n    return (\n        <div className=\"silhouettes-list\">\n            <HeadingUI text=\"Silhouettes List\" size=\"22px\" />\n            <div className=\"silhouettes-list-content\">\n               <TopSilhouettesList />\n               <BottomSilhouettesList />\n               <SleeveSilhouettesList />\n            </div>\n        </div>\n    );\n};\n\nexport default SilhouettesList;","import MainBody from \"layout/MainBody/MainBody\";\nimport MainHead from \"layout/MainHead/MainHead\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getAvSilhouettes } from \"services/silhouetteService\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport NewSilhouette from \"./NewSilhouette\";\nimport SilhouettesList from \"./SilhouettesList\";\nimport './style.scss'\nimport { resetSilhouetteState } from \"redux/reducers/silhouetteReducer\";\n\nconst CustomizeSilhouettes = () => {\n\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const dispatch = useDispatch()\n    const closePopup = () => {\n        setIsVisible(false)\n        dispatch(resetSilhouetteState())\n    }\n\n    useEffect(() => {\n        getAvSilhouettes(dispatch)\n    }, [])\n\n    return (\n        <div>\n            <MainHead text=\"Customize Silhouettes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Silhouette</ButtonUI>\n            <MainBody>\n               <SilhouettesList />\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewSilhouette\n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default CustomizeSilhouettes;","import { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { availableSilhouettes, setSilhouetteData } from 'redux/reducers/silhouetteReducer';\nimport { BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL } from 'shared/constants/genericApiRoutes';\nimport { ObjectType, appColor } from 'shared/helpers/helpers';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport EditSilhouette from '../EditSilhouette';\nimport { formValidator } from 'utils/validators/validator';\nimport { silhouetteFormOptions } from 'utils/validators/validatorOptions';\nimport { removeSilhouette, updateSilhouette } from 'shared/api/dataApi';\nimport { getAvSilhouettes } from 'services/silhouetteService';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport RemoveSome from 'components/customize/removeSome/RemoveSome';\n\nconst BottomSilhouettesList = () => {\n\n    const silhouettes = useSelector(availableSilhouettes)\n\n    const [editableSilhouette, setEditableSilhouette] = useState<ObjectType>({})\n    const [silhouetteInfo, setSilhouetteInfo] = useState<ObjectType>({})\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n\n    const [isVisibleRemove, setIsVisibleRemove] = useState<boolean>(false)\n    const [removableItem, setRemovableItem] = useState<ObjectType>({})\n\n    const bottomSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette.type === 'Bottom')\n    }, [silhouettes])\n\n    const editSilhouette = (silhouette: ObjectType) => {\n        if (silhouette) {\n            setEditableSilhouette(silhouette)\n            setSilhouetteInfo(silhouette)\n            setIsVisible(true)\n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditableSilhouette({})\n        setSilhouetteInfo({})\n        setErrors({})\n    }\n\n    const saveSilhouette = async () => {\n\n        const formErrors = formValidator(editableSilhouette, silhouetteFormOptions);\n        if (formErrors) { return setErrors(formErrors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n\n        async function getNewFile(image: string) {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: blob.type });\n            return file\n        }\n        const newPrint = JSON.parse(JSON.stringify(editableSilhouette));\n        // console.log('editableSilhouette = > ', editableSilhouette)\n        if (editableSilhouette?.silhouetteurl?.includes('blob')) {\n            const file = await getNewFile(editableSilhouette.silhouetteurl);\n            newPrint.silhouetteurl = file;\n        }\n        const formData = new FormData();\n        Object.keys(newPrint).forEach((key) => {\n            formData.append(key, newPrint[key]);\n        });\n\n        await updateSilhouette(formData).then(res => {\n            dispatch(setSilhouetteData(res))\n        })\n        closePopup()\n    }\n\n    const prepareToRemoveItem = (item: ObjectType) => {\n        setRemovableItem(item)\n        setIsVisibleRemove(true)\n    }\n\n    const removeItem = async () => {\n        if (removableItem?._id) {\n            await removeSilhouette(removableItem).then(res => {\n                dispatch(setSilhouetteData(res))\n            })\n            setIsVisibleRemove(false)\n        }\n    }\n\n    const closePopupRemove = () => {\n        setIsVisibleRemove(false)\n        setRemovableItem({})\n    }\n\n    return (\n        <div className='silhouettes-items'>\n            <HeadingUI text=\"Bottom Silhouettes\" size=\"20px\" />\n            <div className=\"silhouettes-items-body customXScrollbar\">\n                {bottomSilhouettes?.length ? bottomSilhouettes.map((silhouette: ObjectType) => {\n                    return <div className=\"silhouettes-list-silhouette\" key={silhouette._id}>\n                        <HeadingUI classN=\"silhouettes-list-text _ellipsis\" text={silhouette.name} color={appColor} size=\"16px\" />\n                        <div className=\"silhouettes-list-image\">\n                            <img src={`${BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL}${silhouette.silhouetteurl}`} className=\"silhouettes-list-img\" alt={silhouette.name} />\n                        </div>\n                        <div className=\"silhouettes-list-buttons\">\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => editSilhouette(silhouette)}>Edit</ButtonUI>\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => prepareToRemoveItem(silhouette)}><FontAwesomeIcon icon={faTrash} /></ButtonUI>\n                        </div>\n                    </div>\n                }) : <HeadingUI text='Nothing found' color={appColor} size='16px' />}\n            </div>\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditSilhouette\n                    callback={saveSilhouette}\n                    closePopup={closePopup}\n                    silhouette={editableSilhouette}\n                    errors={errors}\n                    setSilhouette={setEditableSilhouette}\n                    silhouetteInfo={silhouetteInfo}\n                />\n            </PopupUI>}\n            {isVisibleRemove && <PopupUI callback={closePopupRemove}>\n                <RemoveSome\n                    header=\"Remove Bottom Silhouette\"\n                    text={`Do you want to remove the bottom silhouette <span> ${removableItem?.name} ?</span>`}\n                    discardCallback={closePopupRemove}\n                    removeCallback={removeItem}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default BottomSilhouettesList;","import { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { availableSilhouettes, setSilhouetteData } from 'redux/reducers/silhouetteReducer';\nimport { BASE_UPLOADS_SILHOUETTES_SLEEVES_URL } from 'shared/constants/genericApiRoutes';\nimport { ObjectType, appColor } from 'shared/helpers/helpers';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport EditSilhouette from '../EditSilhouette';\nimport { formValidator } from 'utils/validators/validator';\nimport { silhouetteFormOptions } from 'utils/validators/validatorOptions';\nimport { removeSilhouette, updateSilhouette } from 'shared/api/dataApi';\nimport { getAvSilhouettes } from 'services/silhouetteService';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport RemoveSome from 'components/customize/removeSome/RemoveSome';\n\nconst SleeveSilhouettesList = () => {\n\n    const silhouettes = useSelector(availableSilhouettes)\n\n    const [editableSilhouette, setEditableSilhouette] = useState<ObjectType>({})\n    const [silhouetteInfo, setSilhouetteInfo] = useState<ObjectType>({})\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n\n    const [isVisibleRemove, setIsVisibleRemove] = useState<boolean>(false)\n    const [removableItem, setRemovableItem] = useState<ObjectType>({})\n\n    const sleeveSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette?.type === 'Sleeve')\n    }, [silhouettes])\n\n    const editSilhouette = (silhouette: ObjectType) => {\n        if (silhouette) {\n            setEditableSilhouette(silhouette)\n            setSilhouetteInfo(silhouette)\n            setIsVisible(true)\n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditableSilhouette({})\n        setSilhouetteInfo({})\n        setErrors({})\n    }\n\n    const saveSilhouette = async () => {\n\n        const formErrors = formValidator(editableSilhouette, silhouetteFormOptions);\n        if (formErrors) { return setErrors(formErrors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n\n        async function getNewFile(image: string) {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: blob.type });\n            return file\n        }\n        const newPrint = JSON.parse(JSON.stringify(editableSilhouette));\n        // console.log('editableSilhouette = > ', editableSilhouette)\n        if (editableSilhouette?.silhouetteurl?.includes('blob')) {\n            const file = await getNewFile(editableSilhouette.silhouetteurl);\n            newPrint.silhouetteurl = file;\n        }\n        const formData = new FormData();\n        Object.keys(newPrint).forEach((key) => {\n            formData.append(key, newPrint[key]);\n        });\n\n        await updateSilhouette(formData).then(res => {\n            dispatch(setSilhouetteData(res))\n        })\n        closePopup()\n    }\n\n    const prepareToRemoveItem = (item: ObjectType) => {\n        setRemovableItem(item)\n        setIsVisibleRemove(true)\n    }\n\n    const removeItem = async () => {\n        if (removableItem?._id) {\n            await removeSilhouette(removableItem).then(res => {\n                dispatch(setSilhouetteData(res))\n            })\n            setIsVisibleRemove(false)\n        }\n    }\n\n    const closePopupRemove = () => {\n        setIsVisibleRemove(false)\n        setRemovableItem({})\n    }\n\n    return (\n        <div className='silhouettes-items'>\n            <HeadingUI text=\"Sleeve Silhouettes\" size=\"20px\" />\n            <div className=\"silhouettes-items-body customXScrollbar\">\n                {sleeveSilhouettes?.length ? sleeveSilhouettes.map((silhouette: ObjectType) => {\n                    return <div className=\"silhouettes-list-silhouette\" key={silhouette._id}>\n                        <HeadingUI classN=\"silhouettes-list-text _ellipsis\" text={silhouette.name} color={appColor} size=\"16px\" />\n                        <div className=\"silhouettes-list-image\">\n                            <img src={`${BASE_UPLOADS_SILHOUETTES_SLEEVES_URL}${silhouette.silhouetteurl}`} className=\"silhouettes-list-img\" alt={silhouette.name} />\n                        </div>\n                        <div className=\"silhouettes-list-buttons\">\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => editSilhouette(silhouette)}>Edit</ButtonUI>\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => prepareToRemoveItem(silhouette)}><FontAwesomeIcon icon={faTrash} /></ButtonUI>\n                        </div>\n                    </div>\n                }) : <HeadingUI text='Nothing found' color={appColor} size='16px' />}\n            </div>\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditSilhouette\n                    callback={saveSilhouette}\n                    closePopup={closePopup}\n                    silhouette={editableSilhouette}\n                    errors={errors}\n                    setSilhouette={setEditableSilhouette}\n                    silhouetteInfo={silhouetteInfo}\n                />\n            </PopupUI>}\n            {isVisibleRemove && <PopupUI callback={closePopupRemove}>\n                <RemoveSome\n                    header=\"Remove Sleeve Silhouette\"\n                    text={`Do you want to remove the sleeve silhouette <span> ${removableItem?.name} ?</span>`}\n                    discardCallback={closePopupRemove}\n                    removeCallback={removeItem}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default SleeveSilhouettesList;","import { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { availableSilhouettes, setSilhouetteData } from 'redux/reducers/silhouetteReducer';\nimport { BASE_UPLOADS_SILHOUETTES_TOPS_URL } from 'shared/constants/genericApiRoutes';\nimport { ObjectType, appColor } from 'shared/helpers/helpers';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport EditSilhouette from '../EditSilhouette';\nimport { formValidator } from 'utils/validators/validator';\nimport { silhouetteFormOptions } from 'utils/validators/validatorOptions';\nimport { removeSilhouette, updateSilhouette } from 'shared/api/dataApi';\nimport { getAvSilhouettes } from 'services/silhouetteService';\nimport RemoveSome from 'components/customize/removeSome/RemoveSome';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst TopSilhouettesList = () => {\n\n    const silhouettes = useSelector(availableSilhouettes)\n\n    const [editableSilhouette, setEditableSilhouette] = useState<ObjectType>({})\n    const [silhouetteInfo, setSilhouetteInfo] = useState<ObjectType>({})\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n\n    const [isVisibleRemove, setIsVisibleRemove] = useState<boolean>(false)\n    const [removableItem, setRemovableItem] = useState<ObjectType>({})\n\n    const topSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette.type === 'Top')\n    }, [silhouettes])\n\n    const editSilhouette = (silhouette: ObjectType) => {\n        if (silhouette) {\n            setEditableSilhouette(silhouette)\n            setSilhouetteInfo(silhouette)\n            setIsVisible(true)\n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditableSilhouette({})\n        setSilhouetteInfo({})\n        setErrors({})\n    }\n\n    const saveSilhouette = async () => {\n\n        const formErrors = formValidator(editableSilhouette, silhouetteFormOptions);\n        if (formErrors) { return setErrors(formErrors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n\n        async function getNewFile(image: string) {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: blob.type });\n            return file\n        }\n        const newPrint = JSON.parse(JSON.stringify(editableSilhouette));\n        if (editableSilhouette?.silhouetteurl?.includes('blob')) {\n            const file = await getNewFile(editableSilhouette.silhouetteurl);\n            newPrint.silhouetteurl = file;\n        }\n        const formData = new FormData();\n        Object.keys(newPrint).forEach((key) => {\n            formData.append(key, newPrint[key]);\n        });\n\n        await updateSilhouette(formData).then(res => {\n            dispatch(setSilhouetteData(res))\n        })\n        closePopup()\n    }\n\n    const prepareToRemoveItem = (item: ObjectType) => {\n        setRemovableItem(item)\n        setIsVisibleRemove(true)\n    }\n\n    const removeItem = async () => {\n        if (removableItem?._id) {\n            await removeSilhouette(removableItem).then(res => {\n                dispatch(setSilhouetteData(res))\n            })\n            setIsVisibleRemove(false)\n        }\n    }\n\n    const closePopupRemove = () => {\n        setIsVisibleRemove(false)\n        setRemovableItem({})\n    }\n\n    return (\n        <div className='silhouettes-items'>\n            <HeadingUI text=\"Top Silhouettes\" size=\"20px\" />\n            <div className=\"silhouettes-items-body customXScrollbar\">\n                {topSilhouettes?.length ? topSilhouettes.map((silhouette: ObjectType) => {\n                    return <div className=\"silhouettes-list-silhouette\" key={silhouette._id}>\n                        <HeadingUI classN=\"silhouettes-list-text _ellipsis\" text={silhouette.name} color={appColor} size=\"16px\" />\n                        <div className=\"silhouettes-list-image\">\n                            <img src={`${BASE_UPLOADS_SILHOUETTES_TOPS_URL}${silhouette.silhouetteurl}`} className=\"silhouettes-list-img\" alt={silhouette.name} />\n                        </div>\n                        <div className=\"silhouettes-list-buttons\">\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => editSilhouette(silhouette)}>Edit</ButtonUI>\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => prepareToRemoveItem(silhouette)}><FontAwesomeIcon icon={faTrash} /></ButtonUI>\n                        </div>\n                    </div>\n                }) : <HeadingUI text='Nothing found' color={appColor} size='16px' />}\n            </div>\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditSilhouette\n                    callback={saveSilhouette}\n                    closePopup={closePopup}\n                    silhouette={editableSilhouette}\n                    errors={errors}\n                    setSilhouette={setEditableSilhouette}\n                    silhouetteInfo={silhouetteInfo}\n                />\n            </PopupUI>}\n            {isVisibleRemove && <PopupUI callback={closePopupRemove}>\n                <RemoveSome\n                    header=\"Remove Top Silhouette\"\n                    text={`Do you want to remove the top silhouette <span> ${removableItem?.name} ?</span>`}\n                    discardCallback={closePopupRemove}\n                    removeCallback={removeItem}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default TopSilhouettesList;"],"names":["SilhouettesList","_jsxs","className","children","_jsx","HeadingUI","text","size","TopSilhouettesList","BottomSilhouettesList","SleeveSilhouettesList","CustomizeSilhouettes","isVisible","setIsVisible","useState","dispatch","useDispatch","closePopup","resetSilhouetteState","useEffect","getAvSilhouettes","MainHead","ButtonUI","classN","onClick","type","MainBody","PopupUI","callback","NewSilhouette","silhouettes","useSelector","availableSilhouettes","editableSilhouette","setEditableSilhouette","silhouetteInfo","setSilhouetteInfo","errors","setErrors","isVisibleRemove","setIsVisibleRemove","removableItem","setRemovableItem","bottomSilhouettes","useMemo","filter","silhouette","closePopupRemove","length","map","name","color","appColor","src","concat","BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL","silhouetteurl","alt","editSilhouette","FontAwesomeIcon","icon","faTrash","_id","EditSilhouette","async","_editableSilhouette$s","formErrors","formValidator","silhouetteFormOptions","Object","keys","newPrint","JSON","parse","stringify","includes","file","image","response","fetch","blob","File","getNewFile","formData","FormData","forEach","key","append","updateSilhouette","then","res","setSilhouetteData","setSilhouette","RemoveSome","header","discardCallback","removeCallback","removeSilhouette","sleeveSilhouettes","BASE_UPLOADS_SILHOUETTES_SLEEVES_URL","topSilhouettes","BASE_UPLOADS_SILHOUETTES_TOPS_URL"],"sourceRoot":""}