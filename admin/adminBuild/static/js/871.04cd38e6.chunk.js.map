{"version":3,"file":"static/js/871.04cd38e6.chunk.js","mappings":"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","sources":["components/customize/colors/NewColor.tsx","services/colorService.ts","components/customize/colors/EditColor.tsx","components/customize/colors/ColorsList.tsx","components/customize/colors/CustomizeColors.tsx","layout/MainBody/MainBody.tsx","layout/MainHead/MainHead.tsx","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx","shared/ui/HeadingUI/HeadingUI.tsx","shared/ui/InputUI/InputUI.tsx","layout/ReactPortal/helper.ts","layout/ReactPortal/ReactPortal.tsx","shared/ui/PopupUI/PopupUI.tsx","utils/validators/validator.ts","utils/validators/validatorOptions.ts"],"sourcesContent":["import { ChangeEvent } from \"react\";\r\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\r\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\r\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\r\nimport InputUI from \"shared/ui/InputUI/InputUI\";\r\nimport './style.scss'\r\nimport { colorDetails, setColorState } from \"redux/reducers/colorReducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ObjectType } from \"shared/helpers/helpers\";\r\n\r\ninterface Props {\r\n    callback: CallbackSkeletonType,\r\n    closePopup: CallbackSkeletonType,\r\n    errors: ObjectType\r\n}\r\n\r\nconst NewColor = ({\r\n    callback,\r\n    closePopup,\r\n    errors\r\n}: Props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const cDetails = useSelector(colorDetails)\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { target: { name, value } } = event\r\n        dispatch(setColorState({ name, value }))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={callback} className=\"new-color\">\r\n            <HeadingUI text=\"Add new color\" align=\"center\" color=\"#aa8a75\" />\r\n            <div className=\"new-color-inputs\">\r\n                <InputUI\r\n                    placeholder=\"Name\"\r\n                    value={cDetails?.name}\r\n                    label=\"Name*\"\r\n                    name=\"name\"\r\n                    error={errors?.name?.message || ''}\r\n                    callback={handleInputChange}\r\n                />\r\n                <InputUI\r\n                    placeholder=\"Hex Code\"\r\n                    value={cDetails?.hexcode}\r\n                    label=\"Hex Code*\"\r\n                    name=\"hexcode\"\r\n                    error={errors?.hexcode?.message || ''}\r\n                    callback={handleInputChange}\r\n                />\r\n                <InputUI\r\n                    placeholder=\"Pantone Code\"\r\n                    value={cDetails?.pantonecode}\r\n                    label=\"Pantone Code\"\r\n                    name=\"pantonecode\"\r\n                    callback={handleInputChange}\r\n                />\r\n                <InputUI\r\n                    placeholder=\"Tags\"\r\n                    value={cDetails?.tags}\r\n                    label=\"Tags\"\r\n                    name=\"tags\"\r\n                    callback={handleInputChange}\r\n                />\r\n            </div>\r\n            <div className=\"new-color-actions\">\r\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Close</ButtonUI>\r\n                <ButtonUI type=\"submit\">Add</ButtonUI>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default NewColor;","import { setColorData } from \"redux/reducers/colorReducer\"\r\nimport { getColors } from \"shared/api/dataApi\"\r\n\r\n\r\nexport const getAvColors = (dispatch: any) => {\r\n    getColors().then(res => {\r\n        dispatch(setColorData(res))\r\n    }).catch(err => console.log(err))\r\n}","import { ChangeEvent } from \"react\";\r\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\r\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\r\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\r\nimport InputUI from \"shared/ui/InputUI/InputUI\";\r\nimport './style.scss'\r\nimport { ObjectType } from \"shared/helpers/helpers\";\r\n\r\ninterface Props {\r\n    callback: CallbackSkeletonType,\r\n    closePopup: CallbackSkeletonType,\r\n    color: ObjectType,\r\n    setColor: CallbackSkeletonType,\r\n    errors: ObjectType\r\n}\r\n\r\nconst EditColor = ({\r\n    callback,\r\n    closePopup,\r\n    color,\r\n    setColor,\r\n    errors\r\n}: Props) => {\r\n\r\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const { target: { name, value } } = event\r\n        setColor({...color, [name]: value})\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-color\">\r\n            <HeadingUI text=\"Add new color\" align=\"center\" color=\"#aa8a75\" />\r\n            <div className=\"new-color-inputs\">\r\n                <InputUI\r\n                    placeholder=\"Name\"\r\n                    value={color?.name}\r\n                    label=\"Name*\"\r\n                    name=\"name\"\r\n                    error={errors?.name?.message || ''}\r\n                    callback={handleInputChange}\r\n                />\r\n                <InputUI\r\n                    placeholder=\"Hex Code\"\r\n                    value={color?.hexcode}\r\n                    label=\"Hex Code*\"\r\n                    name=\"hexcode\"\r\n                    error={errors?.hexcode?.message || ''}\r\n                    callback={handleInputChange}\r\n                />\r\n                <InputUI\r\n                    placeholder=\"Pantone Code\"\r\n                    value={color?.pantonecode}\r\n                    label=\"Pantone Code\"\r\n                    name=\"pantonecode\"\r\n                    callback={handleInputChange}\r\n                />\r\n                <InputUI\r\n                    placeholder=\"Tags\"\r\n                    value={color?.tags}\r\n                    label=\"Tags\"\r\n                    name=\"tags\"\r\n                    callback={handleInputChange}\r\n                />\r\n            </div>\r\n            <div className=\"new-color-actions\">\r\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Discard</ButtonUI>\r\n                <ButtonUI onClick={() => callback()}>Save</ButtonUI>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditColor;","import { CSSProperties, useState } from \"react\";\r\nimport { ArrayType, ObjectType } from \"shared/helpers/helpers\";\r\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\r\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\r\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\r\nimport EditColor from \"./EditColor\";\r\nimport { updateColor } from \"shared/api/dataApi\";\r\nimport { getAvColors } from \"services/colorService\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { formValidator } from \"utils/validators/validator\";\r\nimport { colorFormOptions } from \"utils/validators/validatorOptions\";\r\n\r\ninterface Props {\r\n    colors: ArrayType\r\n}\r\n\r\ninterface colorFillInterface extends CSSProperties {\r\n    '--colorFill': string,\r\n}\r\n\r\nconst ColorsList = ({\r\n    colors\r\n}: Props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isVisible, setIsVisible] = useState<boolean>(false)\r\n    const [editableColor, setEditableColor] = useState<ObjectType>({})\r\n    const [errors, setErrors] = useState<ObjectType>({})\r\n    \r\n    const editColor = (color: ObjectType) => {\r\n        if (color) {\r\n            setEditableColor(color)\r\n            setIsVisible(true)   \r\n        }\r\n    }\r\n\r\n    const closePopup = () => {\r\n        setIsVisible(false)\r\n        setEditableColor({})\r\n        setErrors({})\r\n    }\r\n\r\n    const saveColor = async () => {\r\n        const activeColor = colors?.find(color => color._id === editableColor._id) || undefined\r\n        const errors = formValidator(editableColor, colorFormOptions);\r\n        if (errors) {return setErrors(errors)};\r\n        if (Object.keys(errors).length) {setErrors({})};\r\n        if (activeColor && JSON.stringify(editableColor) !== JSON.stringify(activeColor) ) {\r\n            await updateColor(editableColor)\r\n            await getAvColors(dispatch)\r\n        } \r\n        closePopup()\r\n    }\r\n\r\n    return (\r\n        <div className=\"colors-list\">\r\n            {colors.map((color: ObjectType) => {\r\n                const style: colorFillInterface = {\r\n                    '--colorFill': color.hexcode\r\n                }\r\n                return <div className=\"colors-list-color\" key={color._id}>\r\n                    <HeadingUI classN=\"color-text _ellipsis\" text={color.name} size=\"16px\" />\r\n                    <span className=\"color-span\" style={style}></span>\r\n                    <ButtonUI classN=\"color-button\" onClick={() => editColor(color)}>Edit</ButtonUI>\r\n                </div>\r\n            })}\r\n            {isVisible && <PopupUI callback={closePopup}>\r\n                <EditColor\r\n                    callback={saveColor}\r\n                    closePopup={closePopup}\r\n                    color={editableColor}\r\n                    errors={errors}\r\n                    setColor={setEditableColor}\r\n                />\r\n            </PopupUI>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorsList;","import MainBody from \"layout/MainBody/MainBody\";\r\nimport MainHead from \"layout/MainHead/MainHead\";\r\nimport { useEffect, useState } from \"react\";\r\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { availableColors, colorDetails, resetColorState } from \"redux/reducers/colorReducer\";\r\nimport { addColor } from \"shared/api/dataApi\";\r\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\r\nimport NewColor from \"./NewColor\";\r\nimport { getAvColors } from \"services/colorService\";\r\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\r\nimport ColorsList from \"./ColorsList\";\r\nimport { colorFormOptions } from \"utils/validators/validatorOptions\";\r\nimport { formValidator } from \"utils/validators/validator\";\r\nimport { ObjectType } from \"shared/helpers/helpers\";\r\n\r\nconst ColorsPallette = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const colors = useSelector(availableColors)\r\n    const [isVisible, setIsVisible] = useState<boolean>(false)\r\n    const cDetails = useSelector(colorDetails)\r\n    const [errors, setErrors] = useState<ObjectType>({})\r\n\r\n    useEffect(() => {\r\n        getAvColors(dispatch)\r\n    }, [])\r\n\r\n    const addNewColor = async (e: HTMLFormElement) => {\r\n        e.preventDefault()\r\n        const errors = formValidator(cDetails, colorFormOptions);\r\n        if (errors) {return setErrors(errors)};\r\n        if (Object.keys(errors).length) {setErrors({})};\r\n        await addColor(cDetails)\r\n        await getAvColors(dispatch)\r\n        closePopup()\r\n    }\r\n\r\n    const closePopup = () => {\r\n        setIsVisible(false)\r\n        dispatch(resetColorState())\r\n        setErrors({})\r\n    }\r\n\r\n    return (\r\n        <div className=\"colors-pallette\">\r\n            <MainHead text=\"Customize Colors\" />\r\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Color</ButtonUI>\r\n            <MainBody>\r\n                <div className=\"colors-pallette-list\">\r\n                    <HeadingUI text=\"Colors List\" size=\"22px\" />\r\n                    {colors?.length ? <ColorsList colors={colors} /> : null}\r\n                </div>\r\n                {isVisible && <PopupUI callback={closePopup}>\r\n                    <NewColor\r\n                        callback={addNewColor}\r\n                        closePopup={closePopup}\r\n                        errors={errors}\r\n                    />\r\n                </PopupUI>}\r\n            </MainBody>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorsPallette;","import './style.scss'\r\n\r\ninterface Props {\r\n    children: any\r\n}\r\n\r\nconst MainBody = ({\r\n    children\r\n}: Props) => {\r\n    return (\r\n        <div className=\"main-body\">\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainBody;","import HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\r\nimport './style.scss'\r\n\r\ninterface Props {\r\n    text: string,\r\n}\r\n\r\nconst MainHead = ({\r\n    text\r\n}: Props) => {\r\n    return (\r\n        <div className=\"main-head\">\r\n            <HeadingUI text={text} color=\"#aa8a75\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainHead;","export type CallbackSkeletonType = (event?: any) => void\r\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\r\n    classN?: string\r\n}\r\n\r\nconst LoaderCircleUI = ({ classN }: Iloader) => {\r\n    return (\r\n        <div className={`LoaderCircleUI ${classN}`} ></div>\r\n    )\r\n}\r\n\r\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\r\nimport \"./style.scss\";\r\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\r\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\r\n\r\ninterface Props extends HTMLProps<HTMLButtonElement> {\r\n  type?: \"button\" | \"submit\" | \"reset\";\r\n  version?: string;\r\n  classN?: string;\r\n  disabled?: boolean;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst versions: Record<string, string> = {\r\n  default: \"default-btn\",\r\n  red: 'red-btn',\r\n  orange: 'orange-btn',\r\n  blue: 'blue-btn',\r\n  green: 'green-btn',\r\n  gray: 'gray-btn',\r\n}\r\n\r\nexport const ButtonUI: React.FC<Props> = ({\r\n  children,\r\n  type = \"button\",\r\n  version = \"default\",\r\n  classN = '',\r\n  disabled = false,\r\n  isLoading = false,\r\n  onClick = CallbackSkeletonValue,\r\n  ...buttonProps\r\n}) => {\r\n  return (\r\n    <button\r\n      {...buttonProps}\r\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\r\n      type={type}\r\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\r\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\r\n  )\r\n}","import './style.scss'\r\n\r\ninterface Props {\r\n    text: string,\r\n    classN?: string,\r\n    color?: string,\r\n    size?: string,\r\n    align?: 'center' | 'left' | 'right'\r\n}\r\n\r\nconst HeadingUI = ({\r\n    text,\r\n    classN = '',\r\n    color = '',\r\n    size = '',\r\n    align = 'left'\r\n}: Props) => {\r\n    return (\r\n        <h1 className={`headingUI ${classN}`}\r\n            style={{\r\n                color: color || '#000',\r\n                fontSize: size || '30px',\r\n                textAlign: align\r\n            }}\r\n        >{text}</h1>\r\n    );\r\n};\r\n\r\nexport default HeadingUI;","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\r\nimport './style.scss'\r\nimport { useEffect } from \"react\";\r\n\r\ninterface Props {\r\n    value: string,\r\n    placeholder?: string,\r\n    type?: string,\r\n    callback: CallbackSkeletonType,\r\n    label?: string,\r\n    name: string,\r\n    error?: string,\r\n}\r\n\r\nconst InputUI = ({\r\n    value,\r\n    placeholder = '',\r\n    type = 'text',\r\n    callback,\r\n    label = '',\r\n    name,\r\n    error,\r\n}: Props) => {\r\n    // const refInput = useRef<HTMLInputElement | null>(null)\r\n    // const refSpan = useRef<HTMLInputElement | null>(null)\r\n\r\n    // useEffect(() => {\r\n    //     if (error && refInput?.current && refSpan?.current) {\r\n    //         refInput.current.classList.add('_errorShake')\r\n    //         refSpan.current.classList.add('_errorShake')\r\n    //         setTimeout(() => {\r\n    //             refInput?.current?.classList.remove('_errorShake')\r\n    //             refSpan?.current?.classList.remove('_errorShake')\r\n    //         }, 500);\r\n    //     }\r\n\r\n    //     return () => {\r\n    //         refInput?.current?.classList.remove('_errorShake')\r\n    //         refSpan?.current?.classList.remove('_errorShake')\r\n    //     }\r\n    // },[error])\r\n\r\n    return (\r\n        <div className=\"InputUI\">\r\n            {label && <label \r\n                className=\"InputUI__label\"\r\n                htmlFor={`InputUI-${name}`}>\r\n                {label}\r\n            </label>}\r\n            {error && <span className=\"error-message\">{error}</span>}\r\n            <input \r\n                className={`InputUI__input${error ? ' _error' : ''}`}\r\n                id={`InputUI-${name}`}\r\n                name={name}\r\n                type={type}\r\n                defaultValue={value}\r\n                onChange={callback}\r\n                {...(placeholder && {placeholder})}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputUI;","export function createWrapperAndAppendToBody(wrapperId: string) {\r\n    const wrapperElement = document.createElement(\"div\");\r\n    wrapperElement.setAttribute(\"id\", wrapperId);\r\n    document.body.appendChild(wrapperElement);\r\n    return wrapperElement;\r\n  }\r\n  \r\n  export const checkOffsetHeight = (selector: any) => {\r\n    const elem = document.querySelector(selector);\r\n    const top = elem && elem.getBoundingClientRect().top - 90;\r\n    let stack: any = [];\r\n    let prevScrollY = 0;\r\n  \r\n    const move = () => {\r\n      let point = window.scrollY + 20 > top ? top - window.scrollY : 20;\r\n    \r\n      if (top !== stack[0]) {\r\n        stack = [top];\r\n      } else {\r\n        stack.push(top);\r\n      }\r\n    \r\n      window.scrollBy({\r\n        top: point,\r\n      });\r\n  \r\n      if (prevScrollY === window.scrollY) return;\r\n  \r\n      if (window.scrollY + 10 < top) {\r\n        prevScrollY = window.scrollY;\r\n        requestAnimationFrame(move)\r\n      }\r\n    }\r\n  \r\n    return move;\r\n  }","import { useLayoutEffect, useState } from \"react\";\r\nimport { createPortal,  } from \"react-dom\";\r\nimport { createWrapperAndAppendToBody } from \"./helper\";\r\n\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }: any) {\r\n  const [wrapperElement, setWrapperElement] = useState<any>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId)!;\r\n    let systemCreated = false;\r\n\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  let element = document.getElementById(wrapperId);\r\n\r\n  if (!element) {\r\n    element = createWrapperAndAppendToBody(wrapperId);\r\n  }\r\n\r\n  if (wrapperElement === null) return null;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;","import ReactPortal from 'layout/ReactPortal/ReactPortal';\r\nimport './style.scss'\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\r\nimport { CallbackSkeletonType } from 'shared/objectModels/GenericModel';\r\n\r\ninterface PropsI {\r\n    callback: CallbackSkeletonType,\r\n    children: any\r\n}\r\n\r\nconst PopupUI = ({\r\n    callback,\r\n    children\r\n}: PropsI) => {\r\n\r\n    return (\r\n        <ReactPortal>\r\n            <div className='PopupUI'>\r\n                <div className=\"PopupUI__container\">\r\n                    <div className='PopupUI__body'>\r\n                        {children}\r\n                    </div>\r\n                    <div className='PopupUI__icon'\r\n                        onClick={() => callback()}>\r\n                        <FontAwesomeIcon icon={faXmark} fontSize='18px' color=\"#fff\" />\r\n                    </div>\r\n                </div>\r\n                <div className='PopupUI__BG' onClick={() => callback()}></div>\r\n            </div>\r\n        </ReactPortal>\r\n    );\r\n};\r\n\r\nexport default PopupUI;","import { ObjectType } from \"shared/helpers/helpers\";\r\n\r\ninterface Rule {\r\n    error: any;\r\n    rule: any;\r\n}\r\n\r\nexport type ErrorInfo = Record<string, Record<string, {message: string}>>\r\n\r\n\r\nexport const formValidator = (formData: ObjectType, options: ObjectType) => {\r\n    const errorInfo = Object.keys(formData).reduce((acc: any, inputName): any => {\r\n        const currnetInputOptions:Rule[] = options[inputName] || [];\r\n        const inputValue = formData[inputName];\r\n        currnetInputOptions.forEach(option => {\r\n            const rule = option.rule;\r\n            const error = option.error; \r\n\r\n            if(rule.required !== undefined && !inputValue) {\r\n                acc[inputName] = error;\r\n            }\r\n            if(rule.test !== undefined && !rule.test.test(inputValue)) {\r\n                acc[inputName] = error;\r\n            }\r\n        });\r\n        return acc;\r\n    }, {});\r\n\r\n    return Object.keys(errorInfo).length ? errorInfo : false;\r\n};\r\n\r\nexport const getAllErrorMessages = (options: ObjectType) => {\r\n    return Object.keys(options).reduce((acc: any, item) => {\r\n        acc[item] = { message:  `${item} not valid`};\r\n        return acc;\r\n    }, {});\r\n};\r\n","\r\nexport const colorFormOptions = {\r\n    name: [\r\n        {rule: { required : true }, error: {message: 'Name is required'} },\r\n    ],\r\n    hexcode: [\r\n        {rule: { required : true }, error: {message: 'HexCode is required'} },\r\n        {rule: { test: /^#(?:[0-9a-fA-F]{3}){1,2}$/ }, error: {message: 'Incorrect format for HexCode'} },\r\n    ],\r\n}\r\n\r\nexport const printFormOptions = {\r\n    name: [\r\n        {rule: { required : true }, error: {message: 'Name is required'} },\r\n    ],\r\n    price: [\r\n        {rule: { required : true }, error: {message: 'Price is required'} },\r\n    ]\r\n}\r\n\r\nexport const printFilesOptions = {\r\n    highresurl: [\r\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Highres Url'} }\r\n    ],\r\n    previewurl: [\r\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Preview Url'} }\r\n    ]\r\n}\r\n\r\nexport const mannequinFormOptions = {\r\n    name: [\r\n        {rule: { required : true }, error: {message: 'Name is required'} },\r\n    ]\r\n}\r\n\r\nexport const mannequinFilesOptions = {\r\n    fronturl: [\r\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Front Url'} }\r\n    ],\r\n    backurl: [\r\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Back Url'} }\r\n    ]\r\n}"],"names":["_ref","_errors$name","_errors$hexcode","callback","closePopup","errors","dispatch","useDispatch","cDetails","useSelector","colorDetails","handleInputChange","event","target","name","value","setColorState","_jsxs","onSubmit","className","children","_jsx","HeadingUI","text","align","color","InputUI","placeholder","label","error","message","hexcode","pantonecode","tags","ButtonUI","onClick","version","type","getAvColors","getColors","then","res","setColorData","catch","err","console","log","setColor","colors","isVisible","setIsVisible","useState","editableColor","setEditableColor","setErrors","map","style","classN","size","editColor","_id","PopupUI","EditColor","async","activeColor","find","undefined","formValidator","colorFormOptions","Object","keys","length","JSON","stringify","updateColor","ColorsPallette","availableColors","useEffect","resetColorState","MainHead","MainBody","ColorsList","NewColor","e","preventDefault","addColor","CallbackSkeletonValue","concat","versions","default","red","orange","blue","green","gray","disabled","isLoading","buttonProps","LoaderCircleUI","fontSize","textAlign","htmlFor","id","defaultValue","onChange","createWrapperAndAppendToBody","wrapperId","wrapperElement","document","createElement","setAttribute","body","appendChild","setWrapperElement","useLayoutEffect","element","getElementById","systemCreated","parentNode","removeChild","createPortal","ReactPortal","FontAwesomeIcon","icon","faXmark","formData","options","errorInfo","reduce","acc","inputName","currnetInputOptions","inputValue","forEach","option","rule","required","test","printFormOptions","price","printFilesOptions","highresurl","previewurl","mannequinFormOptions","mannequinFilesOptions","fronturl","backurl"],"sourceRoot":""}