{"version":3,"file":"static/js/666.6331ee53.chunk.js","mappings":"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","sources":["components/customize/prints/NewPrintVariant.tsx","components/customize/prints/NewPrint.tsx","components/customize/prints/EditPrint.tsx","components/customize/prints/PalettesList.tsx","components/customize/prints/PrintsList.tsx","components/customize/prints/CustomizePrints.tsx","components/customize/removeSome/RemoveSome.tsx","layout/MainBody/MainBody.tsx","layout/MainHead/MainHead.tsx","layout/ReactPortal/helper.ts","layout/ReactPortal/ReactPortal.tsx","services/printService.ts","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx","shared/ui/DropdownCheckboxUI/DropdownCheckboxUI.tsx","shared/ui/DropzoneUI/DropzoneUI.tsx","shared/ui/HeadingUI/HeadingUI.tsx","shared/ui/InputUI/InputUI.tsx","shared/ui/PopupUI/PopupUI.tsx","utils/hooks/useClickOutside.ts","utils/validators/validator.ts","utils/validators/validatorOptions.ts"],"sourcesContent":["import { faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ChangeEvent, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { printsVariants, setPrintsVariantsData } from \"redux/reducers/printReducer\";\nimport { getAvPrintsVariants } from \"services/printService\";\nimport { addPrintVariant } from \"shared/api/dataApi\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\n\nconst NewPrintVariant = () => {\n\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [newVariant, setNewVariant] = useState<string>('')\n    const dispatch = useDispatch()\n    const variants = useSelector(printsVariants)\n    const toggleNewVariant = () => {\n        setIsVisible(!isVisible)\n        setNewVariant('')\n    }\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { value } } = event;\n        setNewVariant(value)\n\n    }\n\n    const saveVariant = async () => {\n        if (newVariant) {\n            await addPrintVariant({\n                name: newVariant\n            }).then(res => {\n                dispatch(setPrintsVariantsData([\n                    ...variants,\n                    res\n                ]))\n            })\n        }\n        setIsVisible(!isVisible)\n        setNewVariant('')\n    }\n    return (\n        <div className=\"new-item-variant\">\n            <button\n                type=\"button\"\n                onClick={toggleNewVariant}\n            >Add new palette +</button>\n            {isVisible && <div className=\"new-item-variant-save\">\n                <InputUI\n                    placeholder=\"New palette\"\n                    value={newVariant}\n                    name=\"newType\"\n                    callback={handleInputChange}\n                />\n                <button\n                    type=\"button\"\n                    onClick={saveVariant}\n                ><FontAwesomeIcon icon={faSave} /></button>\n            </div>}\n        </div>\n    );\n};\n\nexport default NewPrintVariant;","import { ChangeEvent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAvPrints } from 'services/printService';\nimport { addPrint } from 'shared/api/dataApi';\nimport { ArrayType, ObjectType, appColor, getDropdownOptionsFromItemsVariants } from 'shared/helpers/helpers';\nimport { CallbackSkeletonType } from 'shared/objectModels/GenericModel';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport DropzoneUI from 'shared/ui/DropzoneUI/DropzoneUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport InputUI from 'shared/ui/InputUI/InputUI';\nimport { formValidator } from 'utils/validators/validator';\nimport { printFilesOptions, printFormOptions } from 'utils/validators/validatorOptions';\nimport NewPrintVariant from './NewPrintVariant';\nimport { availablePrints, printDetails, printsVariants, setPrintData, setPrintState } from 'redux/reducers/printReducer';\nimport DropdownCheckboxUI from 'shared/ui/DropdownCheckboxUI/DropdownCheckboxUI';\n\ninterface Props {\n    closePopup: CallbackSkeletonType,\n}\n\nconst NewPrint = ({\n    closePopup,\n}: Props) => {\n    const dispatch = useDispatch()\n\n    const printVariants = getDropdownOptionsFromItemsVariants(useSelector(printsVariants)) || [{}]\n    const pDetails = useSelector(printDetails)\n    const prints = useSelector(availablePrints)\n    const [data, setData] = useState<ObjectType>({\n        name: '',\n        price: '',\n        tags: '',\n        highresurl: '',\n        previewurl: '',\n        printsPalettes: []\n    })\n    const [errors, setErrors] = useState<ObjectType>({})\n    const [fileErrors, setFileErrors] = useState<ObjectType>({})\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        setData({ ...data, [name]: value })\n    }\n\n    const addNewPrint: CallbackSkeletonType = async (e: HTMLFormElement) => {\n        e.preventDefault()\n        const errors = formValidator(data, printFormOptions);\n        if (errors) { return setErrors(errors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n        const formData = new FormData();\n        Object.keys(data).forEach((key: string) => {\n            if (key === 'printsPalettes') formData.append(key, JSON.stringify(data[key])); \n            else formData.append(key, data[key]); // Add other data properties as needed\n        });\n        await addPrint(formData).then(res => {\n            dispatch(setPrintData([\n                ...prints,\n                res\n            ]))\n        })\n        closePopup()\n\n    }\n\n    const addImage = (files: ArrayType, name: string) => {\n        setData({\n            ...data,\n            [name]: files[0]\n        })\n    }\n\n    const validateFiles = (files: ArrayType, field: string) => {\n        let err = {}\n        files?.map(file => {\n            const obj = {\n                [field]: file?.name\n            }\n            err = formValidator(obj, printFilesOptions);\n        })\n        if (Object.keys(err).length) {\n            setFileErrors(err)\n            return false\n        }\n        if (Object.keys(fileErrors).length) { setFileErrors({}) };\n        return true\n    }\n\n    const handleDropdownChange = (event: ChangeEvent<HTMLInputElement>, option: ObjectType) => {\n        const { target: { checked } } = event\n        const { id } = option;\n        const copyPalettes = [...data?.printsPalettes]\n        if (checked) copyPalettes.push(id)\n        else {\n            const idx = copyPalettes.findIndex(() => id)\n            if (idx !== -1) copyPalettes.splice(idx, 1)\n        }\n        setData({ ...data, printsPalettes: copyPalettes })\n    }\n\n    return (\n        <form onSubmit={addNewPrint} className=\"new-print\">\n            <HeadingUI text=\"Add new print\" align=\"center\" color={appColor} />\n            <div className=\"new-print-inputs\">\n                <InputUI\n                    placeholder=\"Name\"\n                    value={data?.name}\n                    label=\"Name*\"\n                    name=\"name\"\n                    error={errors?.name?.message || ''}\n                    callback={handleInputChange}\n                />\n                <InputUI\n                    type='number'\n                    placeholder=\"Price\"\n                    value={data?.price}\n                    label=\"Price*\"\n                    name=\"price\"\n                    error={errors?.price?.message || ''}\n                    callback={handleInputChange}\n                />\n                <InputUI\n                    placeholder=\"Tags\"\n                    value={data?.tags}\n                    label=\"Tags\"\n                    name=\"tags\"\n                    callback={handleInputChange}\n                />\n                <div className=\"new-color-variants\">\n                    <NewPrintVariant />\n                    <DropdownCheckboxUI\n                        options={printVariants}\n                        onChange={(e: any, option: ObjectType) => handleDropdownChange(e, option)}\n                        label=\"Print palettes\"\n                    />\n                </div>\n                <div className=\"new-print-zone\">\n                    <HeadingUI text='High res image' size='18px' color={appColor} />\n                    <DropzoneUI\n                        width=\"480px\"\n                        height=\"160px\"\n                        name=\"highresurl\"\n                        validationCallback={(files) => validateFiles(files, 'highresurl')}\n                        error={fileErrors?.highresurl?.message || ''}\n                        onChange={(files: ArrayType) => addImage(files, 'highresurl')}\n                    />\n                </div>\n                <div className=\"new-print-zone\">\n                    <HeadingUI text='Preview image' size='18px' color={appColor} />\n                    <DropzoneUI\n                        width=\"480px\"\n                        height=\"160px\"\n                        name=\"previewurl\"\n                        validationCallback={(files) => validateFiles(files, 'previewurl')}\n                        error={fileErrors?.previewurl?.message || ''}\n                        onChange={(files: ArrayType) => addImage(files, 'previewurl')}\n                    />\n                </div>\n            </div>\n            <div className=\"new-print-actions\">\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Close</ButtonUI>\n                <ButtonUI type=\"submit\">Add</ButtonUI>\n            </div>\n        </form>\n    );\n};\n\nexport default NewPrint;","import { ChangeEvent, useState } from \"react\";\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport './style.scss'\nimport { ArrayType, ObjectType, appColor, getDropdownOptionsFromItemsVariants } from \"shared/helpers/helpers\";\nimport DropzoneUI from \"shared/ui/DropzoneUI/DropzoneUI\";\nimport { BASE_UPLOADS_PRINTS_HIGHS_URL, BASE_UPLOADS_PRINTS_PREVIEWS_URL } from \"shared/constants/genericApiRoutes\";\nimport { printFilesOptions } from \"utils/validators/validatorOptions\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { useSelector } from \"react-redux\";\nimport { printsVariants } from \"redux/reducers/printReducer\";\n\ninterface Props {\n    callback: CallbackSkeletonType,\n    closePopup: CallbackSkeletonType,\n    print: ObjectType,\n    setPrint: CallbackSkeletonType,\n    errors: ObjectType,\n    printInfo: ObjectType\n}\n\nconst EditPrint = ({\n    callback,\n    closePopup,\n    print,\n    setPrint,\n    errors,\n    printInfo\n}: Props) => {\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        setPrint({ ...print, [name]: value })\n    }\n    const [fileErrors, setFileErrors] = useState<ObjectType>({})\n    const printVariants = getDropdownOptionsFromItemsVariants(useSelector(printsVariants)) || [{}]\n    \n    const editImage = (files: ArrayType, name: string) => {\n        setPrint({\n            ...print,\n            [name]: URL.createObjectURL(files[0] as any)\n        })\n    }\n\n    const validateFiles = (files: ArrayType, field: string) => {\n        let err = {}\n        files?.map(file => {\n            const obj = {\n                [field]: file?.name\n            }\n            err = formValidator(obj, printFilesOptions);\n        })\n        if (Object.keys(err).length) {\n            setFileErrors(err)\n            return false\n        }\n        if (Object.keys(fileErrors).length) { setFileErrors({}) };\n        return true\n    }\n\n    return (\n        <div className=\"new-print\">\n            <HeadingUI text={`Edit ${printInfo.name} print`} align=\"center\" color=\"#aa8a75\" />\n            <div className=\"new-print-inputs\">\n                <InputUI\n                    placeholder=\"Name\"\n                    value={print?.name}\n                    label=\"Name*\"\n                    name=\"name\"\n                    error={errors?.name?.message || ''}\n                    callback={handleInputChange}\n                />\n                <InputUI\n                    type='number'\n                    placeholder=\"Price\"\n                    value={print?.price}\n                    label=\"Price*\"\n                    name=\"price\"\n                    error={errors?.price?.message || ''}\n                    callback={handleInputChange}\n                />\n                <InputUI\n                    placeholder=\"Tags\"\n                    value={print?.tags}\n                    label=\"Tags\"\n                    name=\"tags\"\n                    callback={handleInputChange}\n                />\n            </div>\n            <div className=\"new-print-zone\">\n                <HeadingUI text='High res image' size='18px' color={appColor} />\n                <DropzoneUI\n                    width=\"480px\"\n                    height=\"160px\"\n                    name='highresurl'\n                    validationCallback={(files) => validateFiles(files, 'highresurl')}\n                    error={fileErrors?.highresurl?.message || ''}\n                    onChange={(files: ArrayType) => editImage(files, 'highresurl')}\n                    defaultFiles={[{\n                        ...print,\n                        preview: print.highresurl?.includes('blob') ? print.highresurl : `${BASE_UPLOADS_PRINTS_HIGHS_URL}${print.highresurl}`\n                    }]}\n                />\n            </div>\n            <div className=\"new-print-zone\">\n                <HeadingUI text='Preview image' size='18px' color={appColor} />\n                <DropzoneUI\n                    width=\"480px\"\n                    height=\"160px\"\n                    name='previewurl'\n                    onChange={(files: ArrayType) => editImage(files, 'previewurl')}\n                    validationCallback={(files) => validateFiles(files, 'previewurl')}\n                    error={fileErrors?.previewurl?.message || ''}\n                    defaultFiles={[{\n                        ...print,\n                        preview: print.previewurl?.includes('blob') ? print.previewurl : `${BASE_UPLOADS_PRINTS_PREVIEWS_URL}${print.previewurl}`\n                    }]}\n                />\n            </div>\n            <div className=\"new-print-actions\">\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Discard</ButtonUI>\n                <ButtonUI onClick={() => callback()}>Save</ButtonUI>\n            </div>\n        </div>\n    );\n};\n\nexport default EditPrint;","import { useSelector } from \"react-redux\";\nimport { printsPalettes } from \"redux/reducers/printReducer\";\nimport { ObjectType } from \"shared/helpers/helpers\";\n\ninterface Props {\n    options: string[],\n    onChange: any,\n    activePrint: ObjectType\n}\n\nconst PalettesList = ({\n    options,\n    onChange,\n    activePrint\n}: Props) => {\n\n    const printPalettes = useSelector(printsPalettes)\n\n    return (\n        <div\n            className='palettes-list-content customYScrollbar'>\n            {Boolean(options?.length) &&\n                options?.map((option: any, index: number) => {\n                    const { _id: optionId = '', name = '' } = option || {};\n                    const foundItem = printPalettes.find((palette: ObjectType) => {\n                        const { grouped = [], _id: { variant_id = ''} = {} } = palette || {};\n                        const foundPrint = grouped.some((group: ObjectType) => group?.print_id === activePrint?._id)\n                        const foundPalette = variant_id === optionId\n                        if (foundPrint && foundPalette) return true\n                    })\n\n                    return <label\n                        key={optionId}\n                        htmlFor={optionId + index}\n                        className='palettes-list-option'\n                    >\n                        {name}\n                        <input\n                            className='palettes-list-checkbox'\n                            type='checkbox'\n                            id={optionId + index}\n                            defaultChecked={foundItem}\n                            onChange={(e) => onChange(e, foundItem, option)}\n                        />\n                    </label>\n                })}\n        </div>\n    );\n};\n\nexport default PalettesList;","import { BASE_UPLOADS_PRINTS_PREVIEWS_URL } from \"shared/constants/genericApiRoutes\";\nimport { ArrayType, ObjectType } from \"shared/helpers/helpers\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport './style.scss'\nimport { ChangeEvent, useRef, useState } from \"react\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport EditPrint from \"./EditPrint\";\nimport { addPrintPalette, removePrint, removePrintPalette, updatePrint } from \"shared/api/dataApi\";\nimport { getAvPrints, getAvPrintsPalettes } from \"services/printService\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { printFormOptions } from \"utils/validators/validatorOptions\";\nimport { printsPalettes, printsVariants, setPrintData, setPrintsPalettesData } from \"redux/reducers/printReducer\";\nimport { faPalette, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport PalettesList from \"./PalettesList\";\nimport useClickOutSide from \"utils/hooks/useClickOutside\";\nimport RemoveSome from \"../removeSome/RemoveSome\";\n\ninterface Props {\n    prints: ArrayType\n}\n\nconst PrintsList = ({\n    prints\n}: Props) => {\n\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [editablePrint, setEditablePrint] = useState<ObjectType>({})\n    const [isVisiblePalettes, setIsVisiblePalettes] = useState<boolean>(false)\n    const [printInfo, setPrintInfo] = useState<ObjectType>({})\n    const [errors, setErrors] = useState<ObjectType>({})\n    const paletteRef = useRef<HTMLDivElement>(null)\n    const printVariants = useSelector(printsVariants)\n    const dispatch = useDispatch()\n    const printPalettes = useSelector(printsPalettes)\n    useClickOutSide([paletteRef], () => setIsVisiblePalettes(false), isVisiblePalettes)\n\n    const [isVisibleRemove, setIsVisibleRemove] = useState<boolean>(false)\n    const [removableItem, setRemovableItem] = useState<ObjectType>({})\n\n    const editPrint = (print: ObjectType) => {\n        if (print) {\n            setEditablePrint(print)\n            setPrintInfo(print)\n            setIsVisible(true)\n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditablePrint({})\n        setPrintInfo({})\n        setErrors({})\n    }\n\n    const savePrint = async () => {\n\n        const formErrors = formValidator(editablePrint, printFormOptions);\n        if (formErrors) { return setErrors(formErrors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n        async function getNewFile(image: string) {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: blob.type });\n            return file\n        }\n        const newPrint = JSON.parse(JSON.stringify(editablePrint));\n        if (editablePrint?.highresurl?.includes('blob')) {\n            const file = await getNewFile(editablePrint.highresurl);\n            newPrint.highresurl = file;\n        }\n        if (editablePrint?.previewurl?.includes('blob')) {\n            const file = await getNewFile(editablePrint.previewurl);\n            newPrint.previewurl = file;\n        }\n        const formData = new FormData();\n        Object.keys(newPrint).forEach((key) => {\n            formData.append(key, newPrint[key]);\n        });\n\n        await updatePrint(formData).then(res => {\n            dispatch(setPrintData(res))\n        })\n        closePopup()\n    }\n\n    const togglePalettes = (color: ObjectType) => {\n        setIsVisiblePalettes(!isVisiblePalettes)\n        setEditablePrint(color)\n    }\n\n    const manipulatePrintWithPalette = async (event: ChangeEvent<HTMLInputElement>, foundItem: ObjectType, option: ObjectType) => {\n        const { target: { checked } } = event\n        const { grouped = [] } = foundItem || {};\n        const { _id: newVariantId = '' } = option || {}\n\n        if (checked && newVariantId) {\n            await addPrintPalette({\n                print_id: editablePrint?._id,\n                variant_id: newVariantId,\n            }).then(res => {\n                dispatch(setPrintsPalettesData([\n                    ...printPalettes,\n                    res\n                ]))\n            })\n        }\n        else {\n            const paletteId = grouped?.find((group: ObjectType) => group?.print_id === editablePrint?._id)\n            const { _id = '' } = paletteId || {}\n            if (_id) {\n                await removePrintPalette({\n                    palette_id: _id\n                }).then(res => {\n                    dispatch(setPrintsPalettesData(res))\n                })\n            }\n        }\n    }\n\n    const prepareToRemoveItem = (item: ObjectType) => {\n        setRemovableItem(item)\n        setIsVisibleRemove(true)\n    }\n\n    const removeItem = async () => {\n        if (removableItem?._id) {\n            await removePrint(removableItem).then(res => {\n                dispatch(setPrintData(res))\n            })\n            setIsVisibleRemove(false)\n        }\n    }\n\n    const closePopupRemove = () => {\n        setIsVisibleRemove(false)\n        setRemovableItem({})\n    }\n\n    return (\n        <div className=\"print-list\">\n            {prints?.map((print: ObjectType) => {\n                return <div className=\"prints-list-print\" key={print._id}>\n                    <HeadingUI classN=\"print-list-text _ellipsis\" text={print.name} size=\"16px\" />\n                    <div className=\"print-list-image\">\n                        <img src={`${BASE_UPLOADS_PRINTS_PREVIEWS_URL}${print.previewurl}`} className=\"print-list-img\" alt={print.name} />\n                    </div>\n                    <div className=\"palettes-list-buttons\">\n                        <ButtonUI classN=\"print-list-button\" onClick={() => editPrint(print)}>Edit</ButtonUI>\n                        <div className=\"print-list-action-buttons\" {...(print?._id === editablePrint?._id) && { ref: paletteRef }}>\n                            <ButtonUI classN=\"print-button\" onClick={() => togglePalettes(print)}><FontAwesomeIcon icon={faPalette} /></ButtonUI>\n                            {isVisiblePalettes && print?._id === editablePrint?._id &&\n                                <PalettesList\n                                    activePrint={editablePrint}\n                                    onChange={(e: any, foundItem: any, option: any) => manipulatePrintWithPalette(e, foundItem, option)}\n                                    options={printVariants}\n                                />\n                            }\n                            <ButtonUI classN=\"print-button\" onClick={() => prepareToRemoveItem(print)}><FontAwesomeIcon icon={faTrash} /></ButtonUI>\n                        </div>\n                    </div>\n                </div>\n            })}\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditPrint\n                    callback={savePrint}\n                    closePopup={closePopup}\n                    print={editablePrint}\n                    errors={errors}\n                    setPrint={setEditablePrint}\n                    printInfo={printInfo}\n                />\n            </PopupUI>}\n            {isVisibleRemove && <PopupUI callback={closePopupRemove}>\n                <RemoveSome\n                    header=\"Remove Print\"\n                    text={`Do you want to remove the print <span> ${removableItem?.name} ?</span>`}\n                    discardCallback={closePopupRemove}\n                    removeCallback={removeItem}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default PrintsList;","import MainBody from \"layout/MainBody/MainBody\";\nimport MainHead from \"layout/MainHead/MainHead\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport './style.scss'\nimport NewPrint from \"./NewPrint\";\nimport { getAvPrints, getAvPrintsPalettes, getAvPrintsVariants } from \"services/printService\";\nimport { availablePrints, resetPrintState } from \"redux/reducers/printReducer\";\nimport PrintsList from \"./PrintsList\";\n\nconst CustomizePrints = () => {\n\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const prints = useSelector(availablePrints)\n    const dispatch = useDispatch()\n    const closePopup = () => {\n        setIsVisible(false)\n        dispatch(resetPrintState())\n    }\n\n    useEffect(() => {\n        getAvPrints(dispatch)\n        getAvPrintsVariants(dispatch)\n        getAvPrintsPalettes(dispatch)\n    }, [])\n\n    return (\n        <div>\n            <MainHead text=\"Customize Prints\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Print</ButtonUI>\n            <MainBody>\n                <div className=\"prints-pallette-list\">\n                    <HeadingUI text=\"Print List\" size=\"22px\" />\n                    {prints?.length ? <PrintsList prints={prints} /> : null}\n                </div>\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewPrint \n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default CustomizePrints;","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport './style.scss'\n\ninterface Props {\n    header: string,\n    text: any,\n    removeCallback: CallbackSkeletonType,\n    discardCallback: CallbackSkeletonType,\n}\n\nconst RemoveSome = ({\n    header,\n    text,\n    removeCallback,\n    discardCallback,\n}: Props) => {\n    return (\n        <div className=\"remove-some\">\n            <HeadingUI text={header} align=\"center\" color=\"#aa8a75\" />\n            <div className=\"remove-some-text\" dangerouslySetInnerHTML={{__html: text}} />\n            <div className=\"remove-some-actions\">\n                <ButtonUI onClick={() => discardCallback()} version=\"gray\">Discard</ButtonUI>\n                <ButtonUI onClick={() => removeCallback()} version=\"red\">Remove</ButtonUI>\n            </div>\n        </div>\n    );\n};\n\nexport default RemoveSome;","import './style.scss'\n\ninterface Props {\n    children: any\n}\n\nconst MainBody = ({\n    children\n}: Props) => {\n    return (\n        <div className=\"main-body\">\n            {children}\n        </div>\n    );\n};\n\nexport default MainBody;","import HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport './style.scss'\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { adminSignout } from \"services/authService\";\nimport { eraseCookie } from \"shared/helpers/helpers\";\nimport { useDispatch } from \"react-redux\";\nimport { setActiveSuperAdmin, setIsAuth } from \"redux/reducers/authReducer\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface Props {\n    text: string,\n}\n\nconst MainHead = ({\n    text\n}: Props) => {\n\n    const dispatch = useDispatch()\n\n    const navigate = useNavigate()\n\n    const signout = async () => {\n\t\ttry {\n\t\t\tconst data = await adminSignout();\n\t\t\tif (data) {\n\t\t\t\teraseCookie('accessToken')\n\t\t\t\tdispatch(setIsAuth(false));\n                dispatch(setActiveSuperAdmin({}))\n\t\t\t\tnavigate('/signin');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n    }\n\n    return (\n        <div className=\"main-head\">\n            <HeadingUI text={text} color=\"#aa8a75\" />\n            <ButtonUI\n                classN=\"main-head-logout\"\n                onClick={signout}\n            >\n                <FontAwesomeIcon icon={faSignOutAlt} />\n                <span>Sign out</span>\n            </ButtonUI>\n        </div>\n    );\n};\n\nexport default MainHead;","export function createWrapperAndAppendToBody(wrapperId: string) {\n    const wrapperElement = document.createElement(\"div\");\n    wrapperElement.setAttribute(\"id\", wrapperId);\n    document.body.appendChild(wrapperElement);\n    return wrapperElement;\n  }\n  \n  export const checkOffsetHeight = (selector: any) => {\n    const elem = document.querySelector(selector);\n    const top = elem && elem.getBoundingClientRect().top - 90;\n    let stack: any = [];\n    let prevScrollY = 0;\n  \n    const move = () => {\n      let point = window.scrollY + 20 > top ? top - window.scrollY : 20;\n    \n      if (top !== stack[0]) {\n        stack = [top];\n      } else {\n        stack.push(top);\n      }\n    \n      window.scrollBy({\n        top: point,\n      });\n  \n      if (prevScrollY === window.scrollY) return;\n  \n      if (window.scrollY + 10 < top) {\n        prevScrollY = window.scrollY;\n        requestAnimationFrame(move)\n      }\n    }\n  \n    return move;\n  }","import { useLayoutEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { createWrapperAndAppendToBody } from \"./helper\";\n\n\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }: any) {\n  const [wrapperElement, setWrapperElement] = useState<any>(null);\n\n  useLayoutEffect(() => {\n    let element = document.getElementById(wrapperId)!;\n    let systemCreated = false;\n\n    if (!element) {\n      systemCreated = true;\n      element = createWrapperAndAppendToBody(wrapperId);\n    }\n\n    setWrapperElement(element);\n\n    return () => {\n      if (systemCreated && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    };\n  }, [wrapperId]);\n\n  let element = document.getElementById(wrapperId);\n\n  if (!element) {\n    element = createWrapperAndAppendToBody(wrapperId);\n  }\n\n  if (wrapperElement === null) return null;\n\n  return createPortal(children, wrapperElement);\n}\n\nexport default ReactPortal;","import { setPrintData, setPrintsPalettesData, setPrintsVariantsData } from \"redux/reducers/printReducer\"\nimport { getPrints, getPrintsPalettes, getPrintsVariants } from \"shared/api/dataApi\"\n\n\nexport const getAvPrints = (dispatch: any) => {\n    getPrints().then(res => {\n        dispatch(setPrintData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsVariants = (dispatch: any) => {\n    getPrintsVariants().then(res => {\n        dispatch(setPrintsVariantsData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsPalettes = (dispatch: any) => {\n    getPrintsPalettes().then(res => {\n        dispatch(setPrintsPalettesData(res))\n    }).catch(err => console.log(err))\n}","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}","import { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useRef, useState } from 'react';\nimport './style.scss'\nimport useClickOutSide from 'utils/hooks/useClickOutside';\nimport HeadingUI from '../HeadingUI/HeadingUI';\n\ninterface DropdownPropsi {\n    text?: string | number;\n    onChange: any;\n    options: any;\n    classN?: string;\n    label?: string;\n    error?: string,\n    defaultValue?: string,\n    disabled?: boolean,\n}\n\nconst DropdownCheckboxUI = ({\n    text,\n    options,\n    onChange,\n    classN = '',\n    label = '',\n    error,\n    defaultValue,\n    disabled = false\n}: DropdownPropsi) => {\n    const [isActive, setIsActive] = useState(false);\n    const [selected, setSelected] = useState(text);\n    const ref = useRef<HTMLDivElement | null>(null)\n    const contentRef = useRef<HTMLDivElement | null>(null)\n\n    useClickOutSide([ref, contentRef], () => setIsActive(false), isActive)\n\n    const toggleDropdown = () => {\n        setIsActive(!isActive);\n    }\n    return (\n        <>\n            {label && <HeadingUI size='18px' color='#aa8a75' text={label} />}\n            {error && <span className=\"error-message\">{error}</span>}\n            <div className={`DropdownCheckboxUI ${classN} ${disabled ? '_disabled' : ''}`} ref={ref}>\n                <div\n                    onClick={(e) => disabled ? e.preventDefault() : toggleDropdown()}\n                    className={`DropdownCheckboxUI__button${isActive ? ' _active' : ''}${error ? ' _error' : ''}`}\n                >\n                    {defaultValue || selected}\n                    {isActive ? (\n                        <FontAwesomeIcon className='DropdownCheckboxUI__icon' icon={faCaretUp} />\n                    ) : (\n                        <FontAwesomeIcon className='DropdownCheckboxUI__icon' icon={faCaretDown} />\n                    )}\n                </div>\n                <div\n                    className={`DropdownCheckboxUI__content${isActive ? ' _active' : ''}`}\n                    ref={contentRef}\n                >\n                    {Boolean(options?.length) &&\n                        options?.map((option: any, index: number) => {\n                            const { id = '', text = '', value = '' } = option || {};\n                            return <label\n                                key={id}\n                                htmlFor={id}\n                                className='DropdownCheckboxUI__option'\n                            >\n                                {text || value}\n                                <input\n                                    className='DropdownCheckboxUI__checkbox'\n                                    type='checkbox'\n                                    name={id}\n                                    id={id}\n                                    onChange={(e) => onChange(e, option)}\n                                />\n                            </label>\n                        })}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default DropdownCheckboxUI;","import React, { useState, ChangeEvent, useRef, useEffect } from 'react';\nimport './style.scss'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faX } from '@fortawesome/free-solid-svg-icons';\nimport HeadingUI from '../HeadingUI/HeadingUI';\nimport { CallbackSkeletonType, CallbackSkeletonValue } from 'shared/objectModels/GenericModel';\nimport { ArrayType, ObjectType } from 'shared/helpers/helpers';\n\ninterface FileWithPreview extends File {\n    preview: string;\n}\n\ninterface Props {\n    multiple?: boolean,\n    width?: string,\n    height?: string,\n    onChange?: CallbackSkeletonType,\n    defaultFiles?: ArrayType,\n    name: string,\n    validationCallback?: CallbackSkeletonType | null,\n    error?: string,\n    classN?: string\n}\n\nconst DropzoneUI = ({\n    multiple = false,\n    width = '400px',\n    height = '400px',\n    onChange = CallbackSkeletonValue,\n    defaultFiles,\n    name,\n    validationCallback = null,\n    error = '',\n    classN\n}: Props) => {\n    const [files, setFiles] = useState<FileWithPreview[] | ArrayType>([]);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n    const bodyRef = useRef<HTMLDivElement | null>(null);\n    \n    useEffect(() => {\n        if (defaultFiles?.length) setFiles(defaultFiles)\n    },[defaultFiles])\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        const newFiles = Array.from(e.dataTransfer.files) as FileWithPreview[];\n\n        newFiles.forEach((file) => {\n            file.preview = URL.createObjectURL(file);\n        });\n        \n        if (multiple) {\n            setFiles([...files, ...newFiles]);\n            return onChange([...files, ...newFiles])\n        }\n        if (newFiles?.length) {\n            setFiles(newFiles)\n            onChange(newFiles)\n        }\n        bodyRef?.current?.classList.remove('_drag')\n\n    };\n\n    const handleDelete = (index: number) => {\n        const updatedFiles = [...files];\n        updatedFiles.splice(index, 1);\n        setFiles(updatedFiles);\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        bodyRef?.current?.classList.add('_drag')\n    };\n\n    const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        bodyRef?.current?.classList.remove('_drag')\n    };\n\n    const handleDropzoneClick = () => {\n        if (fileInputRef.current) {\n            fileInputRef.current.click();\n        }\n    };\n\n    const handleFileInputChange = async (e: ChangeEvent<HTMLInputElement>) => {\n        const newFiles = Array.from(e.target.files as FileList) as FileWithPreview[];\n        const isValidated = validationCallback ? await validationCallback(newFiles) : true\n        if (isValidated) {\n            newFiles.forEach((file) => {\n                file.preview = URL.createObjectURL(file);\n            });\n            if (multiple) {\n                setFiles([...files, ...newFiles]);\n                return onChange([...files, ...newFiles])\n            }\n            if (newFiles?.length) {\n                setFiles(newFiles)\n                onChange(newFiles)\n            }\n        }\n    };\n\n    const borderColor = error ? 'red' : 'silver'\n    return (\n        <>\n            {error && <span className=\"error-message\">{error}</span>}\n            <div className={`DropzoneUI ${classN}`}\n                style={{\n                    width,\n                    height,\n                    backgroundImage: `linear-gradient(90deg, ${borderColor} 50%, transparent 50%), linear-gradient(90deg, ${borderColor} 50%, transparent 50%), linear-gradient(0deg, ${borderColor} 50%, transparent 50%), linear-gradient(0deg, ${borderColor} 50%, transparent 50%)`\n                }}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                ref={bodyRef}\n            >\n                <div\n                    className='DropzoneUI__body'\n                    onClick={handleDropzoneClick}\n                >\n                    <HeadingUI \n                        text={`Drag & drop some file${multiple ? 's' : ''} here, or click to select file${multiple ? 's' : ''}`}\n                        size='14px'\n                        align='center'\n                    />\n                </div>\n                <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    style={{ display: 'none' }}\n                    onChange={handleFileInputChange}\n                    multiple={multiple}\n                    name={name}\n                />\n\n                <div className='DropzoneUI__files' style={{ maxHeight: +height.replace('px', '') - 30 + 'px' }}>\n                    {files.map((file, index) => (\n                        <div key={index} className='DropzoneUI__file'>\n                            <img src={file.preview} alt={`Preview ${index}`} className='DropzoneUI__preview' />\n                            <button\n                                className='DropzoneUI__remove'\n                                onClick={() => handleDelete(index)}\n                                type='button'>\n                                <FontAwesomeIcon icon={faX} />\n                            </button>\n                        </div>\n                    ))}\n                </div>\n\n            </div>\n        </>\n    );\n};\n\nexport default DropzoneUI;\n","import './style.scss'\n\ninterface Props {\n    text: string,\n    classN?: string,\n    color?: string,\n    size?: string,\n    align?: 'center' | 'left' | 'right'\n}\n\nconst HeadingUI = ({\n    text,\n    classN = '',\n    color = '',\n    size = '',\n    align = 'left'\n}: Props) => {\n    return (\n        <h1 className={`headingUI ${classN}`}\n            style={{\n                color: color || '#000',\n                fontSize: size || '30px',\n                textAlign: align\n            }}\n        >{text}</h1>\n    );\n};\n\nexport default HeadingUI;","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport './style.scss'\nimport { useEffect } from \"react\";\n\ninterface Props {\n    value?: string,\n    placeholder?: string,\n    type?: string,\n    callback: CallbackSkeletonType,\n    label?: string,\n    name: string,\n    error?: string,\n    autoComplete?: string,\n    classN?: string,\n    disabled?: boolean,\n    defaultChecked?: boolean,\n}\n\nconst InputUI = ({\n    value = '',\n    placeholder = '',\n    type = 'text',\n    callback,\n    label = '',\n    name,\n    error,\n    autoComplete = '',\n    classN = '',\n    disabled = false,\n    defaultChecked = false\n}: Props) => {\n    // const refInput = useRef<HTMLInputElement | null>(null)\n    // const refSpan = useRef<HTMLInputElement | null>(null)\n\n    // useEffect(() => {\n    //     if (error && refInput?.current && refSpan?.current) {\n    //         refInput.current.classList.add('_errorShake')\n    //         refSpan.current.classList.add('_errorShake')\n    //         setTimeout(() => {\n    //             refInput?.current?.classList.remove('_errorShake')\n    //             refSpan?.current?.classList.remove('_errorShake')\n    //         }, 500);\n    //     }\n\n    //     return () => {\n    //         refInput?.current?.classList.remove('_errorShake')\n    //         refSpan?.current?.classList.remove('_errorShake')\n    //     }\n    // },[error])\n\n    return (\n        <div className={`InputUI ${classN}`}>\n            {label && <label \n                className=\"InputUI__label\"\n                htmlFor={`InputUI-${name}`}>\n                {label}\n            </label>}\n            {error && <span className=\"error-message\">{error}</span>}\n            <input \n                className={`InputUI__input${error ? ' _error' : ''}${disabled ? ' _disabled' : ''}`}\n                id={`InputUI-${name}`}\n                name={name}\n                type={type}\n                onChange={(event) => !disabled && callback(event)}\n                {...(type === 'checkbox' ? {checked: defaultChecked} : {value})}\n                autoComplete={autoComplete}\n                {...(placeholder && {placeholder})}\n            />\n        </div>\n    );\n};\n\nexport default InputUI;","import ReactPortal from 'layout/ReactPortal/ReactPortal';\nimport './style.scss'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\nimport { CallbackSkeletonType } from 'shared/objectModels/GenericModel';\n\ninterface PropsI {\n    callback: CallbackSkeletonType,\n    children: any\n}\n\nconst PopupUI = ({\n    callback,\n    children\n}: PropsI) => {\n\n    return (\n        <ReactPortal>\n            <div className='PopupUI'>\n                <div className=\"PopupUI__container\">\n                    <div className='PopupUI__body'>\n                        {children}\n                    </div>\n                    <div className='PopupUI__icon'\n                        onClick={() => callback()}>\n                        <FontAwesomeIcon icon={faXmark} fontSize='18px' color=\"#fff\" />\n                    </div>\n                </div>\n                <div className='PopupUI__BG' onClick={() => callback()}></div>\n            </div>\n        </ReactPortal>\n    );\n};\n\nexport default PopupUI;","import { CallbackSkeletonType } from 'shared/objectModels/GenericModel';\nimport { useEffect } from \"react\";\n\nconst useClickOutSide = (refList: any, handler: CallbackSkeletonType, dependency: any = false) => {\n  useEffect(() => {\n    const listener = (event: any) => {\n      let shouldCallHandler = true;\n      refList?.length && refList?.forEach((ref: any) => {\n        if (ref.current && ref.current.contains(event.target)) {\n          shouldCallHandler = false;\n        }\n      });\n\n      if (shouldCallHandler) {\n        handler();\n      }\n    };\n\n    document.addEventListener(\"click\", listener);\n    return () => {\n      document.removeEventListener(\"click\", listener);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dependency]);\n\n  return {};\n};\n\nexport default useClickOutSide;\n","import { ObjectType } from \"shared/helpers/helpers\";\n\ninterface Rule {\n    error: any;\n    rule: any;\n}\n\nexport type ErrorInfo = Record<string, Record<string, {message: string}>>\n\n\nexport const formValidator = (formData: ObjectType, options: ObjectType) => {\n    const errorInfo = Object.keys(formData).reduce((acc: any, inputName): any => {\n        const currnetInputOptions:Rule[] = options[inputName] || [];\n        const inputValue = formData[inputName];\n        currnetInputOptions.forEach(option => {\n            const rule = option.rule;\n            const error = option.error; \n\n            if(rule.required !== undefined && !inputValue) {\n                acc[inputName] = error;\n            }\n            if(rule.test !== undefined && !rule.test.test(inputValue)) {\n                acc[inputName] = error;\n            }\n        });\n        return acc;\n    }, {});\n\n    return Object.keys(errorInfo).length ? errorInfo : false;\n};\n\nexport const getAllErrorMessages = (options: ObjectType) => {\n    return Object.keys(options).reduce((acc: any, item) => {\n        acc[item] = { message:  `${item} not valid`};\n        return acc;\n    }, {});\n};\n","\nexport const colorFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n    hexcode: [\n        {rule: { required : true }, error: {message: 'HexCode is required'} },\n        {rule: { test: /^#(?:[0-9a-fA-F]{3}){1,2}$/ }, error: {message: 'Incorrect format for HexCode'} },\n    ],\n}\n\nexport const printFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n    price: [\n        {rule: { required : true }, error: {message: 'Price is required'} },\n    ]\n}\n\nexport const printFilesOptions = {\n    highresurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Highres Url'} }\n    ],\n    previewurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Preview Url'} }\n    ]\n}\n\nexport const mannequinFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n    width: [\n        {rule: { required : true }, error: {message: 'Width is required'} },\n    ],\n    height: [\n        {rule: { required : true }, error: {message: 'Height is required'} },\n    ]\n}\n\nexport const mannequinFilesOptions = {\n    fronturl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Front Url'} }\n    ],\n    backurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Back Url'} }\n    ]\n}\n\n\nexport const silhouetteFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n    price: [\n        {rule: { required : true }, error: {message: 'Price is required'} },\n    ],\n    type: [\n        {rule: { required : true }, error: {message: 'Type is required'} },\n    ],\n    orientation: [\n        {rule: { required : true }, error: {message: 'Orientation is required'} },\n    ],\n    width: [\n        {rule: { required : true }, error: {message: 'Width is required'} },\n    ],\n    height: [\n        {rule: { required : true }, error: {message: 'Height is required'} },\n    ]\n}\n\nexport const silhouetteFilesOptions = {\n    silhouetteurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Silhouette Url'} }\n    ]\n}\n\nexport const sizeFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n}\n\nexport const variantFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n}\n\nexport const superAdminFormOptions = {\n    email: [\n        {rule: { required : true }, error: {message: 'Email is required'} },\n    ],\n    password: [\n        {rule: { required : true }, error: {message: 'Password is required'} },\n    ]\n}\n\nexport const garmentFilesOptions = {\n    background: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Front Url'} }\n    ],\n}"],"names":["NewPrintVariant","isVisible","setIsVisible","useState","newVariant","setNewVariant","dispatch","useDispatch","variants","useSelector","printsVariants","_jsxs","className","children","_jsx","type","onClick","toggleNewVariant","InputUI","placeholder","value","name","callback","event","target","async","addPrintVariant","then","res","setPrintsVariantsData","FontAwesomeIcon","icon","faSave","_ref","_errors$name","_errors$price","_fileErrors$highresur","_fileErrors$previewur","closePopup","printVariants","getDropdownOptionsFromItemsVariants","prints","printDetails","availablePrints","data","setData","price","tags","highresurl","previewurl","printsPalettes","errors","setErrors","fileErrors","setFileErrors","handleInputChange","addImage","files","validateFiles","field","err","map","file","obj","formValidator","printFilesOptions","Object","keys","length","onSubmit","e","preventDefault","printFormOptions","formData","FormData","forEach","key","append","JSON","stringify","addPrint","setPrintData","HeadingUI","text","align","color","appColor","label","error","message","DropdownCheckboxUI","options","onChange","option","handleDropdownChange","checked","id","copyPalettes","push","idx","findIndex","splice","size","DropzoneUI","width","height","validationCallback","ButtonUI","version","_print$highresurl","_print$previewurl","print","setPrint","printInfo","editImage","URL","createObjectURL","concat","defaultFiles","preview","includes","BASE_UPLOADS_PRINTS_HIGHS_URL","BASE_UPLOADS_PRINTS_PREVIEWS_URL","activePrint","printPalettes","Boolean","index","_id","optionId","foundItem","find","palette","grouped","variant_id","some","group","print_id","htmlFor","defaultChecked","editablePrint","setEditablePrint","isVisiblePalettes","setIsVisiblePalettes","setPrintInfo","paletteRef","useRef","useClickOutSide","isVisibleRemove","setIsVisibleRemove","removableItem","setRemovableItem","closePopupRemove","classN","src","alt","editPrint","ref","togglePalettes","faPalette","PalettesList","newVariantId","addPrintPalette","setPrintsPalettesData","paletteId","removePrintPalette","palette_id","manipulatePrintWithPalette","faTrash","PopupUI","EditPrint","_editablePrint$highre","_editablePrint$previe","formErrors","getNewFile","image","response","fetch","blob","File","newPrint","parse","updatePrint","RemoveSome","header","discardCallback","removeCallback","removePrint","CustomizePrints","resetPrintState","useEffect","getAvPrints","getAvPrintsVariants","getAvPrintsPalettes","MainHead","MainBody","PrintsList","NewPrint","dangerouslySetInnerHTML","__html","navigate","useNavigate","adminSignout","eraseCookie","setIsAuth","setActiveSuperAdmin","console","log","faSignOutAlt","createWrapperAndAppendToBody","wrapperId","wrapperElement","document","createElement","setAttribute","body","appendChild","setWrapperElement","useLayoutEffect","element","getElementById","systemCreated","parentNode","removeChild","createPortal","getPrints","catch","getPrintsVariants","getPrintsPalettes","CallbackSkeletonValue","versions","default","red","orange","blue","green","gray","disabled","isLoading","buttonProps","LoaderCircleUI","defaultValue","isActive","setIsActive","selected","setSelected","contentRef","_Fragment","faCaretUp","faCaretDown","multiple","setFiles","fileInputRef","bodyRef","borderColor","style","backgroundImage","onDrop","_bodyRef$current","newFiles","Array","from","dataTransfer","current","classList","remove","onDragOver","_bodyRef$current2","add","onDragLeave","_bodyRef$current3","handleDropzoneClick","click","display","maxHeight","replace","updatedFiles","handleDelete","faX","fontSize","textAlign","autoComplete","ReactPortal","faXmark","refList","handler","dependency","arguments","undefined","listener","shouldCallHandler","contains","addEventListener","removeEventListener","errorInfo","reduce","acc","inputName","currnetInputOptions","inputValue","rule","required","test","colorFormOptions","hexcode","mannequinFormOptions","mannequinFilesOptions","fronturl","backurl","silhouetteFormOptions","orientation","silhouetteFilesOptions","silhouetteurl","sizeFormOptions","variantFormOptions","superAdminFormOptions","email","password","garmentFilesOptions","background"],"sourceRoot":""}