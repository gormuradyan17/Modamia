{"version":3,"file":"static/js/650.c4ec5b25.chunk.js","mappings":"oPAYA,MA+BA,EA/BuBA,KACnB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,GAC9CC,GAAWC,EAAAA,EAAAA,MAEXC,EAAaA,KACfF,GAASG,EAAAA,EAAAA,OACTL,GAAa,EAAM,EAQvB,OALAM,EAAAA,EAAAA,YAAU,MACNC,EAAAA,EAAAA,GAAiBL,IACjBM,EAAAA,EAAAA,GAAgBN,EAAS,GAC1B,KAGCO,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACC,KAAK,qBACfF,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CAACC,OAAO,aAAaC,QAASA,IAAMhB,GAAa,GAAOiB,KAAK,SAAQP,SAAC,wBAC/ED,EAAAA,EAAAA,MAACS,EAAAA,EAAQ,CAAAR,SAAA,EACLC,EAAAA,EAAAA,KAACQ,EAAAA,EAAkB,IAClBpB,IAAaY,EAAAA,EAAAA,KAACS,EAAAA,EAAO,CAACC,SAAUjB,EAAWM,UACxCC,EAAAA,EAAAA,KAACW,EAAAA,EAAa,CACVC,aAAa,MACbnB,WAAYA,WAItB,C,oMCtBd,MAsHA,EAtH2Be,KAEvB,MAAMK,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,KAEzBC,EAAoBC,IAAyB3B,EAAAA,EAAAA,UAAqB,CAAC,IACnE4B,EAAgBC,IAAqB7B,EAAAA,EAAAA,UAAqB,CAAC,IAC3DF,EAAWC,IAAgBC,EAAAA,EAAAA,WAAkB,IAC7C8B,EAAQC,IAAa/B,EAAAA,EAAAA,UAAqB,CAAC,GAC5CC,GAAWC,EAAAA,EAAAA,OAEV8B,EAAiBC,IAAsBjC,EAAAA,EAAAA,WAAkB,IACzDkC,EAAeC,IAAoBnC,EAAAA,EAAAA,UAAqB,CAAC,GAE1DoC,GAAiBC,EAAAA,EAAAA,UAAQ,IACpBd,EAAYe,QAAQC,GAA+C,QAApBA,EAAWvB,QAClE,CAACO,IAUEpB,EAAaA,KACfJ,GAAa,GACb4B,EAAsB,CAAC,GACvBE,EAAkB,CAAC,GACnBE,EAAU,CAAC,EAAE,EA6CXS,EAAmBA,KACrBP,GAAmB,GACnBE,EAAiB,CAAC,EAAE,EAGxB,OACI3B,EAAAA,EAAAA,MAAA,OAAKiC,UAAU,oBAAmBhC,SAAA,EAC9BC,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAC9B,KAAK,kBAAkB+B,KAAK,UACvCjC,EAAAA,EAAAA,KAAA,OAAK+B,UAAU,0CAAyChC,SACrC,OAAd2B,QAAc,IAAdA,GAAAA,EAAgBQ,OAASR,EAAeS,KAAKN,IACnC/B,EAAAA,EAAAA,MAAA,OAAKiC,UAAU,8BAA6BhC,SAAA,EAC/CC,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAC5B,OAAO,kCAAkCF,KAAM2B,EAAWO,KAAMC,MAAOC,EAAAA,GAAUL,KAAK,UACjGjC,EAAAA,EAAAA,KAAA,OAAK+B,UAAU,yBAAwBhC,UACnCC,EAAAA,EAAAA,KAAA,OAAKuC,IAAG,GAAAC,OAAKC,EAAAA,IAAiCD,OAAGX,EAAWa,eAAiBX,UAAU,uBAAuBY,IAAKd,EAAWO,UAElItC,EAAAA,EAAAA,MAAA,OAAKiC,UAAU,2BAA0BhC,SAAA,EACrCC,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,IAzEpDwB,KAChBA,IACAZ,EAAsBY,GACtBV,EAAkBU,GAClBxC,GAAa,GACjB,EAoE8EuD,CAAef,GAAY9B,SAAC,UACtFC,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CAACC,OAAO,0BAA0BC,QAASA,KA9BxEoB,EA8BkGI,QA7BlGN,GAAmB,IA6B2FxB,UAACC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAe,CAACC,KAAMC,EAAAA,aAPjElB,EAAWmB,QAUnEhD,EAAAA,EAAAA,KAACgC,EAAAA,EAAS,CAAC9B,KAAK,gBAAgBmC,MAAOC,EAAAA,GAAUL,KAAK,WAE9D7C,IAAaY,EAAAA,EAAAA,KAACS,EAAAA,EAAO,CAACC,SAAUjB,EAAWM,UACxCC,EAAAA,EAAAA,KAACiD,EAAAA,EAAc,CACXvC,SAlEOwC,UAAa,IAADC,EAE/B,MAAMC,GAAaC,EAAAA,EAAAA,GAAcrC,EAAoBsC,EAAAA,IACrD,GAAIF,EAAc,OAAO/B,EAAU+B,GAC/BG,OAAOC,KAAKpC,GAAQc,QAAUb,EAAU,CAAC,GAQ7C,MAAMoC,EAAWC,KAAKC,MAAMD,KAAKE,UAAU5C,IAC3C,GAAsB,OAAlBA,QAAkB,IAAlBA,GAAiC,QAAfmC,EAAlBnC,EAAoB0B,qBAAa,IAAAS,GAAjCA,EAAmCU,SAAS,QAAS,CACrD,MAAMC,QARVZ,eAA0Ba,GACtB,MAAMC,QAAiBC,MAAMF,GACvBG,QAAaF,EAASE,OAE5B,OADa,IAAIC,KAAK,CAACD,GAAO,YAAa,CAAE5D,KAAM4D,EAAK5D,MAE5D,CAGuB8D,CAAWpD,EAAmB0B,eACjDe,EAASf,cAAgBoB,CAC7B,CACA,MAAMO,EAAW,IAAIC,SACrBf,OAAOC,KAAKC,GAAUc,SAASC,IAC3BH,EAASI,OAAOD,EAAKf,EAASe,GAAK,UAGjCE,EAAAA,EAAAA,IAAiBL,GAAUM,MAAKC,IAClCrF,GAASsF,EAAAA,EAAAA,IAAkBD,GAAK,IAEpCnF,GAAY,EA0CAA,WAAYA,EACZoC,WAAYb,EACZI,OAAQA,EACR0D,cAAe7D,EACfC,eAAgBA,MAGvBI,IAAmBtB,EAAAA,EAAAA,KAACS,EAAAA,EAAO,CAACC,SAAUoB,EAAiB/B,UACpDC,EAAAA,EAAAA,KAAC+E,EAAAA,EAAU,CACPC,OAAO,wBACP9E,KAAI,mDAAAsC,OAAkE,OAAbhB,QAAa,IAAbA,OAAa,EAAbA,EAAeY,KAAI,aAC5E6C,gBAAiBnD,EACjBoD,eA9CGhC,UACE,OAAb1B,QAAa,IAAbA,GAAAA,EAAewB,YACTmC,EAAAA,EAAAA,IAAiB3D,GAAemD,MAAKC,IACvCrF,GAASsF,EAAAA,EAAAA,IAAkBD,GAAK,IAEpCrD,GAAmB,GACvB,QA2CM,C","sources":["components/customize/silhouettes/tops/TopSilhouettes.tsx","components/customize/silhouettes/tops/TopSilhouettesList.tsx"],"sourcesContent":["import TopSilhouettesList from './TopSilhouettesList';\nimport MainHead from 'layout/MainHead/MainHead';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport MainBody from 'layout/MainBody/MainBody';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport NewSilhouette from '../NewSilhouette';\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { getAvSilhouettes } from 'services/silhouetteService';\nimport { resetSilhouetteState } from 'redux/reducers/silhouetteReducer';\nimport { getAvMannequins } from 'services/mannequinService';\n\nconst TopSilhouettes = () => {\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const dispatch = useDispatch()\n    \n    const closePopup = () => {\n        dispatch(resetSilhouetteState())\n        setIsVisible(false)\n    }\n\n    useEffect(() => {\n        getAvSilhouettes(dispatch)\n        getAvMannequins(dispatch)\n    }, [])\n\n    return (\n        <div>\n            <MainHead text=\"Top Silhouettes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Top Silhouette</ButtonUI>\n            <MainBody>\n                <TopSilhouettesList />\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewSilhouette\n                        selectedType='Top'\n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default TopSilhouettes;","import { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { availableSilhouettes, setSilhouetteData } from 'redux/reducers/silhouetteReducer';\nimport { BASE_UPLOADS_SILHOUETTES_TOPS_URL } from 'shared/constants/genericApiRoutes';\nimport { ObjectType, appColor } from 'shared/helpers/helpers';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport EditSilhouette from '../EditSilhouette';\nimport { formValidator } from 'utils/validators/validator';\nimport { silhouetteFormOptions } from 'utils/validators/validatorOptions';\nimport { removeSilhouette, updateSilhouette } from 'shared/api/dataApi';\nimport { getAvSilhouettes } from 'services/silhouetteService';\nimport RemoveSome from 'components/customize/removeSome/RemoveSome';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst TopSilhouettesList = () => {\n\n    const silhouettes = useSelector(availableSilhouettes)\n\n    const [editableSilhouette, setEditableSilhouette] = useState<ObjectType>({})\n    const [silhouetteInfo, setSilhouetteInfo] = useState<ObjectType>({})\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n\n    const [isVisibleRemove, setIsVisibleRemove] = useState<boolean>(false)\n    const [removableItem, setRemovableItem] = useState<ObjectType>({})\n\n    const topSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette.type === 'Top')\n    }, [silhouettes])\n\n    const editSilhouette = (silhouette: ObjectType) => {\n        if (silhouette) {\n            setEditableSilhouette(silhouette)\n            setSilhouetteInfo(silhouette)\n            setIsVisible(true)\n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditableSilhouette({})\n        setSilhouetteInfo({})\n        setErrors({})\n    }\n\n    const saveSilhouette = async () => {\n\n        const formErrors = formValidator(editableSilhouette, silhouetteFormOptions);\n        if (formErrors) { return setErrors(formErrors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n\n        async function getNewFile(image: string) {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: blob.type });\n            return file\n        }\n        const newPrint = JSON.parse(JSON.stringify(editableSilhouette));\n        if (editableSilhouette?.silhouetteurl?.includes('blob')) {\n            const file = await getNewFile(editableSilhouette.silhouetteurl);\n            newPrint.silhouetteurl = file;\n        }\n        const formData = new FormData();\n        Object.keys(newPrint).forEach((key) => {\n            formData.append(key, newPrint[key]);\n        });\n\n        await updateSilhouette(formData).then(res => {\n            dispatch(setSilhouetteData(res))\n        })\n        closePopup()\n    }\n\n    const prepareToRemoveItem = (item: ObjectType) => {\n        setRemovableItem(item)\n        setIsVisibleRemove(true)\n    }\n\n    const removeItem = async () => {\n        if (removableItem?._id) {\n            await removeSilhouette(removableItem).then(res => {\n                dispatch(setSilhouetteData(res))\n            })\n            setIsVisibleRemove(false)\n        }\n    }\n\n    const closePopupRemove = () => {\n        setIsVisibleRemove(false)\n        setRemovableItem({})\n    }\n\n    return (\n        <div className='silhouettes-items'>\n            <HeadingUI text=\"Top Silhouettes\" size=\"20px\" />\n            <div className=\"silhouettes-items-body customXScrollbar\">\n                {topSilhouettes?.length ? topSilhouettes.map((silhouette: ObjectType) => {\n                    return <div className=\"silhouettes-list-silhouette\" key={silhouette._id}>\n                        <HeadingUI classN=\"silhouettes-list-text _ellipsis\" text={silhouette.name} color={appColor} size=\"16px\" />\n                        <div className=\"silhouettes-list-image\">\n                            <img src={`${BASE_UPLOADS_SILHOUETTES_TOPS_URL}${silhouette.silhouetteurl}`} className=\"silhouettes-list-img\" alt={silhouette.name} />\n                        </div>\n                        <div className=\"silhouettes-list-buttons\">\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => editSilhouette(silhouette)}>Edit</ButtonUI>\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => prepareToRemoveItem(silhouette)}><FontAwesomeIcon icon={faTrash} /></ButtonUI>\n                        </div>\n                    </div>\n                }) : <HeadingUI text='Nothing found' color={appColor} size='16px' />}\n            </div>\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditSilhouette\n                    callback={saveSilhouette}\n                    closePopup={closePopup}\n                    silhouette={editableSilhouette}\n                    errors={errors}\n                    setSilhouette={setEditableSilhouette}\n                    silhouetteInfo={silhouetteInfo}\n                />\n            </PopupUI>}\n            {isVisibleRemove && <PopupUI callback={closePopupRemove}>\n                <RemoveSome\n                    header=\"Remove Top Silhouette\"\n                    text={`Do you want to remove the top silhouette <span> ${removableItem?.name} ?</span>`}\n                    discardCallback={closePopupRemove}\n                    removeCallback={removeItem}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default TopSilhouettesList;"],"names":["TopSilhouettes","isVisible","setIsVisible","useState","dispatch","useDispatch","closePopup","resetSilhouetteState","useEffect","getAvSilhouettes","getAvMannequins","_jsxs","children","_jsx","MainHead","text","ButtonUI","classN","onClick","type","MainBody","TopSilhouettesList","PopupUI","callback","NewSilhouette","selectedType","silhouettes","useSelector","availableSilhouettes","editableSilhouette","setEditableSilhouette","silhouetteInfo","setSilhouetteInfo","errors","setErrors","isVisibleRemove","setIsVisibleRemove","removableItem","setRemovableItem","topSilhouettes","useMemo","filter","silhouette","closePopupRemove","className","HeadingUI","size","length","map","name","color","appColor","src","concat","BASE_UPLOADS_SILHOUETTES_TOPS_URL","silhouetteurl","alt","editSilhouette","FontAwesomeIcon","icon","faTrash","_id","EditSilhouette","async","_editableSilhouette$s","formErrors","formValidator","silhouetteFormOptions","Object","keys","newPrint","JSON","parse","stringify","includes","file","image","response","fetch","blob","File","getNewFile","formData","FormData","forEach","key","append","updateSilhouette","then","res","setSilhouetteData","setSilhouette","RemoveSome","header","discardCallback","removeCallback","removeSilhouette"],"sourceRoot":""}