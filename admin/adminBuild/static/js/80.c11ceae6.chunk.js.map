{"version":3,"file":"static/js/80.c11ceae6.chunk.js","mappings":"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","sources":["components/customize/prints/pallette/PalettesList.tsx","components/customize/prints/pallette/NewPalette.tsx","components/customize/prints/pallette/PrintsPallette.tsx","services/printService.ts","shared/helpers/helpers.ts"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { availablePrints, printsVariants, setPrintsPalettesData } from \"redux/reducers/printReducer\";\nimport { orderPalettePrints } from \"shared/api/dataApi\";\nimport { BASE_UPLOADS_PRINTS_PREVIEWS_URL } from \"shared/constants/genericApiRoutes\";\nimport { ArrayType, ObjectType, appColor } from \"shared/helpers/helpers\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\n\ninterface Props {\n    palettes: ArrayType\n}\n\nconst PalettesList = ({\n    palettes\n}: Props) => {\n\n    const printsList = useSelector(availablePrints)\n    const printVariants = useSelector(printsVariants)\n    const [draggableVariant, setDraggableVariant] = useState<number>(0)\n    const [draggableRow, setDraggableRow] = useState<number>(0)\n    const dispatch = useDispatch()\n    const onDragStart = (e: any, index: number, row: number) => {\n        setDraggableVariant(index)\n        setDraggableRow(row)\n    };\n\n    const onDragOver = (e: any) => {\n        e.preventDefault();\n    };\n\n    const onDrop = async (e: any, idx: number, index: number) => {\n        e.preventDefault();\n        const fromElement = palettes[index]?.grouped?.[draggableVariant]\n        const toElement = palettes[index]?.grouped?.[idx]\n        if (fromElement && toElement && idx !== draggableVariant && draggableRow === index) {\n            const data = await orderPalettePrints({\n                fromElement, toElement\n            })\n            dispatch(setPrintsPalettesData(data))\n        }\n    };\n\n    return (\n        <div className=\"palettes-list\">\n            {printVariants?.map((variant: ObjectType, index: number) => {\n                const { name = '', _id = '' } = variant || {}\n                const paletteIdx = palettes?.findIndex((palette: ObjectType) => palette?._id?.variant_id === _id)\n                const palette = palettes[paletteIdx]\n                const { grouped = [] } = palette || {}\n                return <div key={variant?._id + index} className=\"palette-body\">\n                    <HeadingUI classN=\"palette-variantname\" text={name} color={appColor} size=\"18px\" />\n                    {grouped?.length ? <div className=\"palette-content customXScrollbar\">\n                        {grouped?.map((group: ObjectType, idx: number) => {\n                            const print = printsList?.find((print: ObjectType) => print._id === group?.print_id)\n                            const { previewurl = '', name = '' } = print || {}\n                            return <div key={group?.print_id + idx} style={{\n                                backgroundImage: `url(${BASE_UPLOADS_PRINTS_PREVIEWS_URL}${previewurl || ''})`\n                            }}\n                                className=\"palette-elem\"\n                                draggable\n                                onDragStart={(e) => onDragStart(e, idx, paletteIdx)}\n                                onDragOver={onDragOver}\n                                onDrop={(e) => onDrop(e, idx, paletteIdx)}\n                            >\n                                <HeadingUI classN=\"palette-text\" align=\"center\" text={name} size=\"12px\" color='#fff' />\n                            </div>\n                        })}\n                    </div> : null }\n                </div>\n            })}\n        </div>\n    );\n};\n\nexport default PalettesList;","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getAvPrintsVariants } from \"services/printService\";\nimport { addPrintVariant } from \"shared/api/dataApi\";\nimport { ObjectType } from \"shared/helpers/helpers\";\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { variantFormOptions } from \"utils/validators/validatorOptions\";\n\ninterface Props {\n    closePopup: CallbackSkeletonType,\n}\n\nconst NewPalette = ({\n    closePopup,\n}: Props) => {\n\n    const [data, setData] = useState<ObjectType>({\n        name: ''\n    })\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        setData({ ...data, [name]: value })\n    }\n\n    const addNewPalette = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const errors = formValidator(data, variantFormOptions);\n        if (errors) {return setErrors(errors)};\n        if (Object.keys(errors).length) {setErrors({})};\n        await addPrintVariant(data)\n        await getAvPrintsVariants(dispatch)\n        closePopup()\n    }\n\n    return (\n        <form onSubmit={addNewPalette} className=\"new-palette\">\n            <HeadingUI text=\"Add new palette\" align=\"center\" color=\"#aa8a75\" />\n            <div className=\"new-palette-inputs\">\n                <InputUI\n                    placeholder=\"Name\"\n                    value={data?.name}\n                    label=\"Name*\"\n                    name=\"name\"\n                    error={errors?.name?.message || ''}\n                    callback={handleInputChange}\n                />\n            </div>\n            <div className=\"new-palette-actions\">\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Close</ButtonUI>\n                <ButtonUI type=\"submit\">Add</ButtonUI>\n            </div>\n        </form>\n    );\n};\n\nexport default NewPalette;","import MainBody from \"layout/MainBody/MainBody\";\nimport MainHead from \"layout/MainHead/MainHead\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport PalettesList from \"./PalettesList\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport NewPalette from \"./NewPalette\";\nimport './style.scss'\nimport { printsPalettes } from \"redux/reducers/printReducer\";\nimport { getAvPrints, getAvPrintsPalettes, getAvPrintsVariants } from \"services/printService\";\n\nconst PrintsPalette = () => {\n\n    const palettes = useSelector(printsPalettes)\n    const dispatch = useDispatch()\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n\n    const closePopup = () => {\n        setIsVisible(false)\n    }\n\n    useEffect(() => {\n        getAvPrintsPalettes(dispatch)\n        getAvPrintsVariants(dispatch)\n        getAvPrints(dispatch)\n    }, [])\n\n    return (\n        <div className='print-palettes'>\n            <MainHead text=\"Customize Palettes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Palette</ButtonUI>\n            <MainBody>\n                <div className=\"prints-palettes-list\">\n                    <HeadingUI text=\"Palettes List\" size=\"22px\" />\n                    {palettes?.length ? <PalettesList palettes={palettes} /> : null}\n                </div>\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewPalette\n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default PrintsPalette;","import { setPrintData, setPrintsPalettesData, setPrintsVariantsData } from \"redux/reducers/printReducer\"\nimport { getPrints, getPrintsPalettes, getPrintsVariants } from \"shared/api/dataApi\"\n\n\nexport const getAvPrints = (dispatch: any) => {\n    getPrints().then(res => {\n        dispatch(setPrintData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsVariants = (dispatch: any) => {\n    getPrintsVariants().then(res => {\n        dispatch(setPrintsVariantsData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsPalettes = (dispatch: any) => {\n    getPrintsPalettes().then(res => {\n        dispatch(setPrintsPalettesData(res))\n    }).catch(err => console.log(err))\n}","import { BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL, BASE_UPLOADS_SILHOUETTES_SLEEVES_URL, BASE_UPLOADS_SILHOUETTES_TOPS_URL } from \"shared/constants/genericApiRoutes\";\nimport { AnimationObject } from \"shared/objectModels/AnimationModel\";\n\nexport type ArrayType = Array<Record<string, any>>\nexport type ObjectType = Record<string, any>\n\nexport const PortalAnimations: AnimationObject = {\n  fadeIn: [\n    { opacity: 0, visibility: \"hidden\" },\n    { opacity: 1, visibility: \"visible\" },\n  ],\n  fadeOut: [\n    { opacity: 1, visibility: \"visible\" },\n    { opacity: 0, visibility: \"hidden\" },\n  ],\n};\n\nexport const CardBarPanelAnimations: AnimationObject = {\n  toRight: [\n    { opacity: 1, transform: \"translateX(0%)\" },\n    { opacity: 0, transform: \"translateX(100%)\" },\n  ],\n  fromRight: [\n    { opacity: 0, transform: \"translateX(100%)\" },\n    { opacity: 1, transform: \"translateX(0%)\" },\n  ],\n};\n\nexport const appColor = '#aa8a75';\n\nexport const silhouetteTypeOptions = [\n  {\n    id: 'top',\n    text: 'Top',\n    value: 'Top'\n  },\n  {\n    id: 'bottom',\n    text: 'Bottom',\n    value: 'Bottom'\n  },\n  {\n    id: 'sleeve',\n    text: 'Sleeve',\n    value: 'Sleeve'\n  }\n]\nexport const silhouetteOrientationOptions = [\n  {\n    id: 'front',\n    text: 'Front',\n    value: 'Front'\n  },\n  {\n    id: 'back',\n    text: 'Back',\n    value: 'Back'\n  },\n]\n\nexport const getSilhouetteFullPath = (type: string) => {\n  const loweredType = type.toLowerCase()\n  switch (loweredType) {\n    case 'top':\n      return BASE_UPLOADS_SILHOUETTES_TOPS_URL\n    case 'bottom':\n      return BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL\n    case 'sleeve':\n      return BASE_UPLOADS_SILHOUETTES_SLEEVES_URL\n    default:\n      break;\n  }\n}\n\nexport const getDropdownOptionsFromItemsVariants = (options: ArrayType) => {\n  return options?.length ? options.reduce((acc: any, option: ObjectType) => {\n    acc.push({\n      id: option?._id,\n      text: option?.name,\n      value: option?.name,\n    })\n    return acc\n  }, []) : []\n}\n\nexport const getActiveItemTypeById = (options:  ArrayType, id: string) => {\n  const elem = options.find(option => option.id === id)\n  return elem?.value || ''\n}"],"names":["_ref","palettes","printsList","useSelector","availablePrints","printVariants","printsVariants","draggableVariant","setDraggableVariant","useState","draggableRow","setDraggableRow","dispatch","useDispatch","onDragOver","e","preventDefault","_jsx","className","children","map","variant","index","name","_id","paletteIdx","findIndex","palette","_palette$_id","variant_id","grouped","_jsxs","HeadingUI","classN","text","color","appColor","size","length","group","idx","print","find","print_id","previewurl","style","backgroundImage","concat","BASE_UPLOADS_PRINTS_PREVIEWS_URL","draggable","onDragStart","row","onDrop","async","_palettes$index","_palettes$index$group","_palettes$index2","_palettes$index2$grou","fromElement","toElement","data","orderPalettePrints","setPrintsPalettesData","align","_errors$name","closePopup","setData","errors","setErrors","onSubmit","formValidator","variantFormOptions","Object","keys","addPrintVariant","getAvPrintsVariants","InputUI","placeholder","value","label","error","message","callback","event","target","ButtonUI","onClick","version","type","PrintsPalette","printsPalettes","isVisible","setIsVisible","useEffect","getAvPrintsPalettes","getAvPrints","MainHead","MainBody","PalettesList","PopupUI","NewPalette","getPrints","then","res","setPrintData","catch","err","console","log","getPrintsVariants","setPrintsVariantsData","getPrintsPalettes","silhouetteTypeOptions","id","silhouetteOrientationOptions","getSilhouetteFullPath","toLowerCase","BASE_UPLOADS_SILHOUETTES_TOPS_URL","BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL","BASE_UPLOADS_SILHOUETTES_SLEEVES_URL","getDropdownOptionsFromItemsVariants","options","reduce","acc","option","push"],"sourceRoot":""}