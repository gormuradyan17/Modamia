{"version":3,"file":"static/js/490.c4eef7e3.chunk.js","mappings":"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","sources":["pages/auth/signin/Signin.tsx","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx","shared/ui/HeadingUI/HeadingUI.tsx","shared/ui/InputUI/InputUI.tsx"],"sourcesContent":["import { ChangeEvent, FormEvent, useState } from \"react\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport './style.scss'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSigninData, isLoggedIn, setActiveSuperAdmin, setIsAuth, setSigninData } from \"redux/reducers/authReducer\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport { ObjectType, appColor, setCookie } from \"shared/helpers/helpers\";\nimport { adminSignin } from \"services/authService\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\nconst Signin = () => {\n\n    const isAuth = useSelector(isLoggedIn)\n\n    const signinData = useSelector(getSigninData)\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const [errors, setErrors] = useState<ObjectType>({\n        password: '',\n        email: ''\n    })\n\n    const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const response: any = await adminSignin(signinData, setErrors);\n        if (response?.accessToken) {\n            setCookie('accessToken', response.accessToken, 365)\n            dispatch(setActiveSuperAdmin(response?.admin))\n            dispatch(setIsAuth(true));\n            navigate('/');\n        }\n    }\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        dispatch(setSigninData({ name, value }))\n    }\n\n    if (isAuth) return <Navigate to='/' />\n\n    return (\n        <div className=\"auth-signin\">\n            <form className=\"auth-signin-form\" onSubmit={onSubmit}>\n                <HeadingUI\n                    classN=\"auth-signin-title\"\n                    size=\"20px\"\n                    color={appColor}\n                    text=\"Sign In to Super Admin Panel\"\n                    align=\"center\"\n                />\n                <InputUI\n                    type=\"text\"\n                    name=\"email\"\n                    value={signinData?.email}\n                    error={errors?.email}\n                    placeholder=\"Email\"\n                    callback={handleInputChange}\n                />\n                <InputUI\n                    type=\"password\"\n                    name=\"password\"\n                    value={signinData?.password}\n                    error={errors?.password}\n                    placeholder=\"Password\"\n                    callback={handleInputChange}\n                />\n                <ButtonUI\n                    type=\"submit\"\n                    classN='auth-signin-buton'\n                >Sign In</ButtonUI>\n            </form>\n        </div>\n    );\n};\n\nexport default Signin;","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}","import './style.scss'\n\ninterface Props {\n    text: string,\n    classN?: string,\n    color?: string,\n    size?: string,\n    align?: 'center' | 'left' | 'right'\n}\n\nconst HeadingUI = ({\n    text,\n    classN = '',\n    color = '',\n    size = '',\n    align = 'left'\n}: Props) => {\n    return (\n        <h1 className={`headingUI ${classN}`}\n            style={{\n                color: color || '#000',\n                fontSize: size || '30px',\n                textAlign: align\n            }}\n        >{text}</h1>\n    );\n};\n\nexport default HeadingUI;","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport './style.scss'\nimport { useEffect } from \"react\";\n\ninterface Props {\n    value: string,\n    placeholder?: string,\n    type?: string,\n    callback: CallbackSkeletonType,\n    label?: string,\n    name: string,\n    error?: string,\n    autoComplete?: string,\n}\n\nconst InputUI = ({\n    value,\n    placeholder = '',\n    type = 'text',\n    callback,\n    label = '',\n    name,\n    error,\n    autoComplete = ''\n}: Props) => {\n    // const refInput = useRef<HTMLInputElement | null>(null)\n    // const refSpan = useRef<HTMLInputElement | null>(null)\n\n    // useEffect(() => {\n    //     if (error && refInput?.current && refSpan?.current) {\n    //         refInput.current.classList.add('_errorShake')\n    //         refSpan.current.classList.add('_errorShake')\n    //         setTimeout(() => {\n    //             refInput?.current?.classList.remove('_errorShake')\n    //             refSpan?.current?.classList.remove('_errorShake')\n    //         }, 500);\n    //     }\n\n    //     return () => {\n    //         refInput?.current?.classList.remove('_errorShake')\n    //         refSpan?.current?.classList.remove('_errorShake')\n    //     }\n    // },[error])\n\n    return (\n        <div className=\"InputUI\">\n            {label && <label \n                className=\"InputUI__label\"\n                htmlFor={`InputUI-${name}`}>\n                {label}\n            </label>}\n            {error && <span className=\"error-message\">{error}</span>}\n            <input \n                className={`InputUI__input${error ? ' _error' : ''}`}\n                id={`InputUI-${name}`}\n                name={name}\n                type={type}\n                defaultValue={value}\n                onChange={callback}\n                {...(autoComplete) && {autoComplete}}\n                {...(placeholder && {placeholder})}\n            />\n        </div>\n    );\n};\n\nexport default InputUI;"],"names":["Signin","isAuth","useSelector","isLoggedIn","signinData","getSigninData","dispatch","useDispatch","navigate","useNavigate","errors","setErrors","useState","password","email","handleInputChange","event","target","name","value","setSigninData","_jsx","Navigate","to","className","children","_jsxs","onSubmit","async","e","preventDefault","response","adminSignin","accessToken","setCookie","setActiveSuperAdmin","admin","setIsAuth","HeadingUI","classN","size","color","appColor","text","align","InputUI","type","error","placeholder","callback","ButtonUI","CallbackSkeletonValue","_ref","concat","versions","default","red","orange","blue","green","gray","version","disabled","isLoading","onClick","buttonProps","LoaderCircleUI","style","fontSize","textAlign","label","autoComplete","htmlFor","id","defaultValue","onChange"],"sourceRoot":""}