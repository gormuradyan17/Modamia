{"version":3,"file":"static/js/385.20d742f5.chunk.js","mappings":"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","sources":["components/customize/colors/pallette/PalettesList.tsx","components/customize/colors/pallette/NewPalette.tsx","components/customize/colors/pallette/ColorsPallette.tsx","services/colorService.ts","shared/helpers/helpers.ts"],"sourcesContent":["import { CSSProperties, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { availableColors, colorsVariants, setColorsPalettesData } from \"redux/reducers/colorReducer\";\nimport { orderPaletteColors } from \"shared/api/dataApi\";\nimport { ArrayType, ObjectType, appColor } from \"shared/helpers/helpers\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\n\ninterface Props {\n    palettes: ArrayType\n}\n\nconst PalettesList = ({\n    palettes\n}: Props) => {\n\n    const colorsList = useSelector(availableColors)\n    const colorVariants = useSelector(colorsVariants)\n    const [draggableVariant, setDraggableVariant] = useState<number>(0)\n    const [draggableRow, setDraggableRow] = useState<number>(0)\n    const dispatch = useDispatch()\n    const onDragStart = (e: any, index: number, row: number) => {\n        setDraggableVariant(index)\n        setDraggableRow(row)\n    };\n\n    const onDragOver = (e: any) => {\n        e.preventDefault();\n    };\n\n    const onDrop = async (e: any, idx: number, index: number) => {\n        e.preventDefault();\n        const fromElement = palettes[index]?.grouped?.[draggableVariant]\n        const toElement = palettes[index]?.grouped?.[idx]\n        if (fromElement && toElement && idx !== draggableVariant && draggableRow === index) {\n            const data = await orderPaletteColors({\n                fromElement, toElement\n            })\n            dispatch(setColorsPalettesData(data))\n        }\n    };\n\n    return (\n        <div className=\"palettes-list\">\n            {colorVariants?.map((variant: ObjectType, index: number) => {\n                const { name = '', _id = '' } = variant || {}\n                const paletteIdx = palettes?.findIndex((palette: ObjectType) => palette?._id?.variant_id === _id)\n                const palette = palettes[paletteIdx]\n                const { grouped = [] } = palette || {}\n                return <div key={variant?._id + index} className=\"palette-body\">\n                    <HeadingUI classN=\"palette-variantname\" text={name} color={appColor} size=\"18px\" />\n                    <div className=\"palette-content customXScrollbar\">\n                        {grouped?.map((group: ObjectType, idx: number) => {\n                            const color = colorsList?.find((color: ObjectType) => color._id === group?.color_id)\n                            const { hexcode = '', name = '' } = color || {}\n                            return <div key={group?.color_id + idx} style={{\n                                backgroundColor: hexcode\n                            }}\n                                className=\"palette-elem\"\n                                draggable\n                                onDragStart={(e) => onDragStart(e, idx, paletteIdx)}\n                                onDragOver={onDragOver}\n                                onDrop={(e) => onDrop(e, idx, paletteIdx)}\n                            >\n                                <HeadingUI classN=\"palette-elem-text\" align=\"center\" text={name} size=\"12px\" color='#fff' />\n                            </div>\n                        })}\n\n                    </div>\n                </div>\n            })}\n        </div>\n    );\n};\n\nexport default PalettesList;","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getAvColorsVariants } from \"services/colorService\";\nimport { addColorVariant } from \"shared/api/dataApi\";\nimport { ObjectType } from \"shared/helpers/helpers\";\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { variantFormOptions } from \"utils/validators/validatorOptions\";\n\ninterface Props {\n    closePopup: CallbackSkeletonType,\n}\n\nconst NewPalette = ({\n    closePopup,\n}: Props) => {\n\n    const [data, setData] = useState<ObjectType>({\n        name: ''\n    })\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        setData({ ...data, [name]: value })\n    }\n\n    const addNewPalette = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const errors = formValidator(data, variantFormOptions);\n        if (errors) {return setErrors(errors)};\n        if (Object.keys(errors).length) {setErrors({})};\n        await addColorVariant(data)\n        await getAvColorsVariants(dispatch)\n        closePopup()\n    }\n\n    return (\n        <form onSubmit={addNewPalette} className=\"new-palette\">\n            <HeadingUI text=\"Add new palette\" align=\"center\" color=\"#aa8a75\" />\n            <div className=\"new-palette-inputs\">\n                <InputUI\n                    placeholder=\"Name\"\n                    value={data?.name}\n                    label=\"Name*\"\n                    name=\"name\"\n                    error={errors?.name?.message || ''}\n                    callback={handleInputChange}\n                />\n            </div>\n            <div className=\"new-palette-actions\">\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Close</ButtonUI>\n                <ButtonUI type=\"submit\">Add</ButtonUI>\n            </div>\n        </form>\n    );\n};\n\nexport default NewPalette;","import MainBody from \"layout/MainBody/MainBody\";\nimport MainHead from \"layout/MainHead/MainHead\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { colorsPalettes } from \"redux/reducers/colorReducer\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport PalettesList from \"./PalettesList\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport NewPalette from \"./NewPalette\";\nimport './style.scss'\nimport { getAvColors, getAvColorsPalettes, getAvColorsVariants } from \"services/colorService\";\n\nconst ColorsPallette = () => {\n\n    const palettes = useSelector(colorsPalettes)\n    const dispatch = useDispatch()\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n\n    const closePopup = () => {\n        setIsVisible(false)\n    }\n\n    useEffect(() => {\n        getAvColorsPalettes(dispatch)\n        getAvColorsVariants(dispatch)\n        getAvColors(dispatch)\n    }, [])\n\n    return (\n        <div className='color-palettes'>\n            <MainHead text=\"Customize Palettes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Palette</ButtonUI>\n            <MainBody>\n                <div className=\"colors-palettes-list\">\n                    <HeadingUI text=\"Palettes List\" size=\"22px\" />\n                    {palettes?.length ? <PalettesList palettes={palettes} /> : null}\n                </div>\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewPalette\n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default ColorsPallette;","import { setColorData, setColorsPalettesData, setColorsVariantsData } from \"redux/reducers/colorReducer\"\nimport { getColors, getColorsPalettes, getColorsVariants } from \"shared/api/dataApi\"\n\n\nexport const getAvColors = (dispatch: any) => {\n    getColors().then(res => {\n        dispatch(setColorData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvColorsVariants = (dispatch: any) => {\n    getColorsVariants().then(res => {\n        dispatch(setColorsVariantsData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvColorsPalettes = (dispatch: any) => {\n    getColorsPalettes().then(res => {\n        dispatch(setColorsPalettesData(res))\n    }).catch(err => console.log(err))\n}","import { BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL, BASE_UPLOADS_SILHOUETTES_SLEEVES_URL, BASE_UPLOADS_SILHOUETTES_TOPS_URL } from \"shared/constants/genericApiRoutes\";\nimport { AnimationObject } from \"shared/objectModels/AnimationModel\";\n\nexport type ArrayType = Array<Record<string, any>>\nexport type ObjectType = Record<string, any>\n\nexport const PortalAnimations: AnimationObject = {\n  fadeIn: [\n    { opacity: 0, visibility: \"hidden\" },\n    { opacity: 1, visibility: \"visible\" },\n  ],\n  fadeOut: [\n    { opacity: 1, visibility: \"visible\" },\n    { opacity: 0, visibility: \"hidden\" },\n  ],\n};\n\nexport const CardBarPanelAnimations: AnimationObject = {\n  toRight: [\n    { opacity: 1, transform: \"translateX(0%)\" },\n    { opacity: 0, transform: \"translateX(100%)\" },\n  ],\n  fromRight: [\n    { opacity: 0, transform: \"translateX(100%)\" },\n    { opacity: 1, transform: \"translateX(0%)\" },\n  ],\n};\n\nexport const appColor = '#aa8a75';\n\nexport const silhouetteTypeOptions = [\n  {\n    id: 'top',\n    text: 'Top',\n    value: 'Top'\n  },\n  {\n    id: 'bottom',\n    text: 'Bottom',\n    value: 'Bottom'\n  },\n  {\n    id: 'sleeve',\n    text: 'Sleeve',\n    value: 'Sleeve'\n  }\n]\nexport const silhouetteOrientationOptions = [\n  {\n    id: 'front',\n    text: 'Front',\n    value: 'Front'\n  },\n  {\n    id: 'back',\n    text: 'Back',\n    value: 'Back'\n  },\n]\n\nexport const getSilhouetteFullPath = (type: string) => {\n  const loweredType = type.toLowerCase()\n  switch (loweredType) {\n    case 'top':\n      return BASE_UPLOADS_SILHOUETTES_TOPS_URL\n    case 'bottom':\n      return BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL\n    case 'sleeve':\n      return BASE_UPLOADS_SILHOUETTES_SLEEVES_URL\n    default:\n      break;\n  }\n}\n\nexport const getDropdownOptionsFromItemsVariants = (options: ArrayType) => {\n  return options?.length ? options.reduce((acc: any, option: ObjectType) => {\n    acc.push({\n      id: option?._id,\n      text: option?.name,\n      value: option?.name,\n    })\n    return acc\n  }, []) : []\n}\n\nexport const getActiveItemTypeById = (options:  ArrayType, id: string) => {\n  const elem = options.find(option => option.id === id)\n  return elem?.value || ''\n}"],"names":["_ref","palettes","colorsList","useSelector","availableColors","colorVariants","colorsVariants","draggableVariant","setDraggableVariant","useState","draggableRow","setDraggableRow","dispatch","useDispatch","onDragOver","e","preventDefault","_jsx","className","children","map","variant","index","name","_id","paletteIdx","findIndex","palette","_palette$_id","variant_id","grouped","_jsxs","HeadingUI","classN","text","color","appColor","size","group","idx","find","color_id","hexcode","style","backgroundColor","draggable","onDragStart","row","onDrop","async","_palettes$index","_palettes$index$group","_palettes$index2","_palettes$index2$grou","fromElement","toElement","data","orderPaletteColors","setColorsPalettesData","align","_errors$name","closePopup","setData","errors","setErrors","onSubmit","formValidator","variantFormOptions","Object","keys","length","addColorVariant","getAvColorsVariants","InputUI","placeholder","value","label","error","message","callback","event","target","ButtonUI","onClick","version","type","ColorsPallette","colorsPalettes","isVisible","setIsVisible","useEffect","getAvColorsPalettes","getAvColors","MainHead","MainBody","PalettesList","PopupUI","NewPalette","getColors","then","res","setColorData","catch","err","console","log","getColorsVariants","setColorsVariantsData","getColorsPalettes","silhouetteTypeOptions","id","silhouetteOrientationOptions","getSilhouetteFullPath","toLowerCase","BASE_UPLOADS_SILHOUETTES_TOPS_URL","BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL","BASE_UPLOADS_SILHOUETTES_SLEEVES_URL","getDropdownOptionsFromItemsVariants","options","reduce","acc","option","push"],"sourceRoot":""}