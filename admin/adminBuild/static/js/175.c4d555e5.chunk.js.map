{"version":3,"file":"static/js/175.c4d555e5.chunk.js","mappings":"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","sources":["components/customize/prints/pallette/PalettesList.tsx","components/customize/prints/pallette/NewPalette.tsx","components/customize/prints/pallette/PrintsPallette.tsx","layout/MainBody/MainBody.tsx","layout/MainHead/MainHead.tsx","layout/ReactPortal/helper.ts","layout/ReactPortal/ReactPortal.tsx","services/printService.ts","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx","shared/ui/HeadingUI/HeadingUI.tsx","shared/ui/InputUI/InputUI.tsx","shared/ui/PopupUI/PopupUI.tsx","utils/validators/validator.ts","utils/validators/validatorOptions.ts"],"sourcesContent":["import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { availablePrints, printsVariants, setPrintsPalettesData } from \"redux/reducers/printReducer\";\nimport { orderPalettePrints } from \"shared/api/dataApi\";\nimport { BASE_UPLOADS_PRINTS_PREVIEWS_URL } from \"shared/constants/genericApiRoutes\";\nimport { ArrayType, ObjectType, appColor } from \"shared/helpers/helpers\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\n\ninterface Props {\n    palettes: ArrayType\n}\n\nconst PalettesList = ({\n    palettes\n}: Props) => {\n\n    const printsList = useSelector(availablePrints)\n    const printVariants = useSelector(printsVariants)\n    const [draggableVariant, setDraggableVariant] = useState<number>(0)\n    const [draggableRow, setDraggableRow] = useState<number>(0)\n    const dispatch = useDispatch()\n    const onDragStart = (e: any, index: number, row: number) => {\n        setDraggableVariant(index)\n        setDraggableRow(row)\n    };\n\n    const onDragOver = (e: any) => {\n        e.preventDefault();\n    };\n\n    const onDrop = async (e: any, idx: number, index: number) => {\n        e.preventDefault();\n        const fromElement = palettes[index]?.grouped?.[draggableVariant]\n        const toElement = palettes[index]?.grouped?.[idx]\n        if (fromElement && toElement && idx !== draggableVariant && draggableRow === index) {\n            const data = await orderPalettePrints({\n                fromElement, toElement\n            })\n            dispatch(setPrintsPalettesData(data))\n        }\n    };\n\n    return (\n        <div className=\"palettes-list\">\n            {printVariants?.map((variant: ObjectType, index: number) => {\n                const { name = '', _id = '' } = variant || {}\n                const paletteIdx = palettes?.findIndex((palette: ObjectType) => palette?._id?.variant_id === _id)\n                const palette = palettes[paletteIdx]\n                const { grouped = [] } = palette || {}\n                return <div key={variant?._id + index} className=\"palette-body\">\n                    <HeadingUI classN=\"palette-variantname\" text={name} color={appColor} size=\"18px\" />\n                    {grouped?.length ? <div className=\"palette-content customXScrollbar\">\n                        {grouped?.map((group: ObjectType, idx: number) => {\n                            const print = printsList?.find((print: ObjectType) => print._id === group?.print_id)\n                            const { previewurl = '', name = '' } = print || {}\n                            return <div key={group?.print_id + idx} style={{\n                                backgroundImage: `url(${BASE_UPLOADS_PRINTS_PREVIEWS_URL}${previewurl || ''})`\n                            }}\n                                className=\"palette-elem\"\n                                draggable\n                                onDragStart={(e) => onDragStart(e, idx, paletteIdx)}\n                                onDragOver={onDragOver}\n                                onDrop={(e) => onDrop(e, idx, paletteIdx)}\n                            >\n                                <HeadingUI classN=\"palette-text\" align=\"center\" text={name} size=\"12px\" color='#fff' />\n                            </div>\n                        })}\n                    </div> : null }\n                </div>\n            })}\n        </div>\n    );\n};\n\nexport default PalettesList;","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getAvPrintsVariants } from \"services/printService\";\nimport { addPrintVariant } from \"shared/api/dataApi\";\nimport { ObjectType } from \"shared/helpers/helpers\";\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { variantFormOptions } from \"utils/validators/validatorOptions\";\n\ninterface Props {\n    closePopup: CallbackSkeletonType,\n}\n\nconst NewPalette = ({\n    closePopup,\n}: Props) => {\n\n    const [data, setData] = useState<ObjectType>({\n        name: ''\n    })\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        setData({ ...data, [name]: value })\n    }\n\n    const addNewPalette = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const errors = formValidator(data, variantFormOptions);\n        if (errors) {return setErrors(errors)};\n        if (Object.keys(errors).length) {setErrors({})};\n        await addPrintVariant(data)\n        await getAvPrintsVariants(dispatch)\n        closePopup()\n    }\n\n    return (\n        <form onSubmit={addNewPalette} className=\"new-palette\">\n            <HeadingUI text=\"Add new palette\" align=\"center\" color=\"#aa8a75\" />\n            <div className=\"new-palette-inputs\">\n                <InputUI\n                    placeholder=\"Name\"\n                    value={data?.name}\n                    label=\"Name*\"\n                    name=\"name\"\n                    error={errors?.name?.message || ''}\n                    callback={handleInputChange}\n                />\n            </div>\n            <div className=\"new-palette-actions\">\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Close</ButtonUI>\n                <ButtonUI type=\"submit\">Add</ButtonUI>\n            </div>\n        </form>\n    );\n};\n\nexport default NewPalette;","import MainBody from \"layout/MainBody/MainBody\";\nimport MainHead from \"layout/MainHead/MainHead\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport PalettesList from \"./PalettesList\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport NewPalette from \"./NewPalette\";\nimport './style.scss'\nimport { printsPalettes } from \"redux/reducers/printReducer\";\nimport { getAvPrints, getAvPrintsPalettes, getAvPrintsVariants } from \"services/printService\";\n\nconst PrintsPalette = () => {\n\n    const palettes = useSelector(printsPalettes)\n    const dispatch = useDispatch()\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n\n    const closePopup = () => {\n        setIsVisible(false)\n    }\n\n    useEffect(() => {\n        getAvPrintsPalettes(dispatch)\n        getAvPrintsVariants(dispatch)\n        getAvPrints(dispatch)\n    }, [])\n\n    return (\n        <div className='print-palettes'>\n            <MainHead text=\"Customize Palettes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Palette</ButtonUI>\n            <MainBody>\n                <div className=\"prints-palettes-list\">\n                    <HeadingUI text=\"Palettes List\" size=\"22px\" />\n                    {palettes?.length ? <PalettesList palettes={palettes} /> : null}\n                </div>\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewPalette\n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default PrintsPalette;","import './style.scss'\n\ninterface Props {\n    children: any\n}\n\nconst MainBody = ({\n    children\n}: Props) => {\n    return (\n        <div className=\"main-body\">\n            {children}\n        </div>\n    );\n};\n\nexport default MainBody;","import HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport './style.scss'\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { adminSignout } from \"services/authService\";\nimport { eraseCookie } from \"shared/helpers/helpers\";\nimport { useDispatch } from \"react-redux\";\nimport { setActiveSuperAdmin, setIsAuth } from \"redux/reducers/authReducer\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface Props {\n    text: string,\n}\n\nconst MainHead = ({\n    text\n}: Props) => {\n\n    const dispatch = useDispatch()\n\n    const navigate = useNavigate()\n\n    const signout = async () => {\n\t\ttry {\n\t\t\tconst data = await adminSignout();\n\t\t\tif (data) {\n\t\t\t\teraseCookie('accessToken')\n\t\t\t\tdispatch(setIsAuth(false));\n                dispatch(setActiveSuperAdmin({}))\n\t\t\t\tnavigate('/login');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n    }\n\n    return (\n        <div className=\"main-head\">\n            <HeadingUI text={text} color=\"#aa8a75\" />\n            <ButtonUI\n                classN=\"main-head-logout\"\n                onClick={signout}\n            >\n                <FontAwesomeIcon icon={faSignOutAlt} />\n                <span>Sign out</span>\n            </ButtonUI>\n        </div>\n    );\n};\n\nexport default MainHead;","export function createWrapperAndAppendToBody(wrapperId: string) {\n    const wrapperElement = document.createElement(\"div\");\n    wrapperElement.setAttribute(\"id\", wrapperId);\n    document.body.appendChild(wrapperElement);\n    return wrapperElement;\n  }\n  \n  export const checkOffsetHeight = (selector: any) => {\n    const elem = document.querySelector(selector);\n    const top = elem && elem.getBoundingClientRect().top - 90;\n    let stack: any = [];\n    let prevScrollY = 0;\n  \n    const move = () => {\n      let point = window.scrollY + 20 > top ? top - window.scrollY : 20;\n    \n      if (top !== stack[0]) {\n        stack = [top];\n      } else {\n        stack.push(top);\n      }\n    \n      window.scrollBy({\n        top: point,\n      });\n  \n      if (prevScrollY === window.scrollY) return;\n  \n      if (window.scrollY + 10 < top) {\n        prevScrollY = window.scrollY;\n        requestAnimationFrame(move)\n      }\n    }\n  \n    return move;\n  }","import { useLayoutEffect, useState } from \"react\";\nimport { createPortal,  } from \"react-dom\";\nimport { createWrapperAndAppendToBody } from \"./helper\";\n\n\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }: any) {\n  const [wrapperElement, setWrapperElement] = useState<any>(null);\n\n  useLayoutEffect(() => {\n    let element = document.getElementById(wrapperId)!;\n    let systemCreated = false;\n\n    if (!element) {\n      systemCreated = true;\n      element = createWrapperAndAppendToBody(wrapperId);\n    }\n\n    setWrapperElement(element);\n\n    return () => {\n      if (systemCreated && element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    };\n  }, [wrapperId]);\n\n  let element = document.getElementById(wrapperId);\n\n  if (!element) {\n    element = createWrapperAndAppendToBody(wrapperId);\n  }\n\n  if (wrapperElement === null) return null;\n\n  return createPortal(children, wrapperElement);\n}\n\nexport default ReactPortal;","import { setPrintData, setPrintsPalettesData, setPrintsVariantsData } from \"redux/reducers/printReducer\"\nimport { getPrints, getPrintsPalettes, getPrintsVariants } from \"shared/api/dataApi\"\n\n\nexport const getAvPrints = (dispatch: any) => {\n    getPrints().then(res => {\n        dispatch(setPrintData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsVariants = (dispatch: any) => {\n    getPrintsVariants().then(res => {\n        dispatch(setPrintsVariantsData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsPalettes = (dispatch: any) => {\n    getPrintsPalettes().then(res => {\n        dispatch(setPrintsPalettesData(res))\n    }).catch(err => console.log(err))\n}","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}","import './style.scss'\n\ninterface Props {\n    text: string,\n    classN?: string,\n    color?: string,\n    size?: string,\n    align?: 'center' | 'left' | 'right'\n}\n\nconst HeadingUI = ({\n    text,\n    classN = '',\n    color = '',\n    size = '',\n    align = 'left'\n}: Props) => {\n    return (\n        <h1 className={`headingUI ${classN}`}\n            style={{\n                color: color || '#000',\n                fontSize: size || '30px',\n                textAlign: align\n            }}\n        >{text}</h1>\n    );\n};\n\nexport default HeadingUI;","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport './style.scss'\nimport { useEffect } from \"react\";\n\ninterface Props {\n    value: string,\n    placeholder?: string,\n    type?: string,\n    callback: CallbackSkeletonType,\n    label?: string,\n    name: string,\n    error?: string,\n    autoComplete?: string,\n}\n\nconst InputUI = ({\n    value,\n    placeholder = '',\n    type = 'text',\n    callback,\n    label = '',\n    name,\n    error,\n    autoComplete = ''\n}: Props) => {\n    // const refInput = useRef<HTMLInputElement | null>(null)\n    // const refSpan = useRef<HTMLInputElement | null>(null)\n\n    // useEffect(() => {\n    //     if (error && refInput?.current && refSpan?.current) {\n    //         refInput.current.classList.add('_errorShake')\n    //         refSpan.current.classList.add('_errorShake')\n    //         setTimeout(() => {\n    //             refInput?.current?.classList.remove('_errorShake')\n    //             refSpan?.current?.classList.remove('_errorShake')\n    //         }, 500);\n    //     }\n\n    //     return () => {\n    //         refInput?.current?.classList.remove('_errorShake')\n    //         refSpan?.current?.classList.remove('_errorShake')\n    //     }\n    // },[error])\n\n    return (\n        <div className=\"InputUI\">\n            {label && <label \n                className=\"InputUI__label\"\n                htmlFor={`InputUI-${name}`}>\n                {label}\n            </label>}\n            {error && <span className=\"error-message\">{error}</span>}\n            <input \n                className={`InputUI__input${error ? ' _error' : ''}`}\n                id={`InputUI-${name}`}\n                name={name}\n                type={type}\n                defaultValue={value}\n                onChange={callback}\n                {...(autoComplete) && {autoComplete}}\n                {...(placeholder && {placeholder})}\n            />\n        </div>\n    );\n};\n\nexport default InputUI;","import ReactPortal from 'layout/ReactPortal/ReactPortal';\nimport './style.scss'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\nimport { CallbackSkeletonType } from 'shared/objectModels/GenericModel';\n\ninterface PropsI {\n    callback: CallbackSkeletonType,\n    children: any\n}\n\nconst PopupUI = ({\n    callback,\n    children\n}: PropsI) => {\n\n    return (\n        <ReactPortal>\n            <div className='PopupUI'>\n                <div className=\"PopupUI__container\">\n                    <div className='PopupUI__body'>\n                        {children}\n                    </div>\n                    <div className='PopupUI__icon'\n                        onClick={() => callback()}>\n                        <FontAwesomeIcon icon={faXmark} fontSize='18px' color=\"#fff\" />\n                    </div>\n                </div>\n                <div className='PopupUI__BG' onClick={() => callback()}></div>\n            </div>\n        </ReactPortal>\n    );\n};\n\nexport default PopupUI;","import { ObjectType } from \"shared/helpers/helpers\";\n\ninterface Rule {\n    error: any;\n    rule: any;\n}\n\nexport type ErrorInfo = Record<string, Record<string, {message: string}>>\n\n\nexport const formValidator = (formData: ObjectType, options: ObjectType) => {\n    const errorInfo = Object.keys(formData).reduce((acc: any, inputName): any => {\n        const currnetInputOptions:Rule[] = options[inputName] || [];\n        const inputValue = formData[inputName];\n        currnetInputOptions.forEach(option => {\n            const rule = option.rule;\n            const error = option.error; \n\n            if(rule.required !== undefined && !inputValue) {\n                acc[inputName] = error;\n            }\n            if(rule.test !== undefined && !rule.test.test(inputValue)) {\n                acc[inputName] = error;\n            }\n        });\n        return acc;\n    }, {});\n\n    return Object.keys(errorInfo).length ? errorInfo : false;\n};\n\nexport const getAllErrorMessages = (options: ObjectType) => {\n    return Object.keys(options).reduce((acc: any, item) => {\n        acc[item] = { message:  `${item} not valid`};\n        return acc;\n    }, {});\n};\n","\nexport const colorFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n    hexcode: [\n        {rule: { required : true }, error: {message: 'HexCode is required'} },\n        {rule: { test: /^#(?:[0-9a-fA-F]{3}){1,2}$/ }, error: {message: 'Incorrect format for HexCode'} },\n    ],\n}\n\nexport const printFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n    price: [\n        {rule: { required : true }, error: {message: 'Price is required'} },\n    ]\n}\n\nexport const printFilesOptions = {\n    highresurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Highres Url'} }\n    ],\n    previewurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Preview Url'} }\n    ]\n}\n\nexport const mannequinFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ]\n}\n\nexport const mannequinFilesOptions = {\n    fronturl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Front Url'} }\n    ],\n    backurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Back Url'} }\n    ]\n}\n\n\nexport const silhouetteFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n    price: [\n        {rule: { required : true }, error: {message: 'Price is required'} },\n    ],\n    type: [\n        {rule: { required : true }, error: {message: 'Type is required'} },\n    ],\n    orientation: [\n        {rule: { required : true }, error: {message: 'Orientation is required'} },\n    ]\n}\n\nexport const silhouetteFilesOptions = {\n    silhouetteurl: [\n        {rule: { test: /^$|\\.jpe?g$|\\.png$|\\.webp$|\\.bmp$/i }, error: {message: 'Incorrect format for Silhouette Url'} }\n    ]\n}\n\nexport const sizeFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n}\n\nexport const variantFormOptions = {\n    name: [\n        {rule: { required : true }, error: {message: 'Name is required'} },\n    ],\n}\n\nexport const superAdminFormOptions = {\n    email: [\n        {rule: { required : true }, error: {message: 'Email is required'} },\n    ],\n    password: [\n        {rule: { required : true }, error: {message: 'Password is required'} },\n    ]\n}"],"names":["_ref","palettes","printsList","useSelector","availablePrints","printVariants","printsVariants","draggableVariant","setDraggableVariant","useState","draggableRow","setDraggableRow","dispatch","useDispatch","onDragOver","e","preventDefault","_jsx","className","children","map","variant","index","name","_id","paletteIdx","findIndex","palette","_palette$_id","variant_id","grouped","_jsxs","HeadingUI","classN","text","color","appColor","size","length","group","idx","print","find","print_id","previewurl","style","backgroundImage","concat","BASE_UPLOADS_PRINTS_PREVIEWS_URL","draggable","onDragStart","row","onDrop","async","_palettes$index","_palettes$index$group","_palettes$index2","_palettes$index2$grou","fromElement","toElement","data","orderPalettePrints","setPrintsPalettesData","align","_errors$name","closePopup","setData","errors","setErrors","onSubmit","formValidator","variantFormOptions","Object","keys","addPrintVariant","getAvPrintsVariants","InputUI","placeholder","value","label","error","message","callback","event","target","ButtonUI","onClick","version","type","PrintsPalette","printsPalettes","isVisible","setIsVisible","useEffect","getAvPrintsPalettes","getAvPrints","MainHead","MainBody","PalettesList","PopupUI","NewPalette","navigate","useNavigate","adminSignout","eraseCookie","setIsAuth","setActiveSuperAdmin","console","log","FontAwesomeIcon","icon","faSignOutAlt","createWrapperAndAppendToBody","wrapperId","wrapperElement","document","createElement","setAttribute","body","appendChild","setWrapperElement","useLayoutEffect","element","getElementById","systemCreated","parentNode","removeChild","createPortal","getPrints","then","res","setPrintData","catch","err","getPrintsVariants","setPrintsVariantsData","getPrintsPalettes","CallbackSkeletonValue","versions","default","red","orange","blue","green","gray","disabled","isLoading","buttonProps","LoaderCircleUI","fontSize","textAlign","autoComplete","htmlFor","id","defaultValue","onChange","ReactPortal","faXmark","formData","options","errorInfo","reduce","acc","inputName","currnetInputOptions","inputValue","forEach","option","rule","undefined","required","test","colorFormOptions","hexcode","printFormOptions","price","printFilesOptions","highresurl","mannequinFormOptions","mannequinFilesOptions","fronturl","backurl","silhouetteFormOptions","orientation","silhouetteFilesOptions","silhouetteurl","sizeFormOptions","superAdminFormOptions","email","password"],"sourceRoot":""}