{"version":3,"file":"static/js/653.8d602757.chunk.js","mappings":"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","sources":["components/garment/newGarment/NewGarment.tsx"],"sourcesContent":["import MainBody from \"layout/MainBody/MainBody\";\nimport MainHead from \"layout/MainHead/MainHead\";\nimport { ChangeEvent, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAvSilhouettes } from \"services/silhouetteService\";\nimport './style.scss'\nimport { getAvMannequins } from \"services/mannequinService\";\nimport GarmentsMannequinsList from \"./GarmentsMannequinsList\";\nimport { garmentDetails, resetGarmentState, setGarmentState } from \"redux/reducers/garmentReducer\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport { addGarment } from \"shared/api/dataApi\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport GarmentsSilhouettesListWrapper from \"./GarmentsSilhouettesListWrapper\";\nimport { BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL, BASE_UPLOADS_SILHOUETTES_SLEEVES_URL, BASE_UPLOADS_SILHOUETTES_TOPS_URL } from \"shared/constants/genericApiRoutes\";\nimport { availableSilhouettes } from \"redux/reducers/silhouetteReducer\";\nimport { ArrayType, ObjectType, appColor, getDropdownOptionsFromItemsPalettes, getIsNewGarmentApproved } from \"shared/helpers/helpers\";\nimport { useNavigate } from \"react-router-dom\";\nimport GarmentDropdownCheckbox from \"../garmentDropdownCheckbox/GarmentDropdownCheckbox\";\nimport { colorsPalettes } from \"redux/reducers/colorReducer\";\nimport { printsPalettes } from \"redux/reducers/printReducer\";\nimport { getAvColorsPalettes } from \"services/colorService\";\nimport { getAvPrintsPalettes } from \"services/printService\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport DropzoneUI from \"shared/ui/DropzoneUI/DropzoneUI\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { garmentFilesOptions } from \"utils/validators/validatorOptions\";\n\nconst NewGarment = () => {\n\n    const dispatch = useDispatch()\n    const details = useSelector(garmentDetails)\n    const navigate = useNavigate()\n    const [file, setFile] = useState<any>(null)\n    useEffect(() => {\n        getAvSilhouettes(dispatch)\n        getAvMannequins(dispatch)\n        getAvColorsPalettes(dispatch)\n        getAvPrintsPalettes(dispatch)\n        return () => {\n            dispatch(resetGarmentState())\n        }\n    }, [])\n\n    const silhouettes = useSelector(availableSilhouettes)\n    const [fileErrors, setFileErrors] = useState<ObjectType>({})\n    const topSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette.type === 'Top')\n    }, [silhouettes])\n\n    const bottomSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette.type === 'Bottom')\n    }, [silhouettes])\n\n    const sleeveSilhouettes = useMemo(() => {\n        return silhouettes.filter((silhouette: ObjectType) => silhouette?.type === 'Sleeve')\n    }, [silhouettes])\n\n    const colorPalettes = useSelector(colorsPalettes)\n    const colorVariants = getDropdownOptionsFromItemsPalettes(colorPalettes) || [{}]\n\n    const printPalettes = useSelector(printsPalettes)\n    const printVariants = getDropdownOptionsFromItemsPalettes(printPalettes) || [{}]\n\n    const addNewGarment = async () => {\n        if (details?.mannequin_id && details?.name) {\n            const formData = new FormData()\n            const jsonItems = ['tops','bottoms','sleeves','palettes']\n            Object.keys(details).forEach((key) => {\n                if (jsonItems.includes(key)) formData.append(key, JSON.stringify(details[key])); \n                else formData.append(key, details[key]);\n            });\n            formData.append('background', file);\n            await addGarment(formData)\n            dispatch(resetGarmentState())\n            navigate('/garments')\n        }\n    }\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        dispatch(setGarmentState({ name, value }))\n    }\n\n    const setGarmentlist = (id: string, name: string) => {\n        if (id) {\n            const copyDetails = structuredClone(details)\n            const data = copyDetails[name];\n            const idx = data?.findIndex((item: ObjectType) => item.id === id)\n            if (idx !== -1) data.splice(idx, 1)\n            else data.push({\n                id,\n                order: 1\n            })\n            dispatch(setGarmentState({ name, value: data }))\n        }\n    }\n\n    const setGarmentOrderlist = (data: ObjectType, id: string, name: string) => {\n        if (id) {\n            const { value } = data;\n            const copyDetails = structuredClone(details)\n            const dataCopy = copyDetails[name];\n            const idx = dataCopy?.findIndex((item: ObjectType) => item.id === id)\n            if (idx !== -1) {\n                dataCopy[idx].order = value\n            }\n            dispatch(setGarmentState({ name, value: dataCopy }))\n        }\n    }\n\n    const setGarmentMannequin = (event: ChangeEvent<HTMLInputElement>, id: string) => {\n        const { target: { checked } } = event;\n        const name = 'mannequin_id'\n        if (id) {\n            dispatch(setGarmentState({ name, value: checked ? id : '' }))\n        }\n    }\n\n    const handleDropdownChange = (event: ChangeEvent<HTMLInputElement>, option: ObjectType, type: string) => {\n        const { target: { checked } } = event\n        const { id } = option;\n        if (id) {\n            const copyDetailsData: ObjectType = structuredClone(details)\n            const palettes = copyDetailsData?.palettes;\n            if (checked) palettes?.[type].push(id)\n            else {\n                const idx = palettes?.[type].findIndex((item: string) => item === id)\n                if (idx !== -1) palettes?.[type].splice(idx, 1)\n            }\n            dispatch(setGarmentState({ name: 'palettes', value: palettes }))\n        }\n    }\n\n    const validateFiles = (files: ArrayType, field: string) => {\n        let err = {}\n        files?.map(file => {\n            const obj = {\n                [field]: file?.name\n            }\n            err = formValidator(obj, garmentFilesOptions);\n        })\n        if (Object.keys(err).length) {\n            setFileErrors(err)\n            return false\n        }\n        if (Object.keys(fileErrors).length) { setFileErrors({}) };\n        return true\n    }\n\n    const addImage = (files: ArrayType) => {\n        setFile(files[0])\n    }\n\n    const isApproved = getIsNewGarmentApproved(details)\n\n    return (\n        <div>\n            <MainHead text=\"New Garment\" />\n            <MainBody>\n                <div className=\"garments-list-content\">\n                    <ButtonUI\n                        classN=\"add-garment-button\"\n                        onClick={addNewGarment}\n                        type=\"button\"\n                        disabled={!isApproved}\n                    >Add Garment</ButtonUI>\n                    <div className=\"garments-list-content-top\">\n                        <InputUI\n                            classN='add-garment-input'\n                            callback={handleInputChange}\n                            value={details?.name}\n                            name='name'\n                            label=\"Name*\"\n                        />\n                        <div className=\"garments-list-content-top-background\">\n                            <HeadingUI text='Background' color={appColor} size=\"18px\" />\n                            <DropzoneUI\n                                width=\"300px\"\n                                height=\"160px\"\n                                name=\"highresurl\"\n                                validationCallback={(files) => validateFiles(files, 'background')}\n                                error={fileErrors?.highresurl?.message || ''}\n                                onChange={(files: ArrayType) => addImage(files)}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"garments-list-top\">\n                        <GarmentsMannequinsList\n                            details={details}\n                            callback={(event: ChangeEvent<HTMLInputElement>, id: string) => setGarmentMannequin(event, id)}\n                        />\n                        <div className=\"garments-list-dropdowns\">\n                            <GarmentDropdownCheckbox\n                                options={colorVariants}\n                                onChange={(e: any, option: ObjectType) => handleDropdownChange(e, option, 'colors')}\n                                label=\"Color palettes\"\n                                details={details}\n                                type='colors'\n                            />\n                            <GarmentDropdownCheckbox\n                                options={printVariants}\n                                onChange={(e: any, option: ObjectType) => handleDropdownChange(e, option, 'prints')}\n                                label=\"Print palettes\"\n                                details={details}\n                                type='prints'\n                            />\n                        </div>\n                    </div>\n                    <GarmentsSilhouettesListWrapper\n                        header='Top Silhouettes'\n                        content={topSilhouettes}\n                        srcBase={BASE_UPLOADS_SILHOUETTES_TOPS_URL}\n                        callback={(id: string) => setGarmentlist(id, 'tops')}\n                        callbackDropdown={setGarmentOrderlist}\n                        type='tops'\n                        details={details}\n                    />\n                    <GarmentsSilhouettesListWrapper\n                        header='Bottom Silhouettes'\n                        content={bottomSilhouettes}\n                        srcBase={BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL}\n                        callback={(id: string) => setGarmentlist(id, 'bottoms')}\n                        callbackDropdown={setGarmentOrderlist}\n                        type='bottoms'\n                        details={details}\n                    />\n                    <GarmentsSilhouettesListWrapper\n                        header='Sleeve Silhouettes'\n                        content={sleeveSilhouettes}\n                        srcBase={BASE_UPLOADS_SILHOUETTES_SLEEVES_URL}\n                        callback={(id: string) => setGarmentlist(id, 'sleeves')}\n                        callbackDropdown={setGarmentOrderlist}\n                        type='sleeves'\n                        details={details}\n                    />\n                </div>\n            </MainBody>\n        </div>\n    );\n};\n\nexport default NewGarment;"],"names":["NewGarment","_fileErrors$highresur","dispatch","useDispatch","details","useSelector","garmentDetails","navigate","useNavigate","file","setFile","useState","useEffect","getAvSilhouettes","getAvMannequins","getAvColorsPalettes","getAvPrintsPalettes","resetGarmentState","silhouettes","availableSilhouettes","fileErrors","setFileErrors","topSilhouettes","useMemo","filter","silhouette","type","bottomSilhouettes","sleeveSilhouettes","colorPalettes","colorsPalettes","colorVariants","getDropdownOptionsFromItemsPalettes","printPalettes","printsPalettes","printVariants","setGarmentlist","id","name","data","structuredClone","idx","findIndex","item","splice","push","order","setGarmentState","value","setGarmentOrderlist","dataCopy","handleDropdownChange","event","option","target","checked","copyDetailsData","palettes","isApproved","getIsNewGarmentApproved","_jsxs","children","_jsx","MainHead","text","MainBody","className","ButtonUI","classN","onClick","async","mannequin_id","formData","FormData","jsonItems","Object","keys","forEach","key","includes","append","JSON","stringify","addGarment","disabled","InputUI","callback","label","HeadingUI","color","appColor","size","DropzoneUI","width","height","validationCallback","files","validateFiles","field","err","map","obj","formValidator","garmentFilesOptions","length","error","highresurl","message","onChange","addImage","GarmentsMannequinsList","setGarmentMannequin","GarmentDropdownCheckbox","options","e","GarmentsSilhouettesListWrapper","header","content","srcBase","BASE_UPLOADS_SILHOUETTES_TOPS_URL","callbackDropdown","BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL","BASE_UPLOADS_SILHOUETTES_SLEEVES_URL"],"sourceRoot":""}