{"version":3,"file":"static/js/455.32380bdf.chunk.js","mappings":"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","sources":["components/customize/silhouettes/bottoms/BottomSilhouettes.tsx","components/customize/silhouettes/bottoms/BottomSilhouettesList.tsx"],"sourcesContent":["import MainHead from 'layout/MainHead/MainHead';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport MainBody from 'layout/MainBody/MainBody';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport NewSilhouette from '../NewSilhouette';\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { getAvSilhouettes } from 'services/silhouetteService';\nimport BottomSilhouettesList from './BottomSilhouettesList';\nimport { resetSilhouetteState } from 'redux/reducers/silhouetteReducer';\nimport { getAvMannequins } from 'services/mannequinService';\n\nconst BottomSilhouettes = () => {\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const dispatch = useDispatch()\n    \n    const closePopup = () => {\n        setIsVisible(false)\n        dispatch(resetSilhouetteState())\n    }\n\n    useEffect(() => {\n        getAvSilhouettes(dispatch)\n        getAvMannequins(dispatch)\n    }, [])\n\n    return (\n        <div>\n            <MainHead text=\"Bottom Silhouettes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Bottom Silhouette</ButtonUI>\n            <MainBody>\n                <BottomSilhouettesList />\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewSilhouette\n                        selectedType='Bottom'\n                        closePopup={closePopup}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default BottomSilhouettes;","import { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { availableSilhouettes, setSilhouetteData } from 'redux/reducers/silhouetteReducer';\nimport { BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL } from 'shared/constants/genericApiRoutes';\nimport { ArrayType, ObjectType, appColor } from 'shared/helpers/helpers';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport PopupUI from 'shared/ui/PopupUI/PopupUI';\nimport EditSilhouette from '../EditSilhouette';\nimport { formValidator } from 'utils/validators/validator';\nimport { silhouetteFormOptions } from 'utils/validators/validatorOptions';\nimport { removeSilhouette, updateSilhouette } from 'shared/api/dataApi';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport RemoveSome from 'components/customize/removeSome/RemoveSome';\n\nconst BottomSilhouettesList = () => {\n\n    const silhouettes = useSelector(availableSilhouettes)\n\n    const [editableSilhouette, setEditableSilhouette] = useState<ObjectType>({})\n    const [silhouetteInfo, setSilhouetteInfo] = useState<ObjectType>({})\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [errors, setErrors] = useState<ObjectType>({})\n    const dispatch = useDispatch()\n\n    const [isVisibleRemove, setIsVisibleRemove] = useState<boolean>(false)\n    const [removableItem, setRemovableItem] = useState<ObjectType>({})\n\n    const [draggableVariant, setDraggableVariant] = useState<number>(0)\n    const [silhouettesList, setSilhouettesList] = useState<ArrayType>([])\n\n    useMemo(() => {\n        const data = silhouettes.filter((silhouette: ObjectType) => silhouette.type === 'Bottom')\n        setSilhouettesList(data)\n    }, [silhouettes])\n\n    const onDragStart = (e: any, idx: number) => {\n        setDraggableVariant(idx)\n    };\n\n    const onDragOver = (e: any) => {\n        e.preventDefault();\n    };\n\n    const onDrop = async (e: any, idx: number) => {\n        e.preventDefault();\n        const fromElement = silhouettesList[draggableVariant]\n        const toElement = silhouettesList[idx]\n        if (fromElement && toElement && idx !== draggableVariant) {\n            const copySilhouettes = structuredClone(silhouettesList)\n            copySilhouettes[idx] = fromElement;\n            copySilhouettes[draggableVariant] = toElement;\n            setSilhouettesList(copySilhouettes)\n        }\n    };\n    \n    const editSilhouette = (silhouette: ObjectType) => {\n        if (silhouette) {\n            setEditableSilhouette(silhouette)\n            setSilhouetteInfo(silhouette)\n            setIsVisible(true)\n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditableSilhouette({})\n        setSilhouetteInfo({})\n        setErrors({})\n    }\n\n    const saveSilhouette = async () => {\n\n        const formErrors = formValidator(editableSilhouette, silhouetteFormOptions);\n        if (formErrors) { return setErrors(formErrors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n\n        async function getNewFile(image: string) {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: blob.type });\n            return file\n        }\n        const newPrint = JSON.parse(JSON.stringify(editableSilhouette));\n        // console.log('editableSilhouette = > ', editableSilhouette)\n        if (editableSilhouette?.silhouetteurl?.includes('blob')) {\n            const file = await getNewFile(editableSilhouette.silhouetteurl);\n            newPrint.silhouetteurl = file;\n        }\n        const formData = new FormData();\n        Object.keys(newPrint).forEach((key) => {\n            formData.append(key, newPrint[key]);\n        });\n\n        await updateSilhouette(formData).then(res => {\n            dispatch(setSilhouetteData(res))\n        })\n        closePopup()\n    }\n\n    const prepareToRemoveItem = (item: ObjectType) => {\n        setRemovableItem(item)\n        setIsVisibleRemove(true)\n    }\n\n    const removeItem = async () => {\n        if (removableItem?._id) {\n            await removeSilhouette(removableItem).then(res => {\n                dispatch(setSilhouetteData(res))\n            })\n            setIsVisibleRemove(false)\n        }\n    }\n\n    const closePopupRemove = () => {\n        setIsVisibleRemove(false)\n        setRemovableItem({})\n    }\n\n    return (\n        <div className='silhouettes-items'>\n            <HeadingUI text=\"Bottom Silhouettes\" size=\"20px\" />\n            <div className=\"silhouettes-items-body customXScrollbar\">\n                {silhouettesList?.length ? silhouettesList.map((silhouette: ObjectType, idx: number) => {\n                    return <div\n                        className=\"silhouettes-list-silhouette\"\n                        key={silhouette._id}\n                        draggable\n                        onDragStart={(e) => onDragStart(e, idx)}\n                        onDragOver={onDragOver}\n                        onDrop={(e) => onDrop(e, idx)}\n                    >\n                        <HeadingUI classN=\"silhouettes-list-text _ellipsis\" text={silhouette.name} color={appColor} size=\"16px\" />\n                        <div className=\"silhouettes-list-image\">\n                            <img src={`${BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL}${silhouette.silhouetteurl}`} className=\"silhouettes-list-img\" alt={silhouette.name} />\n                        </div>\n                        <div className=\"silhouettes-list-buttons\">\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => editSilhouette(silhouette)}>Edit</ButtonUI>\n                            <ButtonUI classN=\"silhouettes-list-button\" onClick={() => prepareToRemoveItem(silhouette)}><FontAwesomeIcon icon={faTrash} /></ButtonUI>\n                        </div>\n                    </div>\n                }) : <HeadingUI text='Nothing found' color={appColor} size='16px' />}\n            </div>\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditSilhouette\n                    callback={saveSilhouette}\n                    closePopup={closePopup}\n                    silhouette={editableSilhouette}\n                    errors={errors}\n                    setSilhouette={setEditableSilhouette}\n                    silhouetteInfo={silhouetteInfo}\n                />\n            </PopupUI>}\n            {isVisibleRemove && <PopupUI callback={closePopupRemove}>\n                <RemoveSome\n                    header=\"Remove Bottom Silhouette\"\n                    text={`Do you want to remove the bottom silhouette <span> ${removableItem?.name} ?</span>`}\n                    discardCallback={closePopupRemove}\n                    removeCallback={removeItem}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default BottomSilhouettesList;"],"names":["BottomSilhouettes","isVisible","setIsVisible","useState","dispatch","useDispatch","closePopup","resetSilhouetteState","useEffect","getAvSilhouettes","getAvMannequins","_jsxs","children","_jsx","MainHead","text","ButtonUI","classN","onClick","type","MainBody","BottomSilhouettesList","PopupUI","callback","NewSilhouette","selectedType","silhouettes","useSelector","availableSilhouettes","editableSilhouette","setEditableSilhouette","silhouetteInfo","setSilhouetteInfo","errors","setErrors","isVisibleRemove","setIsVisibleRemove","removableItem","setRemovableItem","draggableVariant","setDraggableVariant","silhouettesList","setSilhouettesList","useMemo","data","filter","silhouette","onDragOver","e","preventDefault","closePopupRemove","className","HeadingUI","size","length","map","idx","draggable","onDragStart","onDrop","async","fromElement","toElement","copySilhouettes","structuredClone","name","color","appColor","src","concat","BASE_UPLOADS_SILHOUETTES_BOTTOMS_URL","silhouetteurl","alt","editSilhouette","FontAwesomeIcon","icon","faTrash","_id","EditSilhouette","_editableSilhouette$s","formErrors","formValidator","silhouetteFormOptions","Object","keys","newPrint","JSON","parse","stringify","includes","file","image","response","fetch","blob","File","getNewFile","formData","FormData","forEach","key","append","updateSilhouette","then","res","setSilhouetteData","setSilhouette","RemoveSome","header","discardCallback","removeCallback","removeSilhouette"],"sourceRoot":""}