{"version":3,"file":"static/js/2.271d65ba.chunk.js","mappings":"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","sources":["services/sizeService.ts","components/customize/sizes/NewSize.tsx","shared/ui/TabUI/TabUI.tsx","components/customize/sizes/InchOptions.tsx","components/customize/sizes/CmOptions.tsx","components/customize/sizes/EditSize.tsx","components/customize/sizes/SizesList.tsx","components/customize/sizes/CustomizeSizes.tsx"],"sourcesContent":["import { setSizeData } from \"redux/reducers/sizeReducer\"\nimport { getSizes } from \"shared/api/dataApi\"\n\nexport const getAvSizes = (dispatch: any) => {\n    getSizes().then(res => {\n        dispatch(setSizeData(res))\n    }).catch(err => console.log(err))\n}\n","import { ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSizeState, sizeDetails } from 'redux/reducers/sizeReducer';\nimport { ObjectType } from 'shared/helpers/helpers';\nimport { CallbackSkeletonType } from 'shared/objectModels/GenericModel';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport InputUI from 'shared/ui/InputUI/InputUI';\n\ninterface Props {\n    callback: CallbackSkeletonType,\n    errors: ObjectType,\n    closePopup: CallbackSkeletonType\n}\n\nconst NewSize = ({\n    callback,\n    errors,\n    closePopup\n}: Props) => {\n\n    const sDetails = useSelector(sizeDetails)\n    const dispatch = useDispatch()\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        dispatch(setSizeState({ name, value }))\n    }\n\n    return (\n        <form onSubmit={callback} className=\"new-size\">\n            <HeadingUI text=\"Add new size\" align=\"center\" color=\"#aa8a75\" />\n            <div className=\"new-size-inputs\">\n                <InputUI\n                    placeholder=\"Name\"\n                    value={sDetails?.name}\n                    label=\"Name*\"\n                    name=\"name\"\n                    error={errors?.name?.message || ''}\n                    callback={handleInputChange}\n                />\n            </div>\n            <div className=\"new-size-actions\">\n                <ButtonUI onClick={() => closePopup()} version=\"gray\">Close</ButtonUI>\n                <ButtonUI type=\"submit\">Add</ButtonUI>\n            </div>\n        </form>\n    );\n};\n\nexport default NewSize;","import { useEffect, useState } from 'react';\n\nimport './style.scss'\nimport HeadingUI from '../HeadingUI/HeadingUI';\nimport { ArrayType } from 'shared/helpers/helpers';\n\ninterface Props {\n    tabs: ArrayType,\n}\n\nconst TabUI = ({ \n    tabs \n}: Props) => {\n    \n    const [activeTab,setActiveTab] = useState<any>(tabs[0]?.heading)\n\n    return (\n        <div className='TabUI'>\n            <div className=\"TabUI-body\">\n                <div className=\"TabUI-heads\">\n                    {\n                        tabs && tabs.map((tab, index) => {\n                            return <div \n                                    key={tab.id || index} \n                                    className={`TabUI-head ${tab.heading === activeTab ? '_active' : ''}`}\n                                    onClick={() => {\n                                        setActiveTab(tab.heading);\n                                    }}\n                                >\n                                <HeadingUI color='#000' text={tab.heading} size='18px' align='left' />\n                            </div>\n                        })\n                    }\n                </div>\n                <div className=\"TabUI-contents\">\n                    {\n                        tabs && tabs.map((tab, index) => {\n                            return <div key={tab.id || index} className={`TabUI-content ${tab.heading === activeTab ? '_active' : ''}`}>\n                                {tab.content || <HeadingUI color='black' size='16px' text='Nothing to show' />}\n                            </div>\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TabUI;\n","import { ObjectType } from \"shared/helpers/helpers\";\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\n\ninterface Props {\n    size: ObjectType,\n    callback: CallbackSkeletonType,\n}\n\nconst InchOptions = ({\n    size,\n    callback,\n}: Props) => {\n    return (\n        <div className=\"size-options\">\n            <InputUI\n                value={size?.bust_in}\n                label=\"Bust (in)\"\n                name=\"bust_in\"\n                callback={callback}\n                type=\"number\"\n            />\n            <InputUI\n                value={size?.waist_in}\n                label=\"Waist (in)\"\n                name=\"waist_in\"\n                callback={callback}\n                type=\"number\"\n            />\n            <InputUI\n                value={size?.hips_in}\n                label=\"Hips (in)\"\n                name=\"hips_in\"\n                callback={callback}\n                type=\"number\"\n            />\n        </div>\n    );\n};\n\nexport default InchOptions;","import { ObjectType } from \"shared/helpers/helpers\";\nimport { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\n\ninterface Props {\n    size: ObjectType,\n    callback: CallbackSkeletonType,\n}\n\nconst CmOptions = ({\n    size,\n    callback,\n}: Props) => {\n    return (\n        <div className=\"size-options\">\n            <InputUI\n                value={size?.bust_cm}\n                label=\"Bust (cm)\"\n                name=\"bust_cm\"\n                callback={callback}\n                type=\"number\"\n            />\n            <InputUI\n                value={size?.waist_cm}\n                label=\"Waist (cm)\"\n                name=\"waist_cm\"\n                callback={callback}\n                type=\"number\"\n            />\n            <InputUI\n                value={size?.hips_cm}\n                label=\"Hips (cm)\"\n                name=\"hips_cm\"\n                callback={callback}\n                type=\"number\"\n            />\n        </div>\n    );\n};\n\nexport default CmOptions;","import { ChangeEvent } from 'react';\nimport { ObjectType } from 'shared/helpers/helpers';\nimport { CallbackSkeletonType } from 'shared/objectModels/GenericModel';\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport InputUI from 'shared/ui/InputUI/InputUI';\nimport TabUI from 'shared/ui/TabUI/TabUI';\nimport InchOptions from './InchOptions';\nimport CmOptions from './CmOptions';\n\ninterface Props {\n    callback: CallbackSkeletonType,\n    closePopup: CallbackSkeletonType,\n    size: ObjectType,\n    setSize: CallbackSkeletonType,\n    errors: ObjectType,\n    defaultSize: ObjectType\n}\n\nconst EditSize = ({\n    callback,\n    closePopup,\n    size,\n    setSize,\n    errors,\n    defaultSize\n}: Props) => {\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        setSize({ ...size, [name]: value })\n    }\n\n    const SizeOptions = [\n        {\n            id: 'IN',\n            heading: 'Inch',\n            content: <InchOptions size={size} callback={handleInputChange} />\n        },\n        {\n            id: 'CM',\n            heading: 'CM',\n            content: <CmOptions size={size} callback={handleInputChange} />\n        }\n    ]\n\n    return (\n        <div className=\"new-size\">\n            <HeadingUI text={`Edit size ${defaultSize?.size}`} align=\"center\" color=\"#aa8a75\" />\n            <div className=\"new-size-inputs\">\n                <InputUI\n                    placeholder=\"Name\"\n                    value={size?.size}\n                    label=\"Name*\"\n                    name=\"size\"\n                    error={errors?.name?.message || ''}\n                    callback={handleInputChange}\n                />\n                <TabUI tabs={SizeOptions} />\n            </div>\n            <div className=\"new-size-actions\">\n                <ButtonUI onClick={() => closePopup()} version=\"gray\" type='button'>Discard</ButtonUI>\n                <ButtonUI onClick={() => callback()} type=\"button\">Save</ButtonUI>\n            </div>\n        </div>\n    );\n};\n\nexport default EditSize;","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getAvSizes } from \"services/sizeService\";\nimport { updateSize } from \"shared/api/dataApi\";\nimport { ArrayType, ObjectType } from \"shared/helpers/helpers\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { sizeFormOptions } from \"utils/validators/validatorOptions\";\nimport EditSize from \"./EditSize\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencil } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Props {\n    sizes: ArrayType\n}\n\nconst SizesList = ({\n    sizes\n}: Props) => {\n\n    const dispatch = useDispatch()\n\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [editableSize, setEditableSize] = useState<ObjectType>({})\n    const [sizeInfo, setSizeInfo] = useState<ObjectType>({})\n    const [errors, setErrors] = useState<ObjectType>({})\n    \n    const editSize = (size: ObjectType) => {\n        if (size) {\n            setEditableSize(size)\n            setSizeInfo(size)\n            setIsVisible(true)   \n        }\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        setEditableSize({})\n        setSizeInfo({})\n        setErrors({})\n    }\n\n    const saveSize = async () => {\n        const activeSize = sizes?.find(size => size._id === editableSize._id) || undefined\n        const errors = formValidator(editableSize, sizeFormOptions);\n        if (errors) {return setErrors(errors)};\n        if (Object.keys(errors).length) {setErrors({})};\n        if (activeSize && JSON.stringify(editableSize) !== JSON.stringify(activeSize) ) {\n            await updateSize(editableSize)\n            await getAvSizes(dispatch)\n        } \n        closePopup()\n    }\n\n    return (\n        <div className=\"sizes-list\">\n            {sizes?.map((size: ObjectType) => {\n                return <div className=\"sizes-list-size\" key={size._id}>\n                    <HeadingUI classN=\"size-text _ellipsis\" text={size.size} size=\"18px\" />\n                    <ButtonUI classN=\"size-button\" onClick={() => editSize(size)}><FontAwesomeIcon icon={faPencil} /></ButtonUI>\n                </div>\n            })}\n            {isVisible && <PopupUI callback={closePopup}>\n                <EditSize\n                    callback={saveSize}\n                    closePopup={closePopup}\n                    size={editableSize}\n                    defaultSize={sizeInfo}\n                    errors={errors}\n                    setSize={setEditableSize}\n                />\n            </PopupUI>}\n        </div>\n    );\n};\n\nexport default SizesList;","import MainBody from \"layout/MainBody/MainBody\";\nimport MainHead from \"layout/MainHead/MainHead\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { availableSizes, resetSizeState, sizeDetails } from \"redux/reducers/sizeReducer\";\nimport { getAvSizes } from \"services/sizeService\";\nimport { addSize } from \"shared/api/dataApi\";\nimport { ObjectType } from \"shared/helpers/helpers\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport PopupUI from \"shared/ui/PopupUI/PopupUI\";\nimport { formValidator } from \"utils/validators/validator\";\nimport { sizeFormOptions } from \"utils/validators/validatorOptions\";\nimport NewSize from \"./NewSize\";\nimport SizesList from \"./SizesList\";\nimport './style.scss'\n\nconst CustomizeSizes = () => {\n\n    const dispatch = useDispatch()\n    const sizes = useSelector(availableSizes)\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const sDetails = useSelector(sizeDetails)\n    const [errors, setErrors] = useState<ObjectType>({})\n\n    useEffect(() => {\n        getAvSizes(dispatch)\n    }, [])\n\n    const addNewSize = async (e: HTMLFormElement) => {\n        e.preventDefault()\n        const errors = formValidator(sDetails, sizeFormOptions);\n        if (errors) { return setErrors(errors) };\n        if (Object.keys(errors).length) { setErrors({}) };\n        await addSize(sDetails)\n        await getAvSizes(dispatch)\n        closePopup()\n    }\n\n    const closePopup = () => {\n        setIsVisible(false)\n        dispatch(resetSizeState())\n        setErrors({})\n    }\n\n    return (\n        <div className=\"customize-size\">\n            <MainHead text=\"Customize Sizes\" />\n            <ButtonUI classN=\"add-button\" onClick={() => setIsVisible(true)} type=\"button\">New Size</ButtonUI>\n            <MainBody>\n                <div className=\"sizes-default-list\">\n                    <HeadingUI text=\"Sizes List\" size=\"22px\" />\n                    {sizes?.length ? <SizesList sizes={sizes} /> : null}\n                </div>\n                {isVisible && <PopupUI callback={closePopup}>\n                    <NewSize\n                        callback={addNewSize}\n                        closePopup={closePopup}\n                        errors={errors}\n                    />\n                </PopupUI>}\n            </MainBody>\n        </div>\n    );\n};\n\nexport default CustomizeSizes;"],"names":["getAvSizes","dispatch","getSizes","then","res","setSizeData","catch","err","console","log","_ref","_errors$name","callback","errors","closePopup","sDetails","useSelector","sizeDetails","useDispatch","_jsxs","onSubmit","className","children","_jsx","HeadingUI","text","align","color","InputUI","placeholder","value","name","label","error","message","event","target","setSizeState","ButtonUI","onClick","version","type","_tabs$","tabs","activeTab","setActiveTab","useState","heading","map","tab","index","concat","size","id","content","bust_in","waist_in","hips_in","bust_cm","waist_cm","hips_cm","setSize","defaultSize","handleInputChange","SizeOptions","InchOptions","CmOptions","TabUI","sizes","isVisible","setIsVisible","editableSize","setEditableSize","sizeInfo","setSizeInfo","setErrors","classN","editSize","FontAwesomeIcon","icon","faPencil","_id","PopupUI","EditSize","async","activeSize","find","undefined","formValidator","sizeFormOptions","Object","keys","length","JSON","stringify","updateSize","CustomizeSizes","availableSizes","useEffect","resetSizeState","MainHead","MainBody","SizesList","NewSize","e","preventDefault","addSize"],"sourceRoot":""}