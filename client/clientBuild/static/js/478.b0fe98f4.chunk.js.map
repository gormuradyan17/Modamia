{"version":3,"file":"static/js/478.b0fe98f4.chunk.js","mappings":"mOAsBA,MAiFA,EAjFqBA,KACnB,MAAMC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,GAAWC,EAAAA,EAAAA,OACVC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,QAEjCC,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,IAAoBN,IACpBO,EAAAA,EAAAA,IAAoBP,EAAS,GAE5B,IA4BH,OALAK,EAAAA,EAAAA,YAAU,KACRL,GAASQ,EAAAA,EAAAA,IAAiBN,GAAM,GAEhC,CAACA,KAGDO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAzBlB,CACX,CACEE,GAAI,EACJC,cAAe,WACfZ,KAAM,OAER,CACEW,GAAI,EACJC,cAAe,MACfZ,KAAM,OAER,CACEW,GAAI,EACJC,cAAe,SACfZ,KAAM,WAYEa,KAAKC,IACTJ,EAAAA,EAAAA,KAACK,EAAAA,EAAQ,CACPC,QAAQ,OAERC,QAASA,IAAMhB,EAAQa,EAAId,MAC3BkB,OAAQlB,IAAOc,EAAId,KAAO,SAAW,GAAGS,SAEvCK,EAAIF,eAJAE,EAAIH,SAQfD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iCAAgCC,SAC/B,OAAbd,QAAa,IAAbA,OAAa,EAAbA,EAAewB,OAAON,KAAKO,IAAuB,IAADC,EAChD,MAAM,KACJC,EAAO,GAAE,QACTC,EAAU,GAAE,IACZC,EAAM,KACC,OAALJ,QAAK,IAALA,GAAa,QAARC,EAALD,EAAOD,cAAM,IAAAE,OAAR,EAALA,EAAgB,KAAM,CAAC,EACrBI,EAA4B,CAChC,cAAeF,GAEjB,OACEhB,EAAAA,EAAAA,MAAA,OACEC,UAAS,uBAAAkB,OAAyBJ,GAElCL,QAASA,IAtDMM,KACzBzB,GAAS6B,EAAAA,EAAAA,IAAeJ,GAAS,EAqDRK,CAAkBL,GAASd,SAAA,EAE1CC,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACRX,OAAO,uBACPY,KAAMR,EACNS,KAAK,UAEPrB,EAAAA,EAAAA,KAAA,QAAMF,UAAU,aAAaiB,MAAOA,MAR/BD,EASD,QAIR,C,6EC/FH,MAAMQ,EAAc,SAAClC,GAA+D,IAAhDmC,EAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAC/EI,EAAAA,EAAAA,IAAU,CACNC,aAAcN,EACdI,YACDG,MAAKC,IACJ3C,GAAS4C,EAAAA,EAAAA,IAAaD,GAAK,IAC5BE,OAAMC,GAAOC,QAAQC,IAAIF,IAChC,EAEavC,EAAsB,SAACP,GAAyC,IAA1BuC,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACjEa,EAAAA,EAAAA,IAAkB,CAACV,YAAUG,MAAKC,IAC9B3C,GAASkD,EAAAA,EAAAA,IAAsBP,GAAK,IACrCE,OAAMC,GAAOC,QAAQC,IAAIF,IAChC,EAEaxC,EAAsB,SAACN,GAAyC,IAA1BuC,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACjEe,EAAAA,EAAAA,IAAkB,CAACZ,YAAUG,MAAKC,IAC9B3C,GAASoD,EAAAA,EAAAA,IAAsBT,GAAK,IACrCE,OAAMC,GAAOC,QAAQC,IAAIF,IAChC,C","sources":["components/Customization/contents/ColorContent/ColorContent.tsx","services/colorService.ts"],"sourcesContent":["import { CSSProperties, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  activePaletteItem,\n} from \"redux/reducers/colorReducer\";\nimport {\n  getAvColorsPalettes,\n  getAvColorsVariants,\n} from \"services/colorService\";\nimport { ObjectType } from \"shared/helpers/helpers\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport \"./style.scss\";\nimport {\n  setActiveColor,\n  setMannequinType,\n} from \"redux/reducers/mannequinReducer\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\n\ninterface colorFillInterface extends CSSProperties {\n  \"--colorFill\": string;\n}\n\nconst ColorContent = () => {\n  const activePalette = useSelector(activePaletteItem);\n  const dispatch = useDispatch();\n  const [type, setType] = useState(\"all\");\n\n  useEffect(() => {\n    getAvColorsPalettes(dispatch);\n    getAvColorsVariants(dispatch);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const updateActiveColor = (hexcode: string) => {\n    dispatch(setActiveColor(hexcode));\n  };\n  const btns = [\n    {\n      id: 1,\n      colorPosition: \"All over\",\n      type: \"all\",\n    },\n    {\n      id: 2,\n      colorPosition: \"Top\",\n      type: \"top\",\n    },\n    {\n      id: 3,\n      colorPosition: \"Bottom\",\n      type: \"bottom\",\n    },\n  ];\n \n  useEffect(() => {    \n    dispatch(setMannequinType(type));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[type]);\n\n  return (\n    <div className=\"color-content-body\">\n      <div className=\"btnContent\">\n        {btns.map((opt) => (\n          <ButtonUI\n            version=\"gray\"\n            key={opt.id}\n            onClick={() => setType(opt.type)}\n            classN={type===opt.type ? \"active\" : \"\"}\n          >\n            {opt.colorPosition}\n          </ButtonUI>\n        ))}\n      </div>\n      <div className=\"color-content customYScrollbar\">\n        {activePalette?.colors.map((color: ObjectType) => {\n          const {\n            name = \"\",\n            hexcode = \"\",\n            _id = \"\",\n          } = color?.colors?.[0] || {};\n          const style: colorFillInterface = {\n            \"--colorFill\": hexcode,\n          };\n          return (\n            <div\n              className={`color-content-color ${name}`}\n              key={_id}\n              onClick={() => updateActiveColor(hexcode)}\n            >\n              <HeadingUI\n                classN=\"color-text _ellipsis\"\n                text={name}\n                size=\"16px\"\n              />\n              <span className=\"color-span\" style={style}></span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ColorContent;\n","import { setColorData, setColorsPalettesData, setColorsVariantsData } from \"redux/reducers/colorReducer\"\nimport { getColors, getColorsPalettes, getColorsVariants } from \"shared/api/dataApi\"\n\n\nexport const getAvColors = (dispatch: any, variant: string = '', user_id: string = '') => {\n    getColors({\n        colorVariant: variant,\n        user_id\n    }).then(res => {\n        dispatch(setColorData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvColorsVariants = (dispatch: any, user_id: string = '') => {\n    getColorsVariants({user_id}).then(res => {\n        dispatch(setColorsVariantsData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvColorsPalettes = (dispatch: any, user_id: string = '') => {\n    getColorsPalettes({user_id}).then(res => {\n        dispatch(setColorsPalettesData(res))\n    }).catch(err => console.log(err))\n}"],"names":["ColorContent","activePalette","useSelector","activePaletteItem","dispatch","useDispatch","type","setType","useState","useEffect","getAvColorsPalettes","getAvColorsVariants","setMannequinType","_jsxs","className","children","_jsx","id","colorPosition","map","opt","ButtonUI","version","onClick","classN","colors","color","_color$colors","name","hexcode","_id","style","concat","setActiveColor","updateActiveColor","HeadingUI","text","size","getAvColors","variant","arguments","length","undefined","user_id","getColors","colorVariant","then","res","setColorData","catch","err","console","log","getColorsVariants","setColorsVariantsData","getColorsPalettes","setColorsPalettesData"],"sourceRoot":""}