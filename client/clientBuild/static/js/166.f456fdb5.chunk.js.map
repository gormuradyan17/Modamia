{"version":3,"file":"static/js/166.f456fdb5.chunk.js","mappings":"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","sources":["components/Customization/contents/SilhouetteContent/SilhouetteCntrlHolder.tsx","components/Customization/contents/SilhouetteContent/SilhouetteClothes/index.tsx","components/Customization/contents/SilhouetteContent/SilhouetteContentTabs/index.tsx","components/Customization/contents/SilhouetteContent/SilhouetteContent.tsx","services/silhouetteService.ts","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx"],"sourcesContent":["import React from 'react'\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\n\ninterface Props{\n    cntrlData:Array<{_id:string,type:string}>,\n    setKindSilhouette:any\n}\nconst SilhouetteCntrlHolder:React.FC<Props>=({cntrlData,setKindSilhouette})=> {\n  return (\n    <div className='btn_container'>\n        {Boolean( Object.keys(cntrlData).length) && \n         Object.keys(cntrlData).map((option,index)=>(\n            <ButtonUI key={index} version='gray' onClick={()=>setKindSilhouette(option)}>{option}</ButtonUI>\n       )) }\n    </div>\n  )\n}\n\nexport default SilhouetteCntrlHolder;","\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setMannequinType, setMannequinUrl } from \"redux/reducers/mannequinReducer\";\nimport { BASE_UPLOADS_SILHOUETTES_URL } from \"shared/constants/genericApiRoutes\";\n\nexport default function SilhouetteClothes({ data, type }: any) {\n  const [activeImageUrl, setActiveImageUrl] = useState<string>()\n  const [activeType, setActiveType] = useState<string>(type)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setMannequinUrl(activeImageUrl))\n    dispatch(setMannequinType(activeType))\n  }, [activeImageUrl, activeType])\n\n  return (\n    <div className=\"clothes_content customXScrollbar\">\n      {data && Boolean(data.length) ? data.map((clothes: any) => (\n        <div className={`clothes_item ${type === \"tops\" ? \"clothes_tops\" : \"clothes_bottoms\"}`}\n          onClick={() => {\n            setActiveImageUrl(`${BASE_UPLOADS_SILHOUETTES_URL}${type}/${clothes.silhouetteurl}`)\n            setActiveType(type)\n          }}>\n          <img key={clothes._id} src={`${BASE_UPLOADS_SILHOUETTES_URL}${type}/${clothes.silhouetteurl}`} alt=\"\" />\n        </div>\n      )): null}\n    </div>\n  )\n}\n","import SilhouetteClothes from \"../SilhouetteClothes\";\ninterface Props{\n    silhouettesData:[]\n}\n\nconst SilhouetteContentTabs:React.FC<Props>=({silhouettesData})=>{\n   const topData=silhouettesData && silhouettesData.length && silhouettesData.filter((silhouettes:any)=>silhouettes.type===\"Top\" && silhouettes.type )\n   const bottomData=silhouettesData && silhouettesData.length && silhouettesData.filter((silhouettes:any)=>silhouettes.type===\"Bottom\" && silhouettes.type )\n   \n   return(\n    <>\n         <SilhouetteClothes data={topData} type=\"tops\" />\n         <SilhouetteClothes data={bottomData} type=\"bottoms\"/>\n    </>\n   )\n}\n\nexport default SilhouetteContentTabs;","import {useEffect,useState} from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { availableSilhouettes } from \"redux/reducers/silhouetteReducer\";\nimport { getAvSilhouettes } from \"services/silhouetteService\";\nimport SilhouetteCntrlHolder from \"./SilhouetteCntrlHolder\";\nimport './style.scss'\nimport SilhouetteContentTabs from \"./SilhouetteContentTabs\";\n\nconst SilhouetteContent = () => {\n    const silhouettes = useSelector(availableSilhouettes)\n    const [kindSilhouette,setKindSilhouette]=useState(\"front\")\n\nconst dispatch=useDispatch()\n    useEffect(() => {\n        getAvSilhouettes(dispatch)\n    }, [])\n\n\n    return (\n        <div id=\"customization\">\n            <div className=\"cntrlHolderrowtop\">\n            <SilhouetteCntrlHolder cntrlData={silhouettes} setKindSilhouette={setKindSilhouette}/>\n            <SilhouetteContentTabs silhouettesData={silhouettes[kindSilhouette]}/>\n            </div>\n        </div>\n    );\n};\n\nexport default SilhouetteContent;","import { setSilhouetteData } from \"redux/reducers/silhouetteReducer\"\nimport { getSilhouettes, getSilhouettesByTypes } from \"shared/api/dataApi\"\n\n\nexport const getAvSilhouettes = (dispatch: any) => {\n    getSilhouettesByTypes().then(res => {\n        dispatch(setSilhouetteData(res))\n    }).catch(err => console.log(err))\n}","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}"],"names":["_ref","cntrlData","setKindSilhouette","_jsx","className","children","Boolean","Object","keys","length","map","option","index","ButtonUI","version","onClick","SilhouetteClothes","data","type","activeImageUrl","setActiveImageUrl","useState","activeType","setActiveType","dispatch","useDispatch","useEffect","setMannequinUrl","setMannequinType","clothes","concat","BASE_UPLOADS_SILHOUETTES_URL","silhouetteurl","src","alt","_id","silhouettesData","topData","filter","silhouettes","bottomData","_jsxs","_Fragment","SilhouetteContent","useSelector","availableSilhouettes","kindSilhouette","getSilhouettesByTypes","then","res","setSilhouetteData","catch","err","console","log","getAvSilhouettes","id","SilhouetteCntrlHolder","SilhouetteContentTabs","CallbackSkeletonValue","classN","versions","default","red","orange","blue","green","gray","disabled","isLoading","buttonProps","event","LoaderCircleUI"],"sourceRoot":""}