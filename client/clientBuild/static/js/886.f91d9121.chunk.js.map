{"version":3,"file":"static/js/886.f91d9121.chunk.js","mappings":"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","sources":["pages/Recovery/Recovery.tsx","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx","shared/ui/InputUI/InputUI.tsx"],"sourcesContent":["import signinBG from \"../../assets/images/singin.gif\"\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport \"./style.scss\"\nimport { useSelector } from \"react-redux\";\nimport { isLogged } from \"redux/reducers/userReducer\";\nimport { Navigate, useNavigate, useParams } from \"react-router-dom\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport { ObjectType, eraseCookie, getCookie } from \"shared/helpers/helpers\";\nimport { recPassword, sendForgotPassword } from \"services/userService\";\n\nconst Recovery = () => {\n    const isAuth = useSelector(isLogged)\n    const params = useParams()\n    const navigate = useNavigate()\n    const [data, setData] = useState<ObjectType>({\n        password: '',\n        confirm: '',\n        code: params?.code\n    })\n    const [errors, setErrors] = useState<ObjectType>({\n        password: '',\n        confirm: '',\n        code: ''\n    })\n    \n    useEffect(() => {\n        return () => {\n            eraseCookie('_s_pa')\n        }\n    },[])\n    \n    if (isAuth) return <Navigate to='/home' />\n    if (!getCookie('_s_pa')) return <Navigate to='/signin' />\n\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        setData({\n            ...data, \n            [name]: value\n        })\n    }\n    const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (data.password && data.confirm && data.code) {\n            const response = await recPassword(data, setErrors)\n            if (response) {\n                if (getCookie('_s_pa')) eraseCookie('_s_pa')\n                navigate('/signin')\n            }\n        }\n    }\n\n    return (\n        <div className='signin_container'>\n            <img src={signinBG} alt=\"\" />\n            <div className='signin_text_block'>\n                <HeadingUI text='Change password' color='#a57867' size='40px' />\n                <form action=\"\" onSubmit={onSubmit}>\n                    <InputUI\n                        type=\"password\"\n                        placeholder=\"password\"\n                        callback={handleInputChange}\n                        name=\"password\"\n                        value={data?.password}\n                        error={errors?.password}\n                    />\n                    <InputUI\n                        type=\"password\"\n                        placeholder=\"confirm password\"\n                        callback={handleInputChange}\n                        name=\"confirm\"\n                        value={data.confirm}\n                        error={errors?.confirm || errors?.code} />\n                    <ButtonUI type=\"submit\">Change Password</ButtonUI>\n                </form>\n            </div>\n        </div>\n\n    );\n};\n\nexport default Recovery;","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport './style.scss'\nimport { useEffect } from \"react\";\n\ninterface Props {\n    value?: string,\n    placeholder?: string,\n    type?: string,\n    callback: CallbackSkeletonType,\n    label?: string,\n    name?: string,\n    error?: string,\n    autoComplete?: string,\n    classN?: string,\n    disabled?: boolean,\n    defaultChecked?: boolean,\n}\n\nconst InputUI = ({\n    value = '',\n    placeholder = '',\n    type = 'text',\n    callback,\n    label = '',\n    name,\n    error,\n    autoComplete = '',\n    classN = '',\n    disabled = false,\n    defaultChecked = false\n}: Props) => {\n    // const refInput = useRef<HTMLInputElement | null>(null)\n    // const refSpan = useRef<HTMLInputElement | null>(null)\n\n    // useEffect(() => {\n    //     if (error && refInput?.current && refSpan?.current) {\n    //         refInput.current.classList.add('_errorShake')\n    //         refSpan.current.classList.add('_errorShake')\n    //         setTimeout(() => {\n    //             refInput?.current?.classList.remove('_errorShake')\n    //             refSpan?.current?.classList.remove('_errorShake')\n    //         }, 500);\n    //     }\n\n    //     return () => {\n    //         refInput?.current?.classList.remove('_errorShake')\n    //         refSpan?.current?.classList.remove('_errorShake')\n    //     }\n    // },[error])\n\n    return (\n        <div className={`InputUI ${classN}`}>\n            {label && <label \n                className=\"InputUI__label\"\n                htmlFor={`InputUI-${name}`}>\n                {label}\n            </label>}\n            {error && <span className=\"error-message\">{error}</span>}\n            <input \n                className={`InputUI__input${error ? ' _error' : ''}${disabled ? ' _disabled' : ''}`}\n                id={`InputUI-${name}`}\n                name={name}\n                type={type}\n                onChange={(event) => !disabled && callback(event)}\n                {...(type === 'checkbox' ? {checked: defaultChecked} : {value})}\n                {...(autoComplete) && {autoComplete}}\n                {...(placeholder && {placeholder})}\n            />\n        </div>\n    );\n};\n\nexport default InputUI;"],"names":["Recovery","isAuth","useSelector","isLogged","params","useParams","navigate","useNavigate","data","setData","useState","password","confirm","code","errors","setErrors","useEffect","eraseCookie","_jsx","Navigate","to","getCookie","handleInputChange","event","target","name","value","_jsxs","className","children","src","signinBG","alt","HeadingUI","text","color","size","action","onSubmit","async","e","preventDefault","recPassword","InputUI","type","placeholder","callback","error","ButtonUI","CallbackSkeletonValue","_ref","classN","concat","versions","default","red","orange","blue","green","gray","version","disabled","isLoading","onClick","buttonProps","LoaderCircleUI","label","autoComplete","defaultChecked","htmlFor","id","onChange","checked"],"sourceRoot":""}