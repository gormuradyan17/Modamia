{"version":3,"file":"static/js/929.4ea2bcf5.chunk.js","mappings":"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","sources":["pages/Signin/Signin.tsx","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx","shared/ui/InputUI/InputUI.tsx"],"sourcesContent":["import signinBG from \"assets/images/singin.gif\"\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport \"./style.scss\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUserState, isLogged, setIsLogged, setUserState } from \"redux/reducers/userReducer\";\nimport { Link, Navigate, useNavigate } from \"react-router-dom\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport { ChangeEvent, FormEvent, useState } from \"react\";\nimport { ObjectType, setCookie } from \"shared/helpers/helpers\";\nimport { authUserSignin } from \"services/userService\";\nimport { SIGNIN_SHOPIFY_URL } from \"shared/constants/genericApiRoutes\";\nconst Signin = () => {\n    const dispatch = useDispatch()\n    const isAuth = useSelector(isLogged)\n    const userData = useSelector(getUserState)\n    const navigate = useNavigate()\n    const [errors, setErrors] = useState<ObjectType>({\n        password: '',\n        email: ''\n    })\n    if (isAuth) return <Navigate to='/home' />\n    \n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { name, value } } = event\n        dispatch(setUserState({ name, value }))\n    }\n    const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const response: any = await authUserSignin(userData, setErrors);\n        if (response?.accessToken) {\n            setCookie('accessToken', response.accessToken, 365)\n            dispatch(setIsLogged(true));\n            navigate('/home');\n        }\n    }\n\n    const signinViaShopify = () => {\n        window.open(SIGNIN_SHOPIFY_URL)\n    }\n\n    return (\n        <div className='signin_container'>\n            <img src={signinBG} alt=\"\" />\n            <div className='signin_text_block'>\n                <HeadingUI text='Sign in' color='#a57867' size='40px' />\n                <form action=\"\" onSubmit={onSubmit}>\n                    <InputUI type=\"text\" placeholder=\"email\" callback={handleInputChange} name=\"email\" value={userData?.email} error={errors?.email} />\n                    <InputUI type=\"password\" placeholder=\"password\" callback={handleInputChange} name=\"password\" value={userData?.password}\n                        error={errors?.password} />\n                    <ButtonUI type=\"submit\">Sign in</ButtonUI>\n                </form>\n                <div className=\"signin_container-shopify\">\n                    <HeadingUI text='or' size='18px' color=\"gray\" align=\"center\" />\n                    <ButtonUI version=\"gray\" onClick={signinViaShopify}>SignIn Via Shopify</ButtonUI>\n                </div>\n                <Link className=\"forgot-password\" to='/forgot'>Cant Remember password?</Link>\n            </div>\n        </div>\n\n    );\n};\n\nexport default Signin;","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","import './style.scss'\n\ninterface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN ? classN : ''}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport './style.scss'\nimport { useEffect } from \"react\";\n\ninterface Props {\n    value?: string,\n    placeholder?: string,\n    type?: string,\n    callback: CallbackSkeletonType,\n    label?: string,\n    name?: string,\n    error?: string,\n    autoComplete?: string,\n    classN?: string,\n    disabled?: boolean,\n    defaultChecked?: boolean,\n}\n\nconst InputUI = ({\n    value = '',\n    placeholder = '',\n    type = 'text',\n    callback,\n    label = '',\n    name,\n    error,\n    autoComplete = '',\n    classN = '',\n    disabled = false,\n    defaultChecked = false\n}: Props) => {\n    // const refInput = useRef<HTMLInputElement | null>(null)\n    // const refSpan = useRef<HTMLInputElement | null>(null)\n\n    // useEffect(() => {\n    //     if (error && refInput?.current && refSpan?.current) {\n    //         refInput.current.classList.add('_errorShake')\n    //         refSpan.current.classList.add('_errorShake')\n    //         setTimeout(() => {\n    //             refInput?.current?.classList.remove('_errorShake')\n    //             refSpan?.current?.classList.remove('_errorShake')\n    //         }, 500);\n    //     }\n\n    //     return () => {\n    //         refInput?.current?.classList.remove('_errorShake')\n    //         refSpan?.current?.classList.remove('_errorShake')\n    //     }\n    // },[error])\n\n    return (\n        <div className={`InputUI ${classN}`}>\n            {label && <label \n                className=\"InputUI__label\"\n                htmlFor={`InputUI-${name}`}>\n                {label}\n            </label>}\n            {error && <span className=\"error-message\">{error}</span>}\n            <input \n                className={`InputUI__input${error ? ' _error' : ''}${disabled ? ' _disabled' : ''}`}\n                id={`InputUI-${name}`}\n                name={name}\n                type={type}\n                onChange={(event) => !disabled && callback(event)}\n                {...(type === 'checkbox' ? {checked: defaultChecked} : {value})}\n                {...(autoComplete) && {autoComplete}}\n                {...(placeholder && {placeholder})}\n            />\n        </div>\n    );\n};\n\nexport default InputUI;"],"names":["Signin","dispatch","useDispatch","isAuth","useSelector","isLogged","userData","getUserState","navigate","useNavigate","errors","setErrors","useState","password","email","_jsx","Navigate","to","handleInputChange","event","target","name","value","setUserState","_jsxs","className","children","src","signinBG","alt","HeadingUI","text","color","size","action","onSubmit","async","e","preventDefault","response","authUserSignin","accessToken","setCookie","setIsLogged","InputUI","type","placeholder","callback","error","ButtonUI","align","version","onClick","signinViaShopify","window","open","SIGNIN_SHOPIFY_URL","Link","CallbackSkeletonValue","_ref","classN","concat","versions","default","red","orange","blue","green","gray","disabled","isLoading","buttonProps","LoaderCircleUI","label","autoComplete","defaultChecked","htmlFor","id","onChange","checked"],"sourceRoot":""}