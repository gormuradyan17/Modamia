{"version":3,"file":"static/js/543.474ce06d.chunk.js","mappings":"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","sources":["components/Customization/customizationLoader/CustomizationLoader.tsx","pages/Forgot/Forgot.tsx","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx","shared/ui/InputUI/InputUI.tsx"],"sourcesContent":["import './style.scss'\n\ninterface Props {\n    classN?: string\n}\n\nconst CustomizationLoader = ({\n    classN = ''\n}: Props) => {\n    return (\n        <div className={`customization-body-loader ${classN}`}>\n            <svg fill=\"none\" className=\"customization-body-svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle className=\"circle\" cx=\"50\" cy=\"50\" r=\"45\" />\n            </svg>\n        </div>\n    );\n};\n\nexport default CustomizationLoader;","import signinBG from \"../../assets/images/singin.gif\"\nimport { ButtonUI } from 'shared/ui/ButtonUI/ButtonUI';\nimport HeadingUI from 'shared/ui/HeadingUI/HeadingUI';\nimport \"./style.scss\"\nimport { useSelector } from \"react-redux\";\nimport { isLogged } from \"redux/reducers/userReducer\";\nimport { Navigate } from \"react-router-dom\";\nimport InputUI from \"shared/ui/InputUI/InputUI\";\nimport { ChangeEvent, FormEvent, useState } from \"react\";\nimport { ObjectType, appColor, setCookie } from \"shared/helpers/helpers\";\nimport { sendForgotPassword } from \"services/userService\";\nimport CustomizationLoader from \"components/Customization/customizationLoader/CustomizationLoader\";\nconst Forgot = () => {\n    const isAuth = useSelector(isLogged)\n    const [isMailSent, setIsMailSent] = useState<boolean>(false)\n    const [email, setEmail] = useState<string>('')\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n    const [errors, setErrors] = useState<ObjectType>({\n        email: ''\n    })\n    if (isAuth) return <Navigate to='/home' />\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { target: { value } } = event\n        setEmail(value)\n    }\n    const onSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (email) {\n            setIsLoading(true)\n            const response = await sendForgotPassword({ email }, setErrors)\n            if (response) {\n                setIsMailSent(true)\n                setCookie('_s_pa', 'p0JjNMzD0KS3K8]/TBb6TfV%)GLY]8', 1)\n                setIsLoading(false)\n            } else {\n                setIsLoading(false)\n            }\n            \n        }\n    }\n\n    return (\n        <div className='signin_container'>\n            <img src={signinBG} alt=\"\" />\n            <div className='signin_text_block'>\n                <HeadingUI text='Password recovery' color='#a57867' size='40px' />\n                {isMailSent ? <HeadingUI\n                    size=\"16px\"\n                    color={appColor}\n                    classN=\"recovery-text\"\n                    align=\"center\"\n                    text=\"The recovery email sent successfully! Please check your email.\"\n                /> : <form action=\"\" onSubmit={onSubmit}>\n                    <InputUI type=\"text\" placeholder=\"email\" callback={handleInputChange} name=\"email\" value={email} error={errors?.email} />\n                    <ButtonUI type=\"submit\">Send email</ButtonUI>\n                </form>}\n                {isLoading && <CustomizationLoader classN='forgot-loader' />}\n            </div>\n        </div>\n\n    );\n};\n\nexport default Forgot;","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}","import { CallbackSkeletonType } from \"shared/objectModels/GenericModel\";\nimport './style.scss'\nimport { useEffect } from \"react\";\n\ninterface Props {\n    value?: string,\n    placeholder?: string,\n    type?: string,\n    callback: CallbackSkeletonType,\n    label?: string,\n    name?: string,\n    error?: string,\n    autoComplete?: string,\n    classN?: string,\n    disabled?: boolean,\n    defaultChecked?: boolean,\n}\n\nconst InputUI = ({\n    value = '',\n    placeholder = '',\n    type = 'text',\n    callback,\n    label = '',\n    name,\n    error,\n    autoComplete = '',\n    classN = '',\n    disabled = false,\n    defaultChecked = false\n}: Props) => {\n    // const refInput = useRef<HTMLInputElement | null>(null)\n    // const refSpan = useRef<HTMLInputElement | null>(null)\n\n    // useEffect(() => {\n    //     if (error && refInput?.current && refSpan?.current) {\n    //         refInput.current.classList.add('_errorShake')\n    //         refSpan.current.classList.add('_errorShake')\n    //         setTimeout(() => {\n    //             refInput?.current?.classList.remove('_errorShake')\n    //             refSpan?.current?.classList.remove('_errorShake')\n    //         }, 500);\n    //     }\n\n    //     return () => {\n    //         refInput?.current?.classList.remove('_errorShake')\n    //         refSpan?.current?.classList.remove('_errorShake')\n    //     }\n    // },[error])\n\n    return (\n        <div className={`InputUI ${classN}`}>\n            {label && <label \n                className=\"InputUI__label\"\n                htmlFor={`InputUI-${name}`}>\n                {label}\n            </label>}\n            {error && <span className=\"error-message\">{error}</span>}\n            <input \n                className={`InputUI__input${error ? ' _error' : ''}${disabled ? ' _disabled' : ''}`}\n                id={`InputUI-${name}`}\n                name={name}\n                type={type}\n                onChange={(event) => !disabled && callback(event)}\n                {...(type === 'checkbox' ? {checked: defaultChecked} : {value})}\n                {...(autoComplete) && {autoComplete}}\n                {...(placeholder && {placeholder})}\n            />\n        </div>\n    );\n};\n\nexport default InputUI;"],"names":["_ref","classN","_jsx","className","concat","children","fill","viewBox","xmlns","cx","cy","r","Forgot","isAuth","useSelector","isLogged","isMailSent","setIsMailSent","useState","email","setEmail","isLoading","setIsLoading","errors","setErrors","Navigate","to","_jsxs","src","signinBG","alt","HeadingUI","text","color","size","appColor","align","action","onSubmit","async","e","preventDefault","sendForgotPassword","setCookie","InputUI","type","placeholder","callback","event","target","value","name","error","ButtonUI","CustomizationLoader","CallbackSkeletonValue","versions","default","red","orange","blue","green","gray","version","disabled","onClick","buttonProps","LoaderCircleUI","label","autoComplete","defaultChecked","htmlFor","id","onChange","checked"],"sourceRoot":""}