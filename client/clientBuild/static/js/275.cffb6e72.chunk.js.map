{"version":3,"file":"static/js/275.cffb6e72.chunk.js","mappings":"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","sources":["components/Customization/contents/ColorContent/ColorContent.tsx","services/colorService.ts","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx"],"sourcesContent":["import { CSSProperties, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  activePaletteItem,\n} from \"redux/reducers/colorReducer\";\nimport {\n  getAvColorsPalettes,\n  getAvColorsVariants,\n} from \"services/colorService\";\nimport { ObjectType } from \"shared/helpers/helpers\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport \"./style.scss\";\nimport {\n  setActiveColor,\n  setMannequinType,\n} from \"redux/reducers/mannequinReducer\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\n\ninterface colorFillInterface extends CSSProperties {\n  \"--colorFill\": string;\n}\n\nconst ColorContent = () => {\n  const activePalette = useSelector(activePaletteItem);\n  const dispatch = useDispatch();\n  const [type, setType] = useState(\"all\");\n\n\n  useEffect(() => {\n    getAvColorsPalettes(dispatch);\n    getAvColorsVariants(dispatch);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const updateActiveColor = (hexcode: string) => {\n    dispatch(setActiveColor(hexcode));\n  };\n  const btns = [\n    {\n      id: 1,\n      colorPosition: \"All over\",\n      type: \"all\",\n    },\n    {\n      id: 2,\n      colorPosition: \"Top\",\n      type: \"top\",\n    },\n    {\n      id: 3,\n      colorPosition: \"Bottom\",\n      type: \"bottom\",\n    },\n  ];\n \n  useEffect(() => {    \n    dispatch(setMannequinType(type));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[type]);\n\n  return (\n    <div className=\"color-content-body\">\n      <div className=\"btnContent\">\n        {btns.map((opt) => (\n          <ButtonUI\n            version=\"gray\"\n            key={opt.id}\n            onClick={() => setType(opt.type)}\n            classN={type===opt.type ? \"active\" : \"\"}\n          >\n            {opt.colorPosition}\n          </ButtonUI>\n        ))}\n      </div>\n      <div className=\"color-content customYScrollbar\">\n        {activePalette?.colors.map((color: ObjectType) => {\n          const {\n            name = \"\",\n            hexcode = \"\",\n            _id = \"\",\n          } = color?.colors?.[0] || {};\n          const style: colorFillInterface = {\n            \"--colorFill\": hexcode,\n          };\n          return (\n            <div\n              className={`color-content-color ${name}`}\n              key={_id}\n              onClick={() => updateActiveColor(hexcode)}\n            >\n              <HeadingUI\n                classN=\"color-text _ellipsis\"\n                text={name}\n                size=\"16px\"\n              />\n              <span className=\"color-span\" style={style}></span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ColorContent;\n","import { setColorData, setColorsPalettesData, setColorsVariantsData } from \"redux/reducers/colorReducer\"\nimport { getColors, getColorsPalettes, getColorsVariants } from \"shared/api/dataApi\"\n\n\nexport const getAvColors = (dispatch: any, variant: string = '') => {\n    getColors({\n        colorVariant: variant\n    }).then(res => {\n        dispatch(setColorData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvColorsVariants = (dispatch: any) => {\n    getColorsVariants().then(res => {\n        dispatch(setColorsVariantsData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvColorsPalettes = (dispatch: any) => {\n    getColorsPalettes().then(res => {\n        dispatch(setColorsPalettesData(res))\n    }).catch(err => console.log(err))\n}","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}"],"names":["ColorContent","activePalette","useSelector","activePaletteItem","dispatch","useDispatch","type","setType","useState","useEffect","getColorsPalettes","then","res","setColorsPalettesData","catch","err","console","log","getAvColorsPalettes","getColorsVariants","setColorsVariantsData","getAvColorsVariants","setMannequinType","_jsxs","className","children","_jsx","id","colorPosition","map","opt","ButtonUI","version","onClick","classN","colors","color","_color$colors","name","hexcode","_id","style","concat","setActiveColor","updateActiveColor","HeadingUI","text","size","CallbackSkeletonValue","_ref","versions","default","red","orange","blue","green","gray","disabled","isLoading","buttonProps","event","LoaderCircleUI"],"sourceRoot":""}