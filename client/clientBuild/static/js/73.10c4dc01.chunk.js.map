{"version":3,"file":"static/js/73.10c4dc01.chunk.js","mappings":"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","sources":["components/Customization/contents/PrintContent/PrintContent.tsx","services/printService.ts","shared/objectModels/GenericModel.ts","shared/ui/LoaderCircleUI/LoaderCircleUI.tsx","shared/ui/ButtonUI/ButtonUI.tsx"],"sourcesContent":["import { useEffect,useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { activePaletteItem } from \"redux/reducers/printReducer\";\nimport { getAvPrintsPalettes, getAvPrintsVariants } from \"services/printService\";\nimport { BASE_UPLOADS_PRINTS_HIGHS_URL, BASE_UPLOADS_PRINTS_PREVIEWS_URL } from \"shared/constants/genericApiRoutes\";\nimport { ObjectType, appColor } from \"shared/helpers/helpers\";\nimport HeadingUI from \"shared/ui/HeadingUI/HeadingUI\";\nimport './style.scss'\nimport { setActivePrint, setMannequinType } from \"redux/reducers/mannequinReducer\";\nimport { ButtonUI } from \"shared/ui/ButtonUI/ButtonUI\";\n\nconst PrintContent = () => {\n    const [activeType,setActiveType]=useState()\n    const activePalette = useSelector(activePaletteItem)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        getAvPrintsVariants(dispatch)\n        getAvPrintsPalettes(dispatch)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const updateActivePrint = (print: ObjectType) => {\n        const obj = {\n            highresurl: `${BASE_UPLOADS_PRINTS_HIGHS_URL}${print.highresurl}`,\n            previewurl: `${BASE_UPLOADS_PRINTS_PREVIEWS_URL}${print.previewurl}`\n        }\n        dispatch(setActivePrint(obj))\n    }\n    \n    const btns = [\n        {\n            id: 1,\n            colorPosition: \"All over\",\n            type:\"all\"\n        },\n        {\n            id: 2,\n            colorPosition: \"Top\",\n            type:\"top\"\n        },\n        {\n            id: 3,\n            colorPosition: \"Bottom\",\n            type:\"bottom\"\n        },\n    ]\n    useEffect(() => {\n        dispatch(setMannequinType(activeType))\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [activeType])\n    return (\n        <div className=\"print-content-container\">\n            <div className=\"btnContent\">\n                {btns.map((opt:any) => (\n                    <ButtonUI key={opt.id} version=\"gray\" onClick={()=>setActiveType(opt.type)}>{opt.colorPosition}</ButtonUI>\n                ))}\n            </div>\n            <div className=\"print-content customYScrollbar\">\n                {activePalette?.prints?.map((print: ObjectType) => {\n                    const { _id = '' } = print || {}\n                    const { name = '', previewurl = '', highresurl = '' } = print?.prints?.[0] || {}\n                    return <div\n                        className=\"print-content-print\"\n                        key={_id}\n                        onClick={() => updateActivePrint({\n                            previewurl,\n                            highresurl,\n                        })}>\n                        <HeadingUI classN=\"print-content-text _ellipsis\" text={name} size=\"16px\" color={appColor} />\n                        <div className=\"print-content-image\">\n                            <img src={`${BASE_UPLOADS_PRINTS_PREVIEWS_URL}${previewurl}`} className=\"print-content-img\" alt={name} />\n                        </div>\n                        <span></span>\n                    </div>\n                })}\n            </div>\n\n        </div>\n    );\n};\n\nexport default PrintContent;\n","import { setPrintData, setPrintsPalettesData, setPrintsVariantsData } from \"redux/reducers/printReducer\"\nimport { getPrints, getPrintsPalettes, getPrintsVariants } from \"shared/api/dataApi\"\n\n\nexport const getAvPrints = (dispatch: any, variant: string = '') => {\n    getPrints({\n        printVariant: variant\n    }).then(res => {\n        dispatch(setPrintData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsVariants = (dispatch: any) => {\n    getPrintsVariants().then(res => {\n        dispatch(setPrintsVariantsData(res))\n    }).catch(err => console.log(err))\n}\n\nexport const getAvPrintsPalettes = (dispatch: any) => {\n    getPrintsPalettes().then(res => {\n        dispatch(setPrintsPalettesData(res))\n    }).catch(err => console.log(err))\n}","export type CallbackSkeletonType = (event?: any) => void\nexport const CallbackSkeletonValue = () => {}","interface Iloader {\n    classN?: string\n}\n\nconst LoaderCircleUI = ({ classN }: Iloader) => {\n    return (\n        <div className={`LoaderCircleUI ${classN}`} ></div>\n    )\n}\n\nexport default LoaderCircleUI","import { HTMLProps } from \"react\";\nimport \"./style.scss\";\nimport { CallbackSkeletonValue } from \"shared/objectModels/GenericModel\";\nimport LoaderCircleUI from \"../LoaderCircleUI/LoaderCircleUI\";\n\ninterface Props extends HTMLProps<HTMLButtonElement> {\n  type?: \"button\" | \"submit\" | \"reset\";\n  version?: string;\n  classN?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst versions: Record<string, string> = {\n  default: \"default-btn\",\n  red: 'red-btn',\n  orange: 'orange-btn',\n  blue: 'blue-btn',\n  green: 'green-btn',\n  gray: 'gray-btn',\n}\n\nexport const ButtonUI: React.FC<Props> = ({\n  children,\n  type = \"button\",\n  version = \"default\",\n  classN = '',\n  disabled = false,\n  isLoading = false,\n  onClick = CallbackSkeletonValue,\n  ...buttonProps\n}) => {\n  return (\n    <button\n      {...buttonProps}\n      className={`ButtonUI ${classN} ${versions[version]} ${disabled ? '_disabled' : ''}`}\n      type={type}\n      onClick={(event) => !disabled && !isLoading && onClick(event)}\n    >{isLoading ? (<LoaderCircleUI />) : children}</button>\n  )\n}"],"names":["PrintContent","_activePalette$prints","activeType","setActiveType","useState","activePalette","useSelector","activePaletteItem","dispatch","useDispatch","useEffect","getPrintsVariants","then","res","setPrintsVariantsData","catch","err","console","log","getAvPrintsVariants","getPrintsPalettes","setPrintsPalettesData","getAvPrintsPalettes","setMannequinType","_jsxs","className","children","_jsx","id","colorPosition","type","map","opt","ButtonUI","version","onClick","prints","print","_print$prints","_id","name","previewurl","highresurl","obj","concat","BASE_UPLOADS_PRINTS_HIGHS_URL","BASE_UPLOADS_PRINTS_PREVIEWS_URL","setActivePrint","updateActivePrint","HeadingUI","classN","text","size","color","appColor","src","alt","CallbackSkeletonValue","_ref","versions","default","red","orange","blue","green","gray","disabled","isLoading","buttonProps","event","LoaderCircleUI"],"sourceRoot":""}